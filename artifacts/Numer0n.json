{
  "name": "Numer0n",
  "functions": [
    {
      "name": "_add_num",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_add_player",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_player_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_assert_invalid_caller",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_caller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_assert_is_player",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_record_result",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "caller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "eat",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "bite",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_num",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "call_num",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "target",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "check_result",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dB5wdRR3A8d17dxf2nmBiV1CDFVH0LkGKBU8REI2KgijYCBA6hHIQeu+9994RBKQKAoKhCQgSBKkCgnRIQnohkdn3/pffTSaPjPwnefH++/ncJ1tmZ75TdnZmd+/SmmVZntWWyts/Ldncixzvrv/b+e6Wrlwvrs6UzhZFZw5jC8q79e2f5wbUtots7vIv6uGYv3Yc71byteuXXyfz0xLIj/zbVt+f4V+es0Q9z4Wur8vFt1jWd8m97W6sFyj/Dl1LZxWWDqTzngR5rmbzn2dJv4rz6FsigW/xCN8S8C0e8A1M4HtvhG8gfO8N+N6XwDcowvc+WN6vaynbtFjej3Q+mCDPH8jmP8+SfhXn0ffhBL4PRfg+DN+HAr6PJvB9JML3UfjkPLbpJRP4PhbhWxK+jwV8H0/gWyrC93H4lgr4PpnA94kI3yfh+0TAt3QC3+AI39LwDQ74Pp3A96kI36fh+1TA99kEvs9E+D4L32cCvs8n8H0uwvd5+D4X8H0hgW+ZCN8X4Fsm4PtiAt+yEb4vwrdswLdcAt+XInzLwfelgO8rCXxfjvB9Bb4vB3xdur4hzteZzb+vC5bldS3LO8uQCMvysAzVtXS5OL+qG2dZzCvAL3mVdKo4zjpfQTlvOdKUeGWbPrP2b6uzdHrOAuE6m8An+4YmtBSexS2N+qWQj3W5kq6v7MNXjPCtBMvXVS1Dy+duK0dYvg7L11QttT78G7pxlk3+m/BLXiWdKo6zzr+pnLccaUq8sk2fWc1qVrOa1axmNatZzWpWs5rVrGY1q1nNalazmtWsZjWrWc1qVrOa1axm1bc6y4qes0C4FZvAJ/u+ltBSeBa3NPpOJORjXX5L11d+U7NKhO9bsHxH1TKk/KamO8LyHVi+rWqpfVOzqm6c5Tc13w3kRdKp4jjr/LvKecuRpsQr2/SZ1axmNatZzWpWs5rVrGY1q1nNalazmtWsZjXromJ1llW8dAuEW6UJfLLv2wkthWdxS6Pn7CEf63J1XV/5TmK1CN/qsKypayn/VsMaEZY1YfmerqV8J/F93TjLdxI/gF/yKulUcZx1/gPlvOVIU+KVbfrM2r+tzrKa5ywQbrUm8Mm+7yW0FJ7FLY36pZCPdflDXV/Zhw+L8P0QlrVULV3le+UfRVjWguXHqpZaH/4T3TjLPvyn8EteJZ0qjrPOf6qctxxpSryyTZ9ZzWpWs5rVrGY1q1n7t9VZhnnOAuGGNYFP9v04oaXwLG5pNE8J+ViX6+j6yjnd2hG+dWD5uaqlNqf7WYTl57Csq2qpzel+oRtnOadbD37Jq6RTxXHW+XrKecuRpsQr2/SZ1axmNatZzWpWs5q1f1udZW3PWSDc2k3gk33rJrQUnsUtjeYpIR/r8pe6vnJOt36E75ew/CaB5VcRlt/A8mtdSzmn+61unOWcbgP4Ja+SThXHWecbKOctR5oSr2xvgP2LitVZ1vecBcKt3wQ+2ffrhJbCs7il0fWzQcDHutxQ11de38MjfBvCMiKBZaMIywhYNta1lH3NJrpxln3NpvBLXiWdKo6zzjdVzluONCVe2aZvUbE6y3DPWSDc8Cbwyb6NE1oKz+KWRtdPyMe63DyBb7MI3+bwbRbwbZnAt0WEb0v4tgj4tk7g2yrCtzV8WwV8IxP4tonwjYRvm4BvuwS+bSN828G3bcC3QwLf9hG+HeDbPuDbMYGvJ8K3I3w9Ad+oBL6dInyj4Nsp4NslgW/nCN8u8O0c8O2WwLdrhG83+HYN+PZI4Ns9wrcHfLsHfHsl8O0Z4dsLvj0Dvn0S+PaO8O0D394B334JfPtG+PaDT87j/xd+QALf/hG+A+DbP+A7KIHvwAjfQfAdGPAdksB3cITvEPjkPLa/wxL4Do3wHQbfoQHfEQl8h0f4joDv8IDvqAS+IyN8R8F3ZMB3TALf0RG+Y+A7OuA7LoHv2AjfcfAdG/CdkMB3fITvBPiOD/hOSuA7McJ3EnwnBnynJPCdHOE7Bb6TA77TEvhOjfCdBt+pAd8ZCXynR/jOgO/0gO+sBL4zI3xnwXdmwHdOAt/ZEb5z4Ds74Dsvge/cCN958J0b8F2QwHd+hO8C+M4P+C5K4LswwncRfBcGfJfo+srn+xdH+C6B5TJdS/k75L+LsFwGy6W6lvJdw+914yzfNVwOv+RV0qniOOv8cuW85UhT4pVt+szav63OcrHnLBDu4ibwyb5LE1oKz+KWRv1SyMe6vFLXV/bhV0T4roTlalVL7W+T/yHCcjUsV6laan34Nbpxln34tfBLXiWdKo6zzq9VzluONCVe2abPrGY1q1nNalazmtWsZjWrWc1qVrOa1axmNatZFxWrs1zhOQuEu6IJfLLvqoSWwrO4pdFz9pCPdXm9rq98J3FdhO96WG5UtdTeSfwxwnIjLDeoWmrvJP6kG2f5TuIm+CWvkk4Vx1nnNynnLUeaEq9s02dWs5rVrGY1q1nNalazmtWsZjWrWc1qVrOa1ayLitVZrvOcBcJd1wQ+2XdDQkvhWdzS6Dl7yMe6vEXXV76TuDnCdwsst6laav8vw58jLLfBcquqpfZO4i+6cZbvJEbDL3mVdKo4zjofrZy3HGlKvLJNn1nNalazmtWsZjWrWfu31Vlu9pwFwt3cBD7Zd2tCS+FZ3NJonhLysS7v0PWVc7rbI3x3wHK3qqU2p7szwnI3LHepWmpzur/qxlnO6e6BX/Iq6VRxnHV+j3LecqQp8co2fWY1q1nNalazmtWsZu3fVme53XMWCHd7E/hk310JLYVncUujeUrIx7q8T9dXzunujfDdB8sDqpbanO5vEZYHYLlf1VKb0/1dN85yTvcg/JJXSaeK46zzB5XzliNNiVe26TOrWc1qVrOa1axmNWv/tjrLvZ6zQLh7m8An++5PaCk8i1sazVNCPtblQ7q+ck43JsL3ECyP6FrK/2fgHxGWR2B5WNdSzun+qRtnp4vjUfglr5JOFcdZ548q5y1HmhKvbNNn1v5tdZYxnrNAuDFN4JN9Dye0FJ7FLY36pZCPdfm4rq/swx+L8D0Oy1O6lrIPfyLC8hQsT+payj78X7pxln340/BLXiWdKo6zzp9WzluONCVe2abPrP3b6iyPec4C4R5rAp/sezKhpfAsbmnUL4V8rMtndX1lH/5MhO9ZWJ5PYPl3hOV5WJ7TtZR9+H904yz78Bfgl7xKOlUcZ52/oJy3HGlKvLJN36JidZZnPGeBcM80gU/2PZfQUngWtzS6fkI+1uVLCXwvRvhegu/FgO+VBL6XI3yvwPdywPdaAt+rEb7X4Hs14Hsjge/1CN8b8L0e8I1L4Bsb4RsH39iA780EvvERvjfhGx/wTUzgmxDhmwjfhIBvsq6v01kmIf2Bb/+01NcnI90pCcplcjb/5TIF5SLnTYJvmq6vLJepWd9yqdTXpyHd6QnKZVo2/+UyHeUi502Fb2YC34wI30xY3lK1rLB8FZa3kM5s1XRqY+xZ2fzneTYsLbmqZWgRSLyRRdJ3llzXUo73K7pxdro4W5XjdHG05XMXmNirON6K8mpTLq8caUq8sk2fWfWtzjLLcxYIJ8cWpk/25enKakjhWVAcfXyytMGyWIK+rD3CshgsAxL0ZUWCfqcDGZK8FqjzjsD10ZGg/RVe+5Nt+syqb+V13Y5+p/D6yoXpk30DYNG+FlyeW7O+9eS2V22fk6by+GSoi47jn24YJK0Kwuw0YI5rDbh0x3B9x60Jx2dlmbd5+XV5G7aAy7ytQZkXKPO10rnK+15LxL2G92DdeUvNEjOGTzi36UowRyzH8DOU43RxTM/mLjCxV3F8BspLe36eI02JV7bpW1SsztJ7XeD+JOF4LS8sn+zjvFq7zRb1eDPE7fqkzdEnZQn6ytzrK8WQoa+UMKPa57i2rq934HgL6k/KivU3S7fMyvqTdCRe2Za0OpAXOUZfDnNofibPInluxUtjQJbu/jnAc7qy33UBt4kBXrmwTeyLNrFnOlcXXRJve6C+2gPlJdcQ42jz4pA8sr1I/bp45R7Iebr2s80c6Ui8sj0TPmmLDMt+LEP9yTmheGS9gvKb7u1L8Gy7zOd0L5+yPQ0+uTcx7LRAnll3fjw51l2dD0RZTEcYeWbdkvVtJ3JuBWFOQJsf/T/0g8rjuYb94FsoG78f7Aj45nXvVR5PNbz3zoDPb7cLYmw3O+DwxwUprgvfIWnyfY/y+7chLs5JCfIh7xHL+W69HUk6FRy/BNfSpfV11wblWmM/fmPguCyN5i98j6j8/rd8Tzce8XcjDaar/V6c6eb1H0lD9lewfkPvzXJOuPLcesGJ2bX1CYFwXJey57tsOT4hcZ7fhKMb25KWayeXo03diDGJ9jtk5pflMgPlIsdD8x0J79qzXA/sc7WvyxzpSLyyPQk+2TcFZTo6YgyV4jlBLolnc9q7P4bn/Yxjt5nevma6n/F4lvWdY8o5oXhknWO3ad4+F8fUBPmc5uXTf+8fGofxOPPCsZsfD8dlMnbz74kujLRTGbtl3vVVQZhH0Te0DZiTto3d4sxNMnaba8w0P2M3f923J7hXDEkwdivzLv02x1mSTgXHX0W7fx3jqN7rCOOsmYHjsjQaZ01B+U3QzWsn7/0yzpoQSHe8brp9xhxy35E0ZH8F6zMwzuJ3gVK+/KZuYiAc16Xs5Rx+MzgxcZ45runGtqTl2sk4tKmZGGdp33OYX5YLx1lyPDTOkvCuPcv1wP5R+7rMs77fNHZjezJ8sm8qylTuSQvqGZr/bG9+njlqP+fkOzsZU/rv7HgP5HxY+5s+3o9d/AOR7lsoqt77bH27xbs/VxBmTbxjHIQxh98+OQ7hPkl/BtIXS2vdmHvvUHwjn3sxzGzsYjwzA3mVMH5eleuhS9oEn7UMgkPSqiDMUvVyXTzrO/bg+Hiqty/FnJBjVolXtiUtjo85ZvbnjxzbSj3P9M5L8M340AT377IPfxN5kfxLOryHLoPrZdn6Or/XZttfOXA8Q/lx6cY675/KzynKtjsW8XcjDaar/bscTFfGKpKG7K9gfaXezn9OOLdI+YrZtc3xgXBcn+ydU8Xx8YnzzGdT3diWtFw7WQ5tamXcY1M8+xwfKJc2lIsc5+8UVLyxu2vPveNL9Ffa12WjZ2ocd8o+Ka8O7ONcfALWByIM54CK/VXvvYJtbBAckhafha6BewV/b0HOcW1km8B9mvcS/1vj1M+8euMNPAfw7/0Jxo6dCd53Dk3xTYeLg+NpKZve95o4vg76hHVxH/Gfq7jjIwLHs77F3rt0Y53tPuXvTsl9ZnIgXe3fKWO6cp/xnyPz2cPGuM9wHtfi9XmuLU8JhOO6lD3nUf7z6lR55viiG9t817Ue2tQI3Ge0nxsyvywX3md6j+dz9lW8/mNe4+IU31rNa1zMObvs4xgv1BfzWZ1yXzec82QZd/vfqPEb2oTfagafD7d5ZcTvbGej3IYt4Dm7/20z5658F7oozNmvw3W8Z6D9sc/KA/tszv7Oc/ZD5jFn57u7qd6+/5c5u/I4fmiCbxv6zGU4Z+dzbzl+Aq6XkzBWkjEA2/6FgeMZyo9LN9b5bcFY3bx2cq4sY6mxgXRf1023i+nKWErSkP0VrF+AsRT/boOUL//mwbhAOK5P8s7h33QYlzjP/JsO3diWtFw7ORVt6kKMpbTHdswvy6UV5SLHOWef5YXn34Jgf6V9XXK+K/H676RC74r4HEfuVf77rYEIwzmEYn/Ve69gGxuUzf3coYIw13hz9slefl1dPRG4T/Ne4n/Xa3P26GWhz9lvQ58w+h3m7GMU5uzKzwc7OVeW+8ykQLopnvNNRN75rI7PyGT9Qdxn+C5YypfPAacEwnFdyp7fmIXe3afI87zew/JZ351oU2MWwpyd95nQnH2WF35e4+JmmrM/YXP2PuXW6pURfx+Z7WDV9j7kvpFo4FpQJi2IX9YrdUhrNjdkyXqlLl3fHt7TM2LrbXsG94wcvMOOG/ZsP3yjnsGjNu/ZbPDInUZsv8lWI0fx5NXfzckHv5uTr449+b+0v8yAxU4BAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_finished",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUuw7CMAx00uYFEv/AzlCE1LnfwB9UomJEAv5fEIjVw3Srq3qJ6zR3l0tiQ0SGvlHRGEbkh5J7qHdlbGaGBz4tTPfGcAUrgWZbxl3Zi9XlbbcTHnrwVonniOeDuARciX7PkWuV8CJBznPZuz3Mu4k1foIP13OtptEHuRY9cmIvzbz4eIQ8HXwz10ZoWFIL+8C4tdCyJm/Q5T1ljAi8fC8C+M78EXQkXR2NEToM/feFBHmEmhX/BVrkLbeexrunhYnvDveO0UG+5N3PnnJffDxv9/46nIf+YkCWbBEWpGGOrYavUg01Pj48Yl4foMY4EeakPWr7l7hGjDlezlf5iYgHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_first",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUuw7CMAx00uYFEv/AzlAGOvcb+INKVIxIwP8LArF6mG51VS9xnebucklsiMjQNyoaw4j8UHIP9a6MzczwwKeF6d4YrmAl0GzLuCt7sbq87XbCQw/eKvEc8XwQl4Ar0e85cq0SXiTIeS57t4d5N7HGT/Dheq7VNPog16JHTuylmRcfj5Cng2/m2ggNS2phHxi3FlrW5A26vKeMEYGX70UA35k/go6kq6MxQoeh/76QII9Qs+K/QIu85dbTePe0MPHd4d4xOsiXvPvZU+6Lj+ft3l+H89BfDMiSLcKCNMyx1fBVqqHGx4dHzOsD1Bgnwpy0R23/EteIMccL9moUUogHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_started",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUuw7CMAx00uYFEv/AzlAYOvcb+INKVIxIwP8LArF6mG51VS9xnebucklsiMjQNyoaw4j8UHIP9a6MzczwwKeF6d4YrmAl0GzLuCt7sbq87XbCQw/eKvEc8XwQl4Ar0e85cq0SXiTIeS57t4d5N7HGT/Dheq7VNPog16JHTuylmRcfj5Cng2/m2ggNS2phHxi3FlrW5A26vKeMEYGX70UA35k/go6kq6MxQoeh/76QII9Qs+K/QIu85dbTePe0MPHd4d4xOsiXvPvZU+6Lj+ft3l+H89BfDMiSLcKCNMyx1fBVqqHGx4dHzOsD1Bgnwpy0R23/EteIMccLut1UrYgHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_player",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::player::Player",
          "fields": [
            {
              "name": "player_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "is_player",
              "type": {
                "kind": "boolean"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XTW+CQBCGd0VA/P5sr9s/YMBzD3vr3f4CEm0vWhKh6d+v4Ez6duXQxKE4ie64wLzPzMiyeEoprS7mgY/Gc5bG+DZLtFysuAOcHchjS34E82wB+FaII5CvU4zsPPrnTw9yc3OP1O9+ljamnH1Zvk0EGmzu/8eC70P9u7IsSaB++ioUs+ppKMypoH/YI2YfwPEQjvWEObS6vg/4N/L9lbXTMmtT/Y9kY26GxMy1jIDfzWcgnE8Zo0+xuqA1AM1RA70bUixNH9bog+64AV3W8UmXOVjLg3OeaBxBPdx+NFEbNAs+ayGLbpkFny0K5kZOrfC5hT14geNT8vG5NSPfq4k9hbkJ+bOaa7FGUyeX+DaraoQ6Fn6zVh8YZnfA0vsnFu4Jx504LG3qzmV1q3V0Abr8H51D3Vl/ARxL4fzLGKsajiVwsP4KOB5kOWLtcGjQZa0IfLyXHx0+XDvwWl4T+PyQcvFkc9k0sI+o9sm838UaoVnwAxiF9+xJuR7wMyUvslP6vt/u050GLEZ1Xz1cH5dp3qp2YY6XHh/m+PoQ5jgObnuvXkOtUP6YqKpJFN+B8RxD4zONr5famfyQFSY2H+fv9HDIvva7tcFjuTl+5oXJi/RUmLdTdjTJ+hulBkXjdA8AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_result",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "round",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::result::Result",
          "fields": [
            {
              "name": "call_num",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "eat",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "bite",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_round",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUMQ7CMAx0QpMQkPgCO1ORUOe+gR9UomJEAv4vCOTUw6q6NBVe4jrJnXO2a0TEyNdWMphR/iH7nuJtXuuZ5omvFKZ7Y7iMFSlnm9ddfosty9tsRzT0pG0hniPXh3GFuKL81hGxldIiko+9pN2e9t3IHT/Cx/cRq2TQQd9ljZx6Sz3PPhoxT0vf4NqoHJbMBToAt1K5/JM3lOU9JYw18aIvAukOfpyL5HP/WHUuyCIz1XgZeqAUJvc/bGp2l+zBpB/+T4/n7d5d+3PfXQylpUfVUmrs88ijpBXFpsoYKAYcLq2Wp9j7Na5Ra7IX+0tLHRAHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_secret_num",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_winner",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_nums",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 16
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "join_game",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "",
      "",
      "eJztXcuO3EgO/Jc6G0a+H/6VxR6M3VlggIFnsfbN8L+P3G5R2SUquaqkyC6NTm4DylAolIwkVfn4fvvjz399/vb7n1++3j59v/nbp398v3397+cvP//39dvn/327fTIfbr99+ff0748Pt//8/sdvt0/2x4fVVTb4lF6vnP4uBa6uAbs8Omvny6NLxOU15/li4+Jybf7xzw+38JSsoyBrHyKwDiYOsE4Y65BNeG0Ssg8N96lFxlvU+SahRtd/Wl+zmxn5WvJCKR38joo4d743VYe5B2MBP5hQWu7TDaxhuAN0HPQOluEOscIdbKiE/iEW6Dsh23BPyIkTqhY6RKje3RNCHVuTEGrGmoRQn9UktGGheoTGHZqZ0LjtMhPi8FJOQo7DelkJyTs1QUjBqZNbCOV6T0jBqfuEFJy6T0jBqfuEFJy6T0jBqfuEFJy6T0jBqbuEvIJT9wkpOHWfkLhTR2M9FFnGm3tC4k5NERJ3aoqQuFNThMSdmiIk7tQUIXGnpgiJOzVBKIg7NUVI3KkpQvJOHRx8gYoh3H+OCfJOTRCSd2qCkLxTE4TknZogJO/UBCF5pyYIyTt1n1CUd2qCkLxTE4QUnLosQ8c0jtwTUnDqPiEFp+4TUnDqPiEFp+4TUnDqPiEFp+4TUnDqLqGk4NR9QgpO3Sck79QxLENHTPGekLxTE4TknZogJO/UBCF5pyYIyTs1QUjeqQlC8k7dJ5TlnZogJO/UBCFxp06hwmSUFFc/cWZxp07TAAaEksn3hMSdOiUfFkJ59crEnTqbCgplG1YKiTt1nl4aEHLu/pNeFnfq7HwBQn6VD2Vxp87ewuU5rKZ8ZXGnzsHD72U5mvtJcUXcqfOUwy6EInF5CnO+m5q5l/bn1+T1td7N4TIZnF+A98/UFB8unkIV8TFrpypl7um5GU1wVayty3DojCXmxgYDM2mDbYeq/SKKj7MHiuhsASbO+dTXxZriQfNpaBuSUTw7OKeM8jnNKWWUz8ROKaN8/nhKGeWz3lPKKJ+rn1HG+t4rjCeR8b2XJE8i45lqGEUZryqGRcarimGR8apiWGS8qhgWGa8qhkXGq4phkfFUVYx3sFPFpKKjZPQBfvswwYzs3WDNqcoYRR1PVcco6niqQkZRx1NVMoo6nqqUUdTxVLWMoo6nKmYUdTxVNaOo46nKGUUdr3qGRUeW/dYuHa38rnIn1fGqZ3h0vOoZHh2veoZHx1PVM7kun3FLu0LgAWHeeYESyzxtOEdPCEM8KV5C1ATb/NZauk8a56/hTde1sfxCxxNrLnQ83WRC39h5kQsdT0240PEBmwsdH8a40HFz50LHLY8LHfcNLnTGWC1rdMZYRdAZY3WNvrH3Hhc6Y6wi6MOxOpnJ7PC+rvGHo5XAH45XAn84Ygn84Zgl8Iej1ocZ30ezxh+OWwJ/OHL7+Bu7sfHhD0dvgPANKazxh+OXwB+OXwJ/OH4J/OH4JfCH45fAH45fAn84fgn84fjt42/s0bUHP8ClzVp8wB+P3z7+ePz28cfjt85lcLTrrHBjfys+/PH47eOPx28ffzx++/jj8dvHH4/fLv7Gzk18+OPx28cfr3X9vH44RrvGH692+/jj9W4ff7zi7eMfPP5ubDHEh3/w+LuxARAb/sZ+Pnz4B+fPG7vt8OEfnD9v7IXDhz8+/nbzk42davjwx+O3j3/w+LuxLQwb/sYuL3z4B4+/GzuP8OEfnD9v7FbBNj5ubOPAhz/+zbmPPxy/CRZMpLD+PraxIp4Pfzh++/gba6j58Ifjl8Afjt8U50tTXsfXxnJUPvzh+CXwh+OXwB+O3+RhE6ns1/gM8dvFH49f+IU61fX4vrFIigvfbSwe4sMfj98+/nj8Lu+3pjX+ePz28cfjt48/HL8ZZtzkuMrP3cZkdj784fgl8Ifjl8Afjt8MM2lyXuUnbmOyLB/+cPwS+MPxS+APx2+G39fyevxyG5Px+PDH4zfPE+xyc4A64I/Hbx9/PH77+OPx28cfj9/l/ZZV/unG51kR+OPx28dH4zeaMosabbODJYZf4lx/lXb88rvnLTp8ZpYSF9QX9nCpeVlo7wpBxkVYxe9yMF1g65f9RdsptNa/Ukct5zmoo272HNRRo3wO6qgHt9Sd73uMC25Oolwo5s0dkIwXtvrOJhLXLhOLY2rcy2Fzhadngy+tDQdbfz0lOhI831PGunwPiW+eEmFsgHBtJmXH3XaIT1F8PvFSnK9NJa+6CD5V8p08ZQHm7u1TvjAnh3E95iXNJKoLxPtxMID7Bnd+SDI/0HvI6ufwqcWuXw+ZTSgyr3DwgvFIzyKzCV7q2UIK1/YWnHrfs8hkgmQeoeu6FDzFHI7UKM02TJOoaDTPkqT2BVk0JpZzFlyI7ScidImV88tCojcfPPcnwfjk3/ehYLKgYLvYAFcQntI3J4tYgy1OIhQZT5V2KVIDHNNi2kVkkyQvdMZzmofptD9GvtLBJ0MfR8daOK3C2uKIHuMK/JLhSqEiw1YH2PXND0/4KQ691BOfxP130EUlWcXntP8d5O6nt/hc/GfVBT4bO9tWy+jVDgYWn5uu9esTGL6EILqlrPA1dGWZCuwMy5p9baTfOMHNWSjIo2tWVe1f7OvwBQqHsvdwYs2kdpO+PMIez9H2sA/Gwh2CCaVl/3ILPInZdwsTurfAs4J9t9i14DrEsnzSyavDwBy+bOJQRhUS9+nv1SGADl9oocoIH5U1GeEDlyYjfMjQZDTu1tyMxh2YmxGHq/Iy4jBhXkbynk0xUvDs5BZGud4zwhfXqDJS8GyCkYJnE4wUPJtgpODZBCMFzyYYKXg2wUjBswlGCp5NMBL37GgsFNXR+PuDkh2+oEqVkbhnk4zEPZtkJO7ZJCNxzyYZiXs2yUjcs0lG4p5NMhL3bJKRvGcHB5+oYgirrzX4IjpVRvKeTTGS92yKkbxnU4zkPZtiJO/ZFCN5z6YYyXs2xUjesylGCp5dllFkGlLuGeELJ1UZKXg2wUjBswlGCp5NMFLwbIKRgmcTjBQ8m2Ck4NkEIwXPJhjJe3YMyygSm902fjHy+GJZVUbynk0xkvdsipG8Z1OM5D2bYiTv2RQjec+mGMl7NsVI3rMpRuKencKyOCnF1a+iHl8gfSijaTADRsnkFSNxz07Jh4VRXr01fBH2kYyygRl1Ntuw1kjcs7OFNQ82O3f/1c/jC70PZeT8ciiGX+VHHl8afigjb+HyHFazxjy+mPxQRsvaBpujuZ9Z5/Hl54cy2nfGC8xwTe3m+OhRJsk72Okj+mWC6/5pkx5fNX/JIj56HXgikK3LwOiMJabZBgOTcoMdOtbd41saPKmKzsI6aetcs6po43yq4pdF2HVQR/E84aQ6ymc359RRPic7p47ymeQ5dZTPf8+po3zWfk4d33ut8Sw6vvfi5Fl0PFM1o6jjxt41l457dbzqGR4dr3qGR8ernuHR8apneHS86hkeHU9Vz0zlGejom52KNnT0sBu1Ne1ejY/oeKp6RlHHU9Uzijqeqp7R03Fjl61Lx706nqqeUdTxVPWMoo6nqmcUdTxVPaOo46nqGUUdr3qGR8ernuHR8apneHS86hkWHeV3Bjypjlc9w6PjqeqZXJfvuKVdOvCAMO+8QIllnkicoyeE6T5p/Yhae5f9SzN8scr/0Q4NXQtrLJxtd3N2PxtZu9Eq5vlebzbGd35uhXdvqhX+7qlWeClGtcILj14r58pHND10cGyKb/e2ns8EKh/RZIhshfYPshXePehm6HvuN/N2425TiL42C81kezjtY6tX0c3QbkU3Q/sV3QztWHQztGfRzdAKjm6G9kgP53MEH940W7tUgFEttGebL68Y7b2sd0B7Oucd8OUGu+4A7hra1SbLHfAezXkHvPOz3aFs+W+Fs5Vtc+xEsNAMN2CyGX5qqV/Osmuaudctx80jDjy1esCBp1YPOPDU6hEH/tnsAQcOfssACqzUcc1ypwKt8KCmWuEHnUJKFFOTQrjXZgmXsT/UTq02FuWSzfanOVNy+Uie89Jsf6Lz0mx/pvPSbH+q89Jsb67z48dfnhJ1Cg==",
      "",
      "",
      "",
      "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nFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnFdnnNdgnNdgnNdgnNdgnNd4KI0djPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPMajPPaGOe1Mc5rY5zXxjiv7aE0dmOc18Y4r41xXhvjvDbGeW2M89oY57UxzmtjnNfGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8NsZ5bYzz2hjntTHOa2Oc18Y4r41xXhvjvDbGeW2M89oY57UxzmtjnNfGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8NsZ5bYzz2hjntTHOa2Oc18Y4r41xXhvjvLaLzms+3pf0R11bcq2xdy651tgbl1x0XncuudbYO5dca+ydS6419s4l1xp755Jrjb1zybXG3rmEaexF53XnEqaxF53XnUuYxl50XncuYRp70XnduYRp7EXndecSprEXndedS5jGXnRedy5hGnvRed25hGnsRed15xKmsRed151LmMZedF53LmEae9F53bmEaexF53XnEqaxF53XnUuYxl50XncuYRp70XnduURp7H7Red25RGnsftF53blEaez+UBq7X3Redy5RGrtfdF53LlEau190Xjcuuei87lzCNPai87pzCdPYi87rziVMYy86rzuXMI296LzuXMI09qLzunMJ09iLzuvOJUxjLzqvO5cwjb3ovO5cwjT2ovO6cwnT2IvO684lTGMvOq87lzCNvei87lzCNPai87pzCdPYi87rziVMYy86rzuXMI296LzuXMI09qLzunMJ09iLzuvO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kpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS1aOJSvHkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS1aOJSvHkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSdceSdceSdceSdceSHeedKUxtu2PJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJumPJ+nNL1h716P88d/w6269O2vvbY/d/bHh7ZNaTx873Pe0R/ev27X3Q0+auHPS0vCsHPe3vykFPK7xy0NMWLxz03JutHPS0yysHPa3zykFPG71ykFbq5xpt5SCt1M9l2spBWqmfK7WFg55btZWDbij13NrXN7J/sCii1/vnl4/91/9L8+033uvnv+/7p5fPkdt3s/6GO2Dh+hsujIXrb7hdFq6/4SpauP6Ge2vh+k9dcr/+RlqMeHtwZv7izfzro/N9fc6vDW/xNeKfuuZeOuk5E1w76VNX3Wsnfer+eu2kT11Kr530qZvmtZM+dX28dtKn7oTXTvpU6F87yav3c264dNJzdrh2klfv5wxx7SSv3s9Z4tpJXr2fM8W1k7x6P2eLayd59X7OGNdO8ur9nDWuneTV+zlzXDvJq/dz9rh2klfv5wxy7aSX17seb99fqnj8YtKT+fNtRf3shRjHVwxv858Tyu9n/stvhXvnn90go77O33929P3gWec/PHhW4w8PnjXzw4NnZfvw4Fl/Pjx4VokPD549lz84OJ7TuM8cPPv4/fDgb/zIGc+R2GcOnn3kzP39YG/zycGzj5wPD578OY729UeSo372A8x/8486x3MetHDQcyS0ctDJx/O6QSfPk3WDTp5/6wadPK/XDTrpxbpBJzfYukEnN+O6QVqpn9OihYOeA6OVg7RSP8dGKwdppX4Oj1YOuqHU3/QyjIx8/3I892svwxjPxdJ3s/6GO2Dh+hsujIXrb7hd1q1/rq++m/U33FsL199wyS1c/5kbseevvpF7v/06znjYykmfuRVfPOkzV92LJ33m/nrxpM9cSi+e9Jmb5rWTzqjYykmfuRNePOkzoX/xJK/eZ2Rs5SSv3mdsbOUkr95ndGzlJK/eZ3xs5SSv3mcqbOUkr95nfmvlJK/eZ9Jq5SSv3mcmauUkr95nJmrlJK/eZyZq5SSv3mcmauUkr95nJmrlJK/eZyZq5SSv3mcmauUkr95nJmrlJK/eZyZq5SSv3mcmauUkr95nJmrlJK/eZyZq5SSv3mcm6t836VtekF8t3h/7s78dpL//hPPMT30v819+K9w7/+U3yDfNj7fXq1duT+e//La5d/7Lb6Z757/8Fvum+fVOgXo9nf/yG+/W+WeO7HuZ/8036dvBb77v3g5+803zdvAkkr3y/WDf4lff07e+CvQMeK0bdBKydYNO0rRu0ElsVg3azgDdukEnQVg36CQ06wadBGzdoJNPftcNwkq9Pf//z60chJV6OyOn6wZppT4jp+sGaaU+I6ffMujb/nLS+f6FdT7GB/7ng9d4b2c+9TtZf8MdsHD9DRfGwvU33C4L199wFS1cf8O9tXD9DZfcuvVntPeX6+evvpF7vwu/neHelZM+dSu+dtKnrrrXTvrU/fXaSZ+6lF476VM3zWsnfer6eO2kT90Jr530qdC/dNKZhl05yav3mVtdOcmr9xlGXTnJq/cZRl05yav3GUZdOcmr9xlGXTnJq/cZRl05yav3GUZdOcmr9xlGXTnJq/cZRl05yav3GUZdOcmr9xlGXTnJq/cZRl05yav3GUZdOcmr9xlGXTnJq/cZRl05yav3GUZdOcmr9xlGXTnJq/cZRl05yav3GUZdOenl9b7TZWxncPV7mf/yW+He+S+/Qe50GdsZnv1e5r/8Zrp3/stvsTtdxnYGeL+X+S+/He+d/8036dvBb77v/nnwDNl+fPA3Opzt28Xn28GTMHx48DkZisfbsaj6xR/c27GnQz8+9nTmx8eeduPjY0+frx8fe/o8+ejY/pwgfHzsN71L9ucv5//42G96l+zPXxr/8bGnT9lfOfbTT38HrP27IA==",
      "eJzNlcEKgzAQBf8lZymb3cQ0/krpQVoLgmip3iT/XlsiUgz1IvJuBubBHJJxVE13K4e6a3tVjIpOVhWXUfXPsv2c+6F8DarQ5OScqaq9f7+tC5l61E01nUK2pjnnGRaRhRWboMWaCIu3C8suXLPJJwfzcWA+ZzAfD+ajCU1IowkxmpCgCRk0IbRKa7RMa7ROa7RQa7RSM1qpGa3UjFZqRis1o5WaDy+1IR1hw/QjtGY9UWQ9+YW1s/zhVd9T/vA/wI7ykkwPk4sjNmZ91ySZh61R8glvjZLPbGuUfApbo+QV/DMK4Q3yukLx",
      "",
      "",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod num_lib;\n\ncontract Numer0n {\n    use dep::std;\n    use dep::std::option::Option;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map, public_state::PublicState, singleton::Singleton, immutable_singleton::ImmutableSingleton,\n        },\n        oracle::debug_log::{\n            debug_log,\n            debug_log_field,\n            debug_log_format\n        },\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        selector::compute_selector,\n        types::address::AztecAddress,\n        types::type_serialization::{ // serialization methods for using booleans and field\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },   \n    };\n\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit, \n            assert_current_call_valid_authwit_public\n        },\n    };\n\n    use dep::field_note::field_note::{FieldNote, FieldNoteMethods, FIELD_NOTE_LEN};\n\n    use crate::num_lib;\n    use crate::types::{\n        secret_num_note::{SecretNumberNote, SecretNumberNoteMethods, SECRET_NUM_NOTE_LEN},\n        player::{PLAYER_SERIALIZED_LEN, Player, PlayerSerializationMethods},\n        result::{RESULT_SERIALIZED_LEN, Result, ResultSerializationMethods},\n        game::{GAME_SERIALIZED_LEN, Game, GameSerializationMethods},\n    };\n\n    global SECRET_NUM_SLOT = 2;\n    global GAME_ID_SLOT = 5;\n\n    // storage\n    struct Storage {\n        players: Map<PublicState<Player, PLAYER_SERIALIZED_LEN>>,\n        secret_num: Map<Singleton<SecretNumberNote, SECRET_NUM_NOTE_LEN>>, \n        results_one: Map<PublicState<Result, RESULT_SERIALIZED_LEN>>, // round => Result: { eat, bite }\n        results_two: Map<PublicState<Result, RESULT_SERIALIZED_LEN>>,\n        game_id: ImmutableSingleton<FieldNote, FIELD_NOTE_LEN>,\n        game: PublicState<Game, GAME_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            players: Map::new(\n                context,\n                1,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        PlayerSerializationMethods,\n                    )\n                },\n            ),\n            secret_num: Map::new(\n                context,\n                SECRET_NUM_SLOT,\n                |context, slot| {\n                    Singleton::new(\n                        context, \n                        slot, \n                        SecretNumberNoteMethods,\n                    )\n               },\n            ),     \n            results_one: Map::new(\n                context,\n                3,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        ResultSerializationMethods,\n                    )\n                },\n            ),\n            results_two: Map::new(\n                context,\n                4,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        ResultSerializationMethods,\n                    )\n                },\n            ),\n            game_id: ImmutableSingleton::new(\n                context,\n                GAME_ID_SLOT,\n                FieldNoteMethods,\n            ),\n            game: PublicState::new(\n                context,\n                6,\n                GameSerializationMethods,\n            ),\n        }\n      }\n    }\n    \n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let mut game_id_note = FieldNote::new(game_id);\n        storage.game_id.initialize(&mut game_id_note, Option::none(), false);\n\n        let selector = compute_selector(\"_add_player(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [player, 1]);\n    }\n\n    #[aztec(private)]\n    fn join_game(game_id: Field, player:Field) {\n         assert(game_id != 0, \"invalid game_id:zero\");\n        let game_id_note = storage.game_id.get_note();\n        assert(game_id == game_id_note.value, \"invalid game_id\");\n\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_add_player(Field,Field)\"),\n            [player, 2]\n        ); \n    }\n\n    #[aztec(private)]\n    fn add_num(player: Field, secret_num:Field) {\n        assert(context.msg_sender() == player, \"invalid player\");\n        // check caller validitiy\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_assert_is_player(Field)\"),\n            [player]\n        ); \n\n        num_lib::is_valid_nums(secret_num);\n\n        let mut secret_num_note = SecretNumberNote::new(secret_num, player);\n        storage.secret_num.at(player).initialize(\n            &mut secret_num_note, \n            Option::some(secret_num_note.owner),\n            true\n        );\n\n       context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_add_num(Field)\"),\n            [player]\n        ); \n\n    }\n\n    #[aztec(private)]\n    fn call_num(target: AztecAddress, call_num:Field) {\n\n        let target_address: Field = target.address;\n\n        // replaced if-else with assert as it leads to an errror at get_note()\n        assert(target_address != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_assert_invalid_caller(Field)\"),\n            [context.msg_sender()]\n        ); \n\n        let secret_num_note: SecretNumberNote = storage.secret_num.at(target_address).get_note(true);\n        let secret_num: Field = secret_num_note.secret_num;\n\n        num_lib::is_valid_nums(call_num);\n        let result = num_lib::check_result(call_num, secret_num);\n\n        // records results\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_record_result(Field,Field,Field,Field)\"), \n            [context.msg_sender(), call_num, result[0], result[1]]\n        ); \n\n    }\n\n    #[aztec(public)]\n    internal fn _record_result(caller: Field, call_num:Field, eat:Field, bite:Field) {\n      let caller = storage.players.at(caller).read();\n      let result = Result::new(call_num, eat, bite);\n      let mut game = storage.game.read();\n      let current_round = game.round;\n\n      if (caller.player_id == 1) {\n        storage.results_one.at(current_round).write(result);\n\n        game.is_first = false;\n        storage.game.write(game);\n\n      } else if (caller.player_id == 2) {\n        storage.results_two.at(current_round).write(result);\n\n        // check if either of the players win\n        let result_one = storage.results_one.at(current_round).read();\n        if ((eat == 3) | (result_one.eat == 3)) {\n           game.finished = true;\n        } else {\n           game.is_first = true;\n           game.round = current_round + 1;\n        }\n        storage.game.write(game);\n      }      \n\n    }\n\n    #[aztec(public)]\n    internal fn _assert_invalid_caller(_caller: Field) {\n         assert(storage.game.read().started, \"game hasn't been started yet\");\n\n        let player = storage.players.at(_caller).read();\n        \n        if ((player.is_player) & (player.player_id == 1)) {\n            assert(storage.game.read().is_first, \"invalid turn for player 1\");\n        } else if ((player.is_player) & (player.player_id == 2)) {\n            assert(!storage.game.read().is_first, \"invalid turn for player 2\");\n        } else {\n            assert(false, \"invalid player\");\n        }\n    }\n\n    #[aztec(public)]\n    internal fn _assert_is_player(_player: Field) {\n        assert(storage.players.at(_player).read().is_player, \"not player\");\n    }\n\n    #[aztec(public)] \n    internal fn _add_player(_player:Field, _player_id: Field) {\n        assert(!storage.game.read().started, \"game has already been started\");\n        assert(_player != 0, \"invalid player address\");\n\n        let mut player = storage.players.at(_player).read();\n        assert(!player.is_player, \"player already exists\");\n\n        player.player_id = _player_id;\n        player.is_player = true;\n\n        storage.players.at(_player).write(player);\n    }\n\n    #[aztec(public)] \n    internal fn _add_num(_player:Field) {\n        assert(!storage.game.read().started, \"game has already started\");\n\n        let player = storage.players.at(_player).read();\n        let mut game = storage.game.read();\n\n        if (player.player_id == 1) {\n            assert(!game.is_number_set[0], \"num 1 already has been set\");\n            game.is_number_set[0] = true;\n        } else {\n            assert(!game.is_number_set[1], \"num 2 already has been set\");\n            game.is_number_set[1] = true;\n        }\n\n        if ((game.is_number_set[0]) & (game.is_number_set[1])) {\n            game.round = 1;\n            game.is_first = true;\n            game.started = true;\n        }\n\n        storage.game.write(game);\n    }\n\n    unconstrained fn get_player(player: Field) -> Player {\n        storage.players.at(player).read()\n    }\n\n    unconstrained fn get_winner() -> Field {        \n        let current_round = storage.game.read().round;\n        let latest_result_one = storage.results_one.at(current_round).read();\n        let latest_result_two = storage.results_two.at(current_round).read();\n\n        if (!storage.game.read().finished) {\n            0\n        } else if ((latest_result_one.eat == 3) & (latest_result_two.eat != 3)) {\n            1\n        } else if ((latest_result_one.eat != 3) & (latest_result_two.eat == 3)) {\n            2\n        } else {\n            3 // draw\n        }\n\n    }\n\n    // for testing purpose\n    // q: how to only allow note an owner to view her own secret num\n    unconstrained fn get_secret_num(player: Field) -> Field {\n        let note = storage.secret_num.at(player).view_note();\n        note.secret_num\n    }\n\n    unconstrained fn get_result(player: Field, round: Field) -> Result {\n       let player = storage.players.at(player).read();\n       let mut result = Result::new(0, 0, 0);\n\n       if (player.player_id == 1) {\n           result = storage.results_one.at(round).read();\n       } else {\n           result = storage.results_two.at(round).read();\n       }\n\n       result\n    }\n\n    unconstrained fn get_round() -> Field {\n        storage.game.read().round\n    }\n\n    unconstrained fn get_is_first() -> bool {\n        storage.game.read().is_first\n    }\n\n    unconstrained fn get_is_started() -> bool {\n        storage.game.read().started\n    }\n\n    unconstrained fn get_is_finished() -> bool {\n       storage.game.read().finished\n    }\n\n    unconstrained fn check_result(\n        call_num: Field, \n        secret_num: Field\n    ) -> [Field;2] {\n        num_lib::_check_result(call_num, secret_num)\n    }\n\n    unconstrained fn is_valid_nums(_num: Field) -> [u16;3] {\n        num_lib::_is_valid_nums(_num)\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (storage_slot == GAME_ID_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(FieldNoteMethods, note_header, serialized_note)\n        } else {\n            // should derive storage slot for mapped values correctly\n            // https://github.com/AztecProtocol/aztec-packages/blob/2db2e2a3091e2552f8e8055d1bc07bd5016455ff/yarn-project/aztec-nr/aztec/src/state_vars/map.nr#L32C1-L32C1\n            note_utils::compute_note_hash_and_nullifier(SecretNumberNoteMethods, note_header, serialized_note)\n        }\n    }\n}\n",
        "path": "/work/contract/contract/numer0n/src/main.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "95": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "98": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "103": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "104": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "106": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "110": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "112": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "119": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "120": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "123": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "126": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "128": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "129": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "130": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "133": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "134": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "141": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "147": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "150": {
        "source": "use dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__SIGNATURE_PAYLOAD};\nuse dep::aztec::{\n  context::{PrivateContext, PublicContext, Context},\n  types::address::AztecAddress,\n  abi::hash_args,\n  hash::pedersen_hash,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_private_function(on_behalf_of.address, IS_VALID_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_public_function(on_behalf_of.address, IS_VALID_PUBLIC_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(caller: AztecAddress, target: AztecAddress, selector: Field, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash([caller.address, target.address, selector, args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n}\n// docs:end:compute_authwit_message_hash",
        "path": "/authwit/auth.nr"
      },
      "152": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote {\n            value,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    pub fn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> FieldNote {\n    FieldNote::deserialize(serialized_note)\n}\n\nfn serialize(note: FieldNote) -> [Field; FIELD_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: FieldNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: FieldNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: FieldNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut FieldNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: FieldNote) {\n    assert(false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\");\n}\n\nglobal FieldNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/field_note/field_note.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\n// global SECRET_NUM_NOTE_LEN: Field = 4;\nglobal SECRET_NUM_NOTE_LEN: Field = 2;\n\nstruct SecretNumberNote {\n    secret_num: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl SecretNumberNote {\n    pub fn new(secret_num: Field, owner: Field) -> Self {\n        SecretNumberNote {\n            secret_num,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; SECRET_NUM_NOTE_LEN] {\n        let res: [Field; SECRET_NUM_NOTE_LEN] = [self.secret_num, self.owner];\n        res\n    }\n\n    pub fn deserialize(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> Self {\n        SecretNumberNote { secret_num: serialized_note[0], owner: serialized_note[1], header: NoteHeader::empty() }\n    }\n    \n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(SecretNumberNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn serialize(note: SecretNumberNote) -> [Field; SECRET_NUM_NOTE_LEN] {\n    note.serialize()\n}\n\nfn deserialize(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> SecretNumberNote {\n    SecretNumberNote::deserialize(serialized_note)\n}\n\nfn compute_note_hash(note: SecretNumberNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: SecretNumberNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: SecretNumberNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut SecretNumberNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: SecretNumberNote) {\n    note.broadcast(context, slot);\n}\n\nglobal SecretNumberNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/work/contract/contract/numer0n/src/types/secret_num_note.nr"
      },
      "155": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal RESULT_SERIALIZED_LEN: Field = 3;\n\nstruct Result {\n    call_num: Field,\n    eat: Field,\n    bite: Field\n}\n\nimpl Result {\n    pub fn new(call_num: Field, eat: Field, bite: Field) -> Self {\n        Result { call_num, eat, bite }\n    } \n}\n\nfn deserializeResult(fields: [Field; RESULT_SERIALIZED_LEN]) -> Result {\n    Result { call_num: fields[0], eat: fields[1], bite: fields[2] }\n}\n\nfn serializeResult(result: Result) -> [Field; RESULT_SERIALIZED_LEN] {\n    [result.call_num, result.eat, result.bite]\n}\n\nglobal ResultSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeResult,\n    serialize: serializeResult,\n};",
        "path": "/work/contract/contract/numer0n/src/types/result.nr"
      },
      "156": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal PLAYER_SERIALIZED_LEN: Field = 2;\n\nstruct Player {\n    player_id: Field,\n    is_player: bool\n}\n\nimpl Player {\n    pub fn new(player_id:Field, is_player: bool) -> Self {\n        Player { player_id, is_player }\n    } \n}\n\nfn deserializePlayer(fields: [Field; PLAYER_SERIALIZED_LEN]) -> Player {\n    Player { player_id: fields[0], is_player: fields[1] as bool}\n}\n\nfn serializePlayer(player: Player) -> [Field; PLAYER_SERIALIZED_LEN] {\n    [player.player_id, player.is_player as Field ]\n}\n\nglobal PlayerSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializePlayer,\n    serialize: serializePlayer,\n};",
        "path": "/work/contract/contract/numer0n/src/types/player.nr"
      },
      "157": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal GAME_SERIALIZED_LEN: Field = 6;\n\nstruct Game {\n    is_number_set: [bool;2],\n    started: bool, // true if both players are added and secret numers are set.\n    finished: bool,\n    round: Field,\n    is_first: bool\n}\n\nimpl Game {\n    pub fn new(\n        is_number_set: [bool;2],\n        started: bool,\n        finished: bool,\n        round: Field,\n        is_first: bool\n    ) -> Self {\n\n        Game { \n            is_number_set, \n            started, \n            finished, \n            round, \n            is_first\n             }\n    } \n}\n\nfn deserializeResult(fields: [Field; GAME_SERIALIZED_LEN]) -> Game {\n    let _is_number_set = [fields[0] as bool, fields[1] as bool];\n    \n    Game { \n        is_number_set: _is_number_set,\n        started: fields[2] as bool, \n        finished: fields[3] as bool, \n        round: fields[4], \n        is_first: fields[5] as bool\n         }\n}\n\nfn serializeResult(game: Game) -> [Field; GAME_SERIALIZED_LEN] {\n    [\n        game.is_number_set[0] as Field,\n        game.is_number_set[1] as Field,\n        game.started as Field, \n        game.finished as Field, \n        game.round, \n        game.is_first as Field\n    ]\n}\n\nglobal GameSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeResult,\n    serialize: serializeResult,\n};",
        "path": "/work/contract/contract/numer0n/src/types/game.nr"
      },
      "158": {
        "source": "    fn is_valid_nums(_num: Field) {\n        assert(_num as u16 >= 12, \"number should be bigger than 11\");\n        assert(_num as u16 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u16;\n        let mut modulus: u16 = 100;\n        let mut nums: [u16;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u16;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n    }\n\n    fn check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u16;\n        let mut secret_num = _secret_num as u16;\n\n        let mut modulus: u16 = 100;\n        let mut call_nums: [u16;3] = [0;3];\n        let mut secret_nums: [u16;3] = [0;3];\n\n\n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u16;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u16;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n    }\n\n    pub fn _is_valid_nums(_num: Field) -> [u16;3] {\n        assert(_num as u16 >= 12, \"number should be bigger than 11\");\n        assert(_num as u16 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u16;\n        let mut modulus: u16 = 100;\n        let mut nums: [u16;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u16;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n\n        nums\n    }\n\n    pub fn _check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u16;\n        let mut secret_num = _secret_num as u16;\n\n        let mut modulus: u16 = 100;\n        let mut call_nums: [u16;3] = [0;3];\n        let mut secret_nums: [u16;3] = [0;3];\n\n        \n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u16;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u16;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n    }\n",
        "path": "/work/contract/contract/numer0n/src/num_lib.nr"
      }
    }
  }
}