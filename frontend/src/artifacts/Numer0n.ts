/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
	AztecAddress,
	AztecAddressLike,
	CompleteAddress,
	Contract,
	ContractArtifact,
	ContractBase,
	ContractFunctionInteraction,
	ContractInstanceWithAddress,
	ContractMethod,
	DeployMethod,
	EthAddress,
	EthAddressLike,
	FieldLike,
	Fr,
	FunctionSelectorLike,
	loadContractArtifact,
	NoirCompiledContract,
	Point,
	PublicKey,
	Wallet,
	WrappedFieldLike,
} from "@aztec/aztec.js";
import Numer0nContractArtifactJson from "../../../artifacts/numer0n_contract-Numer0n.json" assert { type: "json" };
export const Numer0nContractArtifact = loadContractArtifact(
	Numer0nContractArtifactJson as NoirCompiledContract
);

/**
 * Type-safe interface for contract Numer0n;
 */
export class Numer0nContract extends ContractBase {
	private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
		super(instance, Numer0nContractArtifact, wallet);
	}

	/**
	 * Creates a contract instance.
	 * @param address - The deployed contract's address.
	 * @param wallet - The wallet to use when interacting with the contract.
	 * @returns A promise that resolves to a new Contract instance.
	 */
	public static async at(address: AztecAddress, wallet: Wallet) {
		return Contract.at(
			address,
			Numer0nContract.artifact,
			wallet
		) as Promise<Numer0nContract>;
	}

	/**
	 * Creates a tx to deploy a new instance of this contract.
	 */
	public static deploy(wallet: Wallet, game_id: FieldLike, player: FieldLike) {
		return new DeployMethod<Numer0nContract>(
			Point.ZERO,
			wallet,
			Numer0nContractArtifact,
			Numer0nContract.at,
			Array.from(arguments).slice(1)
		);
	}

	/**
	 * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
	 */
	public static deployWithPublicKey(
		publicKey: PublicKey,
		wallet: Wallet,
		game_id: FieldLike,
		player: FieldLike
	) {
		return new DeployMethod<Numer0nContract>(
			publicKey,
			wallet,
			Numer0nContractArtifact,
			Numer0nContract.at,
			Array.from(arguments).slice(2)
		);
	}

	/**
	 * Returns this contract's artifact.
	 */
	public static get artifact(): ContractArtifact {
		return Numer0nContractArtifact;
	}

	/** Type-safe wrappers for the public methods exposed by the contract. */
	public methods!: {
		/** call_num(target: struct, call_num: field) */
		call_num: ((
			target: AztecAddressLike,
			call_num: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_winner() */
		get_winner: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** check_result(call_num: field, secret_num: field) */
		check_result: ((
			call_num: FieldLike,
			secret_num: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** is_valid_nums(_num: field) */
		is_valid_nums: ((_num: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** add_num(player: field, secret_num: field) */
		add_num: ((
			player: FieldLike,
			secret_num: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** use_attack_item(target: struct, item_type: field) */
		use_attack_item: ((
			target: AztecAddressLike,
			item_type: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_round() */
		get_round: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_is_first() */
		get_is_first: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_result(player: field, round: field) */
		get_result: ((
			player: FieldLike,
			round: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_is_finished() */
		get_is_finished: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** use_defense_item(player: field, item_type: field, new_secret_num: field) */
		use_defense_item: ((
			player: FieldLike,
			item_type: FieldLike,
			new_secret_num: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** is_valid_new_shuffled_num(num: field, new_num: field) */
		is_valid_new_shuffled_num: ((
			num: FieldLike,
			new_num: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_player(player: field) */
		get_player: ((player: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_is_started() */
		get_is_started: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_slash(num: field) */
		get_slash: ((num: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** constructor(game_id: field, player: field) */
		constructor: ((
			game_id: FieldLike,
			player: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_game() */
		get_game: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_high_and_low(num: field) */
		get_high_and_low: ((num: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, preimage: array) */
		compute_note_hash_and_nullifier: ((
			contract_address: AztecAddressLike,
			nonce: FieldLike,
			storage_slot: FieldLike,
			note_type_id: FieldLike,
			preimage: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_secret_num(player: field) */
		get_secret_num: ((player: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** join_game(game_id: field, player: field) */
		join_game: ((
			game_id: FieldLike,
			player: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;
	};
}
