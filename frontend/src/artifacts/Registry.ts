/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
	AztecAddress,
	AztecAddressLike,
	CompleteAddress,
	Contract,
	ContractArtifact,
	ContractBase,
	ContractFunctionInteraction,
	ContractInstanceWithAddress,
	ContractMethod,
	DeployMethod,
	EthAddress,
	EthAddressLike,
	FieldLike,
	Fr,
	FunctionSelectorLike,
	loadContractArtifact,
	NoirCompiledContract,
	Point,
	PublicKey,
	Wallet,
	WrappedFieldLike,
} from "@aztec/aztec.js";
import RegistryContractArtifactJson from "../../../artifacts/registry_contract-Registry.json" assert { type: "json" };
export const RegistryContractArtifact = loadContractArtifact(
	RegistryContractArtifactJson as NoirCompiledContract
);

/**
 * Type-safe interface for contract Registry;
 */
export class RegistryContract extends ContractBase {
	private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
		super(instance, RegistryContractArtifact, wallet);
	}

	/**
	 * Creates a contract instance.
	 * @param address - The deployed contract's address.
	 * @param wallet - The wallet to use when interacting with the contract.
	 * @returns A promise that resolves to a new Contract instance.
	 */
	public static async at(address: AztecAddress, wallet: Wallet) {
		return Contract.at(
			address,
			RegistryContract.artifact,
			wallet
		) as Promise<RegistryContract>;
	}

	/**
	 * Creates a tx to deploy a new instance of this contract.
	 */
	public static deploy(wallet: Wallet) {
		return new DeployMethod<RegistryContract>(
			Point.ZERO,
			wallet,
			RegistryContractArtifact,
			RegistryContract.at,
			Array.from(arguments).slice(1)
		);
	}

	/**
	 * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
	 */
	public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet) {
		return new DeployMethod<RegistryContract>(
			publicKey,
			wallet,
			RegistryContractArtifact,
			RegistryContract.at,
			Array.from(arguments).slice(2)
		);
	}

	/**
	 * Returns this contract's artifact.
	 */
	public static get artifact(): ContractArtifact {
		return RegistryContractArtifact;
	}

	/** Type-safe wrappers for the public methods exposed by the contract. */
	public methods!: {
		/** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, preimage: array) */
		compute_note_hash_and_nullifier: ((
			contract_address: AztecAddressLike,
			nonce: FieldLike,
			storage_slot: FieldLike,
			note_type_id: FieldLike,
			preimage: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** add_game(game_address: field) */
		add_game: ((game_address: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** constructor() */
		constructor: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_game_address(count: field) */
		get_game_address: ((count: FieldLike) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_latest_game_address() */
		get_latest_game_address: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** get_current_count() */
		get_current_count: (() => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;
	};
}
