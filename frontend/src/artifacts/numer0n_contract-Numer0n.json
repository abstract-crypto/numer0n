{"noir_version":"0.23.0+5f5843e35052b9d3599b8ab4f7633db0a225e82f","name":"Numer0n","functions":[{"name":"call_num","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"call_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"call_num":[{"start":37,"end":38}],"inputs":[{"start":0,"end":36}],"target":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746]},"bytecode":"","debug_symbols":""},{"name":"get_winner","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"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","debug_symbols":""},{"name":"_assert_is_player","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"_player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_player":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221]},"bytecode":"","debug_symbols":""},{"name":"check_result","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"call_num","type":{"kind":"field"},"visibility":"private"},{"name":"secret_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"call_num":[{"start":0,"end":1}],"secret_num":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[2,3]},"bytecode":"","debug_symbols":""},{"name":"_add_player","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"_player","type":{"kind":"field"},"visibility":"private"},{"name":"_player_id","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_player":[{"start":34,"end":35}],"_player_id":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222]},"bytecode":"","debug_symbols":""},{"name":"is_valid_nums","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_num":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"public"},"return_witnesses":[1,2,3]},"bytecode":"H4sIAAAAAAAA/+3deZQU1fUH8CoYkElNq2DcFwpXUBK7GQSMooCJYlwwEeOGygwzLAozOAsoJu674IKomIiJYuKCiaIRUcGERTYjyKIj6wwygEo0f/9+f+SEqu57+M7r183c8d1zepJb53isevVe3c+771VVU1VoR8/zfC+9dIR1XKhsUObfye+3pBweK+mDsSOsd8hsNxeny7pAf0JX8fsm+3aODlLUMk+0BBmHB3UO2PvPId4+U5F7Uyo6bifXx00mS7tk/I6PG48hjU/nzLEpTifIVTGMr6PYKYztZ/4phpg0dLTezdu3FMM6jTO5SzJ9MevhepHRJgH7O1v6HTru9wFgCWGb4nWCsoP3/uNnwB3BJjDPUgHkhhbz3AphvZPF8293nmQCPBhL4FyI+97Za33fce50thi7CBkPYBi7gDHfeR06NnZhGItlPfEc6mKJFQj1/Qde6/seWDwOr7Fx339giZUQ6nuJ1/q+J+DfJRbjgULGBMN4IBgTFuNBQsYDGcaDwEjtcJ4fLGQ8iGE8GIzUDq9DXYWMBzOMXcFI7TCP3dwb+wQQtzXGbuD5oZCnG8PzQ/Ac4t6TEupnMjrGoV52XilWAvbjPD1UoI8+xKVj0zYa25M38nQ1rAHU61ogRio7RNgTGJ5oyXde2Yw4rocJGQ9lGA8DI7XD6+XhQsbDGMbDwUjtMI9HCBkPZxiPACO1wzweKWQ8gmE8EozUDvN4lJDxSIbxKDBSO8zj0ULGoxjGo8FI7TCPxwgZj2YYjwEjtcM8HitkPIZhPBaM1A7zeJyQ8ViG8TgwUjvMY3ch43EMY3cwUjvMYyhk7M4whmDsbjH2EDKGDGMPMIYW4/FCxh4M4/Fg7GExniBkPJ5hPAGMx1uMJwoZT2AYTwTjCRbjSULGExnGk8B4osV4spDxJIbxZDCeZDGeImQ8mWE8BYwnW4w9hYynMIw9wXiKxdhLyNiTYewFxp4W46lCxl4M46lg7GUxniZkPJVhPA2M1A5/U/QWMp7GMPYGI7XDPP7IvTF+btWbYfwReE537+kbQIzWeE4Hz4/de1JC/YyfoyW97LxSrATsxzmQFOijD3Hp2LSNRvWqNwme3oY1gHq9C8RIZT8W9gSGJ1ryXbdsRhzXlJAxyTCmwGibe33cG+P7UYph7AOevs49fZIBxGiNpy94Sp170vcj9/1M34/O8LLzSrESsB/nwBkCffQhLh2bttGoXvWqV73qVa961ate9apXvepVr3rVq171qle96t2/N/KkDGsA9VIFYqSyUmFPYHiixTe2Q1i3GXFc+wkZz2AY+4HRNvf6Cxn7MYz9wdjPYhzg3hi/c+rPMA4Az0+ce9LvnAYwPD8Bz5nOPel3Tu77mX7ndJaXnVeKlYD9OAfOEuijD3Hp2LSNRvWqV73qVa961ate9apXvepVr3rVq171qle96lXv/r2Rp79hDaBe/wIxUtmZwp7A8ESLb2yHsG4z4rieLWQ8i2E8G4y2uTdQyHg2wzgQjGdbjOe4N8bvnAYyjOeAZ5B7T/z3bs9heAaB51z3npRQP+N3ToO97LzS8ROwH+fAYIE++nAs89hoVK96B4NnoGENoN7AAjFS2bnCnsDwREu+65bNiOM6RMg4mGEcAkbb3DvPvTG+Hw1hGM8Dz8+ce9LfQJzH8PwMPD917knfj9z3M30/Ot/LzivFSsB+nAPnC/TRh7h0bNpGY2u9xe3Mq/nV/Gp+Nb+5vJpfza/mV/Oby6v51fxqfjW/ubyaX82v5lfzm8ur+dX8an7/t/IbeYYY1gDqDSkQI5X9VNgTGJ5o8Y3tENZtRpyHFwgZz2cYLwCj7VwZKmS8gGEcCkZqh+fHhe6N8TunoQzjheC5yLmnNH7ndCHDcxF4fu7ck37n5L6f6XdOF3vZeaVYCdiP8/RigT76EJeOTdto/G/1Frczr84HWa/OB/XqfFBvLq/OB/XqfFBvLq/OB/XqfFBvLq/OB/XqfFBvLq/OB/XqfFBvLq/OB/XqfFBvLq/OB/XqfFBvLm8hzIfIM9SwBlBvaIEYqeznwp7A8ESLb2yHsG4z4jy8RMh4McN4CRht58qlQsZLGMZLwXiJxThMyHgpwzgMjNQOz+HL3Bvj78KGMYyXgeeXQp7LGJ5fgucX7j0poX7G34Vd7mXnlWIlYD/O08sF+uhDXDo2baOxPXkjzzDDGkC9YQVipLJfCHsCwxMt+c4rmxHHdbiQ8XKGcTgYbXPvCvfG+Po0nGG8AjxXCnmuYHiuBM+v3HtSQv2Mr5dXedl5pVgJ2I9z4CqBPvoQl45N22hsT97IM9ywBlBveIEYqexXwp7A8ERLvvPKZsRxvVrIeBXDeDUYbXPvGiHj1QzjNWC82mK8Vsh4DcN4LRivsRhHCBmvZRhHgJHa4Z8lrnNvjO9FIxjG68Bzg5DnOobnBvBc796TEupnfG8c6WXnlWIlYD/O05ECffQhLh2btkdCeXvyRp4RhjWAeiMKxEhl1wt7AsMTLfnOq5EWI45rmZBxJMNYBkZqh9fLciFjGcNYDkZqh3kcJWQsZxhHgZHaYR4rhIyjGMYKMFI7zGOlkLGCYawEI7XDPI4WMlYyjKPBSO0wj2OEjKMZxjFgpHaYx7FCxjEM41gwUjvM4zgh41iGcRwYqR3m8UYh4ziG8UYwUjvM401CxhsZxpvAeKPFOF7IeBPDOB6MN1mME4SM4xnGCWAcbzFWCRknMIxVYJxgMVYLGasYxmowVlmME4WM1QzjRDBWW4w3CxknMow3g3GixVgjZLyZYawB480WY62QsYZhrAVjjcVYJ2SsZRjrwEjt8F5YL2SsYxjrwUjtAjBOEjLWM4yTwFhvMU4WMk5iGCeDcZLFeIuQcTLDeAsYqR3Ox1uFjLcwjLeCkdrheT1FyHgrwzgFjNQO83ibe2P8jHIKw3gbeH4j5LmN4fkNeH7t3pMS6mf8zPR2LzuvFCsB+3Ge3i7QRx/i0rFpG43tyRt5phjWAOpNKRAjlf1a2BMYnmjJd17ZjDiudwgZb2cY7wAjtcPr5Z1CxjsYxjvBSO0wj3cJGe9kGO8CI7XDPN4tZLyLYbwbjNQO83iPkPFuhvEeMFI7zOO9QsZ7GMZ7wUjtMI/3CRnvZRjvAyO1wzzeL2S8j2G8H4zUDvP4gJDxfobxATBSO8zjg0LGBxjGB8FI7TCPDwkZH2QYHwLjgxbjw0LGhxjGh8H4kMX4iJDxYYbxETA+bDFOFTI+wjBOBeMjFuM0IeNUhnEaGKdajI8KGacxjI+CcZrF+JiQ8VGG8TEwPmoxPi5kfIxhfByMj1mMTwgZH2cYnwDj4xbjdCHjEwzjdDA+YTE+KWSczjA+CcbpFuMMIeOTDOMMMD5pMT4lZJzBMD4FxhkW49NCxqcYxqfBSO3wt9kzQsanGcZnwPi0xThTyPgMwzgTjNQOx/pZ98b4GeVMhvFZ8PzOvSf+/7k/y/D8Djy/de9JCfUzfmb6nJedV4qVgP04B54T6KMPcenYtI1G9ar3OfDMNKwB1JtZIEYq+62wJzA80ZLvumUz4rjOEjI+xzDOAqNt7j3v3hjfj2YxjM+D5w/OPX3j/7fG8wzPH8Dze+ee9P3IfT/T96MXvOy8UqwE7Mc58IJAH32IS8embTS21lvczryaX82v5lfzm8ur+dX8an41v7m8ml/Nr+ZX85vLq/nV/Gp+Nb+5vJpfza/mV/Oby6v51fxqfjW/ubyaX82v5lfzm8ur+W2xaH7bmVfzq/nV/Gp+c3k1v5pfza/mN5dX86v5LbT8Rp5ZhjWAerMKxEhlvxf2BIYnWnxjO4R1mxHn4YtCxhcYxhfBaDtXZgsZX2QYZ4OR2uH58ZJ7Y/x3DmYzjC+B50/uPfHfgXuJ4fkTeP7o3pMS6mf8dw5e9rLzSrESsB/n6csCffQhLh2bttGoXvW+DJ7ZhjWAerMLxEhlfxT2BIYnWvJdt2xGHNdXhIwvM4yvgNE2914VMr7CML4KxlcsxteEjK8yjK+B8VWLcY6Q8TWGcQ4YX7MYX3dvjH97zGEYXwfPX5x7+sR/3/F1hucv4Pmzc0/6t4f7fqZ/e7zhZeeVYiVgP86BNwT66ENcOjZto7G13uJ25tX8an41v5rfXF7Nr+ZX86v5zeXV/Gp+Nb+a31xeza/mV/Or+c3l1fxqfjW//1v5jTxzDGsA9eYUiJHK/izsCQxPtPjGdgjrNiPOwzeFjG8wjG+C0XauzBUyvskwzgUjtcPz4y33xvid01yG8S3w/NW5pzR+5/QWw/NX8Lzt3JN+5+S+n+l3Tu942XmlWAnYj/P0HYE++hCXjk3baPxv9Ra3M6/OB1mvzgf16nxQby6vzgf16nxQby6vzgf16nxQby6vzgf16nxQby6vzgf16nxQby6vzgf16nxQby6vzgf16nxQby5vIcyHyDPXsAZQb26BGKnsbWFPYHiixTe2Q1i3GXEezhMyvsMwzgOj7Vx5V8g4j2F8F4zzLMb5QsZ3Gcb5YKR2eA6/594Yfxc2n2F8DzwfuPfE/x2k9xieD8DzvntPSqif8XdhC7zsvFKsBOzHebpAoI8+xKVj0zYa1aveBeCZb1gDqDe/QIxU9r6wJzA80ZLvumUz4rguFDIuYBgXgtE29z50b4zvRwsZxg/B83f3nvh+9CHD83fw/M29JyXUz/h+tMjLzivFSsB+nAOLBProQ1w6Nm2jUb3qXQSehYY1gHoLC8RIZX8T9gSGJ1ryXbdsRhzXxULGRQzjYjDa5t4S98b4frSYYVwCno+EPEsYno/As9S9JyXUz/h+tMzLzivFSsB+nAPLBProQ1w6Nm2jsT15I89iwxpAvcUFYqSypcKewPBES77zymbEcV0uZFzGMC4Ho23urRAyLmcYV4BxucW4Usi4gmFcCUZqh8/lVrk3xtf5lQzjKvD8Q8iziuH5B3g+du9JCfUzvu984mXnlWIlYD/O008E+uhDXDo2baOxPXkjz0rDGkC9lQVipLKPhT2B4YmWfOeVzYjjulrI+AnDuBqM1A6vl2uEjKsZxjVgpHaYx0+FjGsYxk/BSO0wj2uFjJ8yjGvBSO0wj+uEjGsZxnVgpHaYx/VCxnUM43owUjvM4wYh43qGcQMYqR3m8TMh4waG8TMwUjvM4+dCxs8Yxs/BSO0wjw1Cxs8ZxgYwUjvM4xdCxgaG8QswNliMG4WMXzCMG8H4hcW4Sci4kWHcBMaNFuNmIeMmhnEzGDdZjFuEjJsZxi1g3GwxbhUybmEYt4KR2gVg3CZk3MowbgMjtcM8NgoZtzGMjWDcZjE2CRkbGcYmMDZajNuFjE0M43YwNlmMXwoZtzOMX4Jxu8W4w70x6UNcOnaHzDrF6wDrmKfItNO9aVRkas4cq3Pm2BR/J+RxF+QI29B1pgjqzOuS/vdBGfdu1+7SinI0kXu3kcuozleGe5fFTXU+MNxfu3Zn5inF88CJSwjrZEhAO+pfZPxGyPg1w/iNqKdf3wR4MNY/ncdKPxPd47W+7/8Ez3fuPaUBxGiN5zvwfOvekxLqZ/yM9l9edl4pVgL245+r/iXQRx/i0rFpG43qlfNGnj2GNYB6ewrESGXfgofKBrnzxP9tzY6ZY9Hxo3taU5d9cXe7j1sa5YGuuZ0zxyUHxSuCOtXF+2zNGVsJ7Kdxw/sgjqXz3wqZscR7bgjbFC8y0j3mK080p8nouLvc9zMeK/rNZv4monhFUOc7+L3jQXm0fGPJz1dGvRJYx3FtNsqEfk+n8HcoHZu2d4CR+t5s8Qzy3N4bBf5sE48r/RnF/I1O8Yqgzv8b40rl0bLTkp9mox7G6+S1PF+aoR3FxrFvNMqknj/4Xss/N4ewvQ2MTZn1RllPPEb0XMMcI4pXhHUy10kaI3yWQnnFMWo06pXAOuZ/i1Em9azP91o+owphezMYqe9bLJ5B7jx9hJ67xuNKz09pXMlP8YqgTjdjXPGZ7VZLfrYY9TAenXuNRg5LIDaOfYNRJvVuxPdaPtMPYftzMNKz8QZZTzxG9M7FHCOKVwR1jjPGCN/zUF5xjBqMeiWwjvnfYJRJvYf0vZbvz0LYXg9G6vsGWU+cf3q/af7uoHhFUKeXkX98p0p5xd8dG4x6GI/OkQZLX9dC/UFu+ho/w1sPsfFeuRb6SnWS0Fdb24152pbup+26PG37QdsSKMf5usYok/rWxPdafiMRwjbFi4z0rcEaWU88X+kbFnO+roZcUp1zjfmK381QXnG+rjHqCfWjzNYPW17pmyIc+1VGmdR3mb7X8hvDELZXgvHjzPoqWU889iuMnO0wPEVQ52Jj7Kncg7zi77RVRj1bPKqDY0SxcYyWGWVC3+XHY4TfIIew/REY6VveZbKeeIyWGjnbbHiKoM5VxhhRuQd5xfv5MqOeLR7VWQ19XQL1B7npa4tv5um6Tuf0Eugr1bnBuCeYbVfkaVu+n7ZL87StNO4nVI7zdZFRJvT3GuOcUSw6Nm1TvMhIf99hkcX4EZRRm8VQ1sHStqMRo9iTe0aEz906efbnbvhsA59ZNUNe3Hj69bU9WzKfq0R18D0m9oHaFkGdt+FZ4eTifX36xuhTCfT5K0vfv4b4zRAn9LKff5nGENpgHXz3icfZYTkO1TH7imPxb+97j0UqCXODnhFEY9EDLNh/qnO3ce6az+fw3Tmeu02Z9dBze+5SLDo2bVM8fLa0HcpoHce7CfobQh62Qz8EvtEpxecfdD7Q+bkVTFRnGoyB0LdNpVLfI0XH2Ax9+tLST9o/Hc7pGZl1fC5Icy/aP9uynxbf2A5hHZ8lCXwPGJ9f9OyCxnajJXYDWB3FTmFsP/MPxaHyIlh/kV7WeS2fyVCeyY3PjLAerjcabfAbzE2WfoeO+43PykLYxu9An4H5RfNH6hkz9hvz0xHyQ/uboGyPUR+/OcTrq8S56nstv28MYRu/E6QyfFZOZXSPxWfavnEs/AaFzgnX9zjKLd3jyELxiqDOXLi+4rcy+K3hFstvDLwH7jLKhL65iseIYtGxaRvfrZm/XYTeGyaF3s+Vmr9TomPTuUPx8H6y0LhHSrxLk3oXGR1jO/Rpt6WftH8xXMOWwj2Qxh5/96+37Kcl3z2Scif0bW18ftK1g8a20RIbrx+OYqcwNt0jKQ6+a6P1dXCPxPdslGdy4/tCrIfrO402+D1zk6XfoeN+53rnide55TC/1sM90v2fC9PzvsnLzg/eI2n/LijbY9TP9WcQqe8Gtnst80jbO8BIZfib1XYP+Rq8Atfn+DkvfmsTQmzMKTl2g4fsgzy3+cNrUXTcjkau8HnJTshfU+bbBPPa5RRHgbOCGPs6ZLYPtdR/JwPtntmuqp9QXlkT1o6trh9fEZZXhuXjxozZW1A3tqwqTKWw6fv7azq+ejK1PHPAAGz6babpkZntwTU1ZbeG46oqKm8Jq+vrwurRYXl1fVVFLTb6v7Y06lTchkZd29Lo2LY06tmWRqdnGh2e2a6onzh+3KiyunHVVWFVdV1YNj7KfAU26cNvcga/yTlt6c1FbWl0ZVsaXZ9pdHRme++ErcXpWllbm5nnSWxW1rZmFW1rdlemWQ+KXldXOWFiXVhXHdbWl9fVlI2qCyePqxsbVk+qrBm9dwiw8dS2pOXN7xNxQWsjev8BJCVz10+wAQA=","debug_symbols":""},{"name":"add_num","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"player","type":{"kind":"field"},"visibility":"private"},{"name":"secret_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"player":[{"start":36,"end":37}],"secret_num":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464]},"bytecode":"","debug_symbols":"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"},{"name":"use_attack_item","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"item_type","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"item_type":[{"start":37,"end":38}],"target":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814]},"bytecode":"","debug_symbols":""},{"name":"_record_result","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"_caller","type":{"kind":"field"},"visibility":"private"},{"name":"_call_num","type":{"kind":"field"},"visibility":"private"},{"name":"_eat","type":{"kind":"field"},"visibility":"private"},{"name":"_bite","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_bite":[{"start":37,"end":38}],"_call_num":[{"start":35,"end":36}],"_caller":[{"start":34,"end":35}],"_eat":[{"start":36,"end":37}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224]},"bytecode":"","debug_symbols":""},{"name":"get_round","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20p+1dAiuHECWuKNMQtOO5RV4g6IWxGWVuk2Cl0cs4Khfs4jLwrRPiuw4Tux8cUxEpOgXCY1QNMWDyAJsvB+16OYYPJpFbg9JKYjZfmSiV+CnxXYNNgV5uvWvWHkas7ykQ44K4I7jxVr4b8CgJ8CH71fBugab9vZaXu9hPQvsyQPxnI5v4p4uD+xFnjK4Sy26OQ4/PGEshrmLN4c88hPkg6XMMM/OJPZM9Dpe7GVBY3+IeKeVvVMJb8eQv4uXgs+dyCuRzm6BtW8xB16cXwU61rj2/Eqa/v2IfWZV0FinHPFc/KsOf/WZ//4rF8KtxWbbD81b99w1rYLUUkgB01U0Td2ta7ChngRsRNNWlYLNlUioBLDN+SVV0iGlUf93QmGogI62W5E3Ip+Gofnk93XbfXC/23L/yi/9bt1u6Bt0dEF4FggAAA==","debug_symbols":"zZfBisJAEET/pc9hmZ6eTM/kV5Y9zO5GCIQoJggS8u9GjbkoiEFD3bqhinqHnoLpqd7+pa7aNi0VPZmvnIrvntpdas5726V9RwWL+jyjsvm/zMENGW2quqQiN0N2L2cbb2r2ZhYz8wO1qJ3EjmXWBj/8ZCOPB+NRMJ4AxhPBeNigATEakEUDEjQghwaE1tKMVtOM1tOMVtSM1tQWrantp5v6mmJXSZFVUtwqKe9pPzVzSrRPDkXldijqeNY6mYA8GpCiAQU0oAgGJAYNiNGAHj5763XyiHF3FS5+gUcXeMICT3zd48xrnnE5pH2Vfuvy/L8f1+64u47DCQ=="},{"name":"get_is_first","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKCHYsr8AbFLUgLqvUbRK8PGIBR/ua5bZs2idVdh3Hdj4nJiJS9I+E9lA0RS2yABvvvkZ0cwweTZ3bICkFMdt9mehz8NNiuwGbgjrd+k+sOo15uqJDjgrgjuPlqv0eMOgJ8OH7zWFdg017ey2vD7CeBfbkgXxOx5641uWBvchTBmdpRDfH4Y8nzMXw7/ItoI78DPXgVWb4zy4k90z0Jl7u54L28yHimZb2TCX0jqF+ly8Fn3uR1yKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvqWN694OR4yL8wO5QTDop36/lXBrsd4MY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RIadSZk1AYKqCj7U7krciXcWy/+XPV9V88bDc8vPPbsF11a/oFr6xWZKoIAAA=","debug_symbols":"zZjBasMwEET/RWdTtLuyVvKvlB7U1gWDcUJsCsX43+s0rnNwIMQkzty0MMO8w2oE6k29+0hdtWtaU/TGvuSmeO1Nu0/NcW67dOhMQRJyn5my+fw7az5k5quqS1PkdsiWcuL4ryZvZzERXVCL8iR2JLM2+OEtG3k8GI+C8QQwngjGQxYNiNCAGA1I0IAcGhBaSxNaTRNaTxNaURNaUzNaU/Ojm/qUwpukyCYpbpOU+7Sf2jkl8pVFUe8msep5UZxMQB4NSNGAAhpQBAMSiwZEaED8TKBASyBBA3JoQBevPXudPGLd4tWVeLvH2RUeWuHhFR65zTMO3+lQpfe6PH7JjGP3sz8dh18="},{"name":"get_result","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"player","type":{"kind":"field"},"visibility":"private"},{"name":"round","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"player":[{"start":0,"end":1}],"round":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"struct","path":"types::result::Result","fields":[{"name":"call_num","type":{"kind":"field"}},{"name":"eat","type":{"kind":"field"}},{"name":"bite","type":{"kind":"field"}},{"name":"item","type":{"kind":"field"}},{"name":"item_result","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[2,3,4,5,6]},"bytecode":"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","debug_symbols":""},{"name":"get_is_finished","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKgHYsr8AbFLUgLqvUbRK8PGIBR/ua5bZs2idVdh3Hdj4nJiJS9I+E9lA0RS2yABvvvkZ0cwweTZ3bICkFMdt9mehz8NNiuwGbgjrd+k+sOo15vqJDjgrgjuPlqv0eMOgJ8OH7zWFdg017ey2vD7CeBfbkgXxOx5641uWBvchTBmdpRDfH4Y8nzMXw7/ItoI78DPXgVWb4zy4k90z0Jl7up4L28yHimZb2TCX0jqF+ly8Fn3uR1yKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvqWN694OR4yL8wO5QTDop36/lXBrsd4MY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RIadSZk1AYKqCj7U7krciXcWy/+XPV9V88bDc8vPPbsF11a/oFCNKONaoIAAA=","debug_symbols":"zZjfaoMwGMXfJdcyvn8mxlcZu8g2B4LYUmUwxHefXa0MWhiV1Z67fHAO5wdJTiCDa3Zvqa93befKwdFT7srnwXX71B7nrk+H3pVsZEXmqvb9Z+3DmLmPuqlcmdOYXcpZ4lnNnhYxM19Ra5BZbKyLtvDjSzbxeDCeAMZTgPFEMB4mNCBGAxI0IEUDMjQgtJZmtJpmtJ5mtKJmtKYWtKaWezf1KUU2SdFNUmyTlP9pv0BLSpQ/DoqP+SwOZIvWdAbyaEABDahAA4pgQEpoQIwGJI8EYrkEUjQgQwO6eu3Fh9mjv7b5/OpqvN1jtMLDKzyywqO3eabhMx3q9NpUxy+Zaey/9qfl+A0="},{"name":"use_defense_item","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"player","type":{"kind":"field"},"visibility":"private"},{"name":"item_type","type":{"kind":"field"},"visibility":"private"},{"name":"new_secret_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":36}],"item_type":[{"start":37,"end":38}],"new_secret_num":[{"start":38,"end":39}],"player":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659]},"bytecode":"","debug_symbols":""},{"name":"is_valid_new_shuffled_num","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"num","type":{"kind":"field"},"visibility":"private"},{"name":"new_num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"new_num":[{"start":1,"end":2}],"num":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[2]},"bytecode":"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","debug_symbols":""},{"name":"_record_item_result","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"_caller","type":{"kind":"field"},"visibility":"private"},{"name":"_item_type","type":{"kind":"field"},"visibility":"private"},{"name":"_item_result","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_caller":[{"start":34,"end":35}],"_item_result":[{"start":36,"end":37}],"_item_type":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223]},"bytecode":"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","debug_symbols":""},{"name":"get_player","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"player":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"struct","path":"types::player::Player","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"is_player","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[1,2]},"bytecode":"H4sIAAAAAAAA/81XTW/bMAylP/LpzGnSdsAOG/gLCjnbbTtk23mX7bKrh6TDgDQGbAdr/3zRKiGbV8EtCkQuQqAVRVHk45MiySERBbSTCHQUtc2lNYdJ5jGWCRtwWttv0fswzr7yfjIfuzZI/DivSiIYCHx68qfjQbzH+jAn3q+DlZMGP1tPx3c9xswSyOvyifypdABP7B9P1lKdxsbtSqxb8rune8BP5PD0Bsa7wF2vBe4CyKuxtY8YX4o3PAK8be6Hvv+4s/Q+xgB47Tv8Yl1D0T3uR0OS30oM+YaQdyR64DGvjZVArQHgGAEe9fkg7Zh2e44a+En8r0/23Nmm+RBPcAR4Emq+axKHM7x/cOwH2FLR0W8setQQOwWb8jJumIs8pVDLXHRzmGx5wlwMfc03AhzjI8HTe0U8uG8Z+umR5D4RfU5+z/GJ/5pmtqapxOpKbMWv+WLw+SKtrrParehvSeePgJcp8DPxz8/2PXXaEj9nDj+K/xT4UZ/vDj9qR34mwM/U8cM6fN9biAXXXfOFoJ+Bn8V9Ln08J9868/FcPgebnrfqP5A61e7xXTDD9y+T3+8H/Q5ADlEYdHwDt/Cuy4a0309VXZT53+XPZb4IAJrCDR24AT2GHjqtq0cNNpL0WmYMNr0KOmALHVpwW6j/gBo+z+fSmsNke3ZHQIArSFL4hO97afUM/LXjnatVUbPh9f3/fLUq/i8XF4xjFV9tqpqrOi9rviyLK84uMO5nad9J+7Us8xv+t14sr7nY1Fxc8p9is15UOOnbSyfRHcLJR80DEQAA","debug_symbols":"1drNasJAFAXgd5m1lLk/M3cmr1K6SFsLgljRUCiSd2+sSWqJ1Co2Pdll4Ny53yIcFdy55etTWS1eV1tX7Jy/M1fc79x2Xa72521VbipXEGuQmZuvnj+fLdcz97JYzl0RfD0bxLOGNpxz6qNEeiJLJLFLNwn+upoS1w+zhpTwSBmPRB7QRIAmBjQJoEkBTQHQFAFNgC1OgDVOgD3OgD3OgD3OgD3OgD3Ot+hx8tanSfw5VRDu0lHk56tjjm3WSI4uppYfps2P0+bbtPlp2vw8ab785pMsxTN84tzzo/+2ZZgW6/R6JGp2HECEBmI0kKCBFA0U0EARDWRooIQGymAgRWtqRWtqRWtqRWtqRWtqRWtqRWtqRWtqRWtqRWvqgNbU4a+b+rCFR9kio2zRUbbcpv3M91syn3tR+p+D6kOfVW1BEQ1kaKCEBspgoOjRQIQG4tFBSqkDsQ1BggZSNFBAA0U0kKGBEhoo/ydIhj1kHg1EaKCTLzVHa2fE6+DLtqUrZvLlM8lfMUNXzPBlM83hrdwsysflfP93teZYva8Pj/UH"},{"name":"get_is_started","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKE9qxvAJvUNSCuKxSt0nw8ogFHO1rltuyaZ9U2XUc2/mcmIhI0T8SOkDRFLXIAmy8/xrRzSlYmjq3QVIKYrb/MtHn4KfFdgc2BXW69Z9YdRrzfEPHHBXAHcfLVfs9YNAT4MP3m8O6Bpv29lpen2A9C+zJA/mcjj1xrcsDe5GnDM7SiG5Owx9PmIvh3+VbQB35BerBq8zwn11J7pnoTbzcy4IO8yHimVb2TCX0jqF+ly8Fn0eRtyKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvpWN694OR4yL8wO5QTDo536/lXBrsdkOY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RMadSZk1AYKqCj7UHkvciXcWy/+XPd9V887LY8vPPbsFt3G/oFe27a8KoIAAA=","debug_symbols":"zZjNasMwEITfZc+maHf1Y/lVSg9q64LBOCE2hWL87nUSxxcHQkzizE0LM5rvII1APdW7r9RVu6aloifz5qh476ndp+Y4t106dFSwRicZlc33aR14yOinqksqnBmypZwlXtTszSxm5itqDZetLeuszf3wkY08HowngPHkYDwRjIcNGhCjAQkakKIBWTQgtJZmtJpmtJ5mtKJmtKYWtKaWZzf1OUU2SdFNUuwmKY9pv2DmlCg3Dop3bhJ7b2et1QnIowEFNKAcDSiCAalBA2I0IHklUJAlkKIBWTSgq9defJg8auzi1dV4v8eaFR5e4ZEVHr3PMw6/6VClz7o8fsmMY/e3Py+Hfw=="},{"name":"_add_num","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"_player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"_player":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221]},"bytecode":"","debug_symbols":""},{"name":"get_slash","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"num":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"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","debug_symbols":""},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"game_id":[{"start":36,"end":37}],"inputs":[{"start":0,"end":36}],"player":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333]},"bytecode":"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","debug_symbols":"7Z1hTxs5EIb/Sz4j5BmPPR7+yqkfcnechIRoVdBJJ9T/frsl9hrW9ajbdIHBn0ikcXaedx3vAyTrx8Pt57+ODzef7+4PV48HgMPVH4+H+y/Hu/np/cPx68Phyl0cru/+nn5+uzj8c3N7fbgK08NVGQQ5FUKCUgrYqkVM/lSMnpYXhoStVwYfQ35tIJRn9Z8uDoDvtG+/V98EnPsm5l/um1p9Y4Lc0RQT1N3PY8KGMXHDGN4wJjXHCGIeI0z9s4ERcmQYw1IMwK1q5/NZRiBQqvXzIe+7f3Rn6D9SLman9Z+A8vshAYdSPT2c24G31Q7+eju8nF1m7Xwlyr2neX041UZqvfB0bpeJUBWH1uumTCkg/VLB/HaVul3xm6aXNxKgpPyug+kN2K/VU6GdUwEXU2lIpM5lbie8YjsI+LKduHc7iOV0YUz9WcMsuZgT+pcLBr/j3puXYu84z3wPFBQx8iSZFHxwXB/itzsdyjsH8G53gPPaqYczAATPC0A1pZ9mqcdzHAKpdwh/jkNw+R3Bxyj90zCJnC/Bkq+s5dQR7d8RlzVrehyVeRQxL+gxVsrF1O4ESiNSVc82u77wupa5AH2/VPgwcmnmEkcuzVx45NLMJY1cmrnIyKWVC7mRSzMXGLk0c8GRSzMXP3Jp5kKWciEsuVD1d6Y5l5nVlMMqrKa8VGE15ZoKqyl/VFhNOWGfNZjyPIXVlLsprKZ8TGE15VgKK5liXf5LRElWrLa8qc9qy5v6rLa8qc9qy5v6rLa8qcsabXlTn9WWN/VZbXlTn9WWN/VZyRJrKB+4hFB/KOHEasqbFFZT3qSwmvImhdWUNymsprypz8qmvElhNeVNCqspb1JYTXmTwkr7s6ZAlcml87F65/KHOb2juFR7+tn/X3IYuTRziSOXZi48cmnmkkYuzVxk5NLKJbmRSzMXGLk0c8GRSzMXP3Jp5kIjl2YutnyXU8ml+rLknMvMasth+6y2vLTPass1+6y2/LHLKracsM9qy/P6rLbcrc9qy8f6rGSJFcrdNDwEt2I15U0KqylvUlhNeZPCasqbFFZT3tRnBWdKnDRYU+akwZpSJw3WlDtBKu6ETtaw9JFgbdmTAmtLnxRYW/6kwNoSKAXWlkH1YcGWQSmwtgxKgTVlUBhK28hrgwJTBqXB0keCNWVQGqwpg9JgTRmUBmvKoDRYUwalwKIpg9JgTRmUBvuRDAr3N6iQJObyIP7lPW4B9/ecIKG0FJ0Lq5b2t5Hoyv2PIU6/wqxa2t8ZIi6zdJqDuGqJ315L+19/o3flhvzR0/rE7X+VjFxN7wQvb68Ofv9rWUwelpZSXLW0/xUnilvmkjz/rtL3lvAVWpLy5XB21Z0Lc0v7r94My31+GGS1er/CDcEZqdyinDHEfnkqOw0I1tfD1F5flkVYnn/JrFGtb+0URjg/Die+8XDE5/VBgijhhGntPxUHrDdD8mFbOPzGw2FZtqGpBGpO59O8r8xl+0/OIOWj3iC4rCbzrj6ncbBxXHO5DjFfCesNrRI87RFx2Ux52ZtE/HJVyPtKXKYNY+QHTKcxCNUY/7Tzw2Xbi7sHmgaFLYPilkG8ZdBPhjc9+ff49eb45+31vDnh9PThvy9PD7/9Dw=="},{"name":"get_game","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::game::Game","fields":[{"name":"players","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"is_number_set","type":{"kind":"array","length":2,"type":{"kind":"boolean"}}},{"name":"started","type":{"kind":"boolean"}},{"name":"finished","type":{"kind":"boolean"}},{"name":"round","type":{"kind":"field"}},{"name":"is_first","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6,7]},"bytecode":"H4sIAAAAAAAA/+1ZS08UQRDueezscxRUFJBHA8vTy4CIHDQZoye9Gb1qMKByYZMFEvEneffvGam1vuy3zYSsS48SYyXL1FRXV331Ve9sT1M1xgTml0SmL4leZSwke+DYQpoX67XixKief76rXqNY9vyTq55dRbaz3YQBOCL525S/4T9/JnGbvuNm2ZbETf3HzaSHN6hPlvI0iaubqgf+cm9ybqwn5IE9Jn3c9OUm6ViDwN3Sj+vHesOZk9J4q6Bu67nulLBYukc++e4khKOEtbr1f60OLb+9VudNX3jd4dH0r63VO6pLH2ItMiFbRW1VsiVxHztsVbXV1TYmfxw/ueI7/8NfrTtcZ0C5opJ4NQ6vkIj4cP2aNB6SLXTmCs/faLxSMCcpyAe9Qjas2aRgLvNUoVpy1bOrSY8nzmXpHvlahCP5A3h4e2HNxf3O386N71juL3dvX1PzX9Ou1FSn3lnCj3wx+TzVK549sIvw2hdpES91ilnzz89mKb/Ryk/T4Qf4G8QPfF44/MDO/NSIn7rjx3Xkxu+eoFUSP6nDT4PqAz/weeXwkxbww/Objh/X4XF/kbm/s9x35AtJT8mPf/tzf5geStwxjWWN355hL4+eAT/yxeTzVq/w4feAyBkTftz3Ba7Dd88YC+8RkS8kfZz8BNNtvc/9YdqWuNiLWeO3ZxMaCz0DfuSLyee9GewL7CLoGeZLz245flyH754xloByI19I+gT5CaZ7ep/7w/RI4k5qLGv89mxKY6FnwI98Mfkc6hU9g10EPcN86dldx4/r8N0zxhJQbuQLSZ8iP8F0X+9zf5h2JO6MxrLGb89mNRZ6BvzIF5PPsV7RM9hF0DPMl55NO35cR2681fFY4s6VxM+8ww/wzxE/8Pnq8DNfwM8M8TPr+HEdvtc0Y+G+I19I+jz5CaZF453braYZfA9FPhYeXySOFvzj2SypzkxiLBXUhFwpjfN71VIJNQaUF7FxzxiHxVu/Bngld9t/7t765Nwil63PdslclFRnb30uUx2LTj0pjfP533IJNQaUF7FxzxiHxTt2DfA2zWDfYMP4AtlWnJrEtqr6EtnWVOdz0HXVJ8m2ofo02R6oPke2UPU22aKCOnD+s0I2PLNWyYZzsTWy4ZxknWw4G9ggG54pwFk3g+eiHs9gd2uE1XqMy1xBLnt2lH2O2DD99/vjk05379PB64O9/YCgxQSB4QZmEDrGQ7KxHhXYjBlcFjHZsCz4CDh0aOHlCP+6uUip1+91ZIqlRjr+Jx1pUfg/WtVcJFLkiV7xzvCs2907s4dH+wdfbOf0xHY+2g+d06P9Y570fJRJL0eZ9GaUSe9GmfR5lEndUSadDTvJ/AT3Pp+klSAAAA==","debug_symbols":"zdvdattAEIbhe9GxKTu787PrWyk9UFsXDMYJsSkU43tvTCwnIEGISaT3TBIzO8+B+NDC6tTtHn71x+3D/tCtT136Vrxbfz91h8d+f3lwOPZPx24tajVW3Wb/+3Ltyc+r7s92t+nWls6rcbnkNlSLp1uxiExUl8jXYpVyq61+/rG6gIIGqjRQg4E00UBCA2UaqNBASgMZDURLaqUltdKSWmlJbbSkNlpS21cn9cuUMssUnWWKzTLlc9Iv0m1Ky++8KGrD0uqvC2u5goIGqjRQg4E80UBCA2UaqMwP8jqAIsYgpYGMBnIaKGigSgM1GCjmT2qTodikjUFCA2UaqNBASgMZDeQ0UCwJyhM5VGmgBgPVBZL6tlW0UscgoYEyDVRoIKWBjAZyGiiWBOl4o1grDdRgoDZ/UrvZtdhdxyChgTINVGggpYGMBnIaKJYERR6DKg3UYCBJC0R1G0SRdEIkOFHGiQpOpDiR4USOE8WSIpnKo4oTNZpI5s/sKMNJhlCZEAlOlHGighMpTmQ4keNE82d2uA6iKBOiihM1mignnEhwoowTFZxIlxTViTzKhhM5TTR9yCD74ClvPs6H46EyfRDgvaZ8T1O5p0nvabKPNT3f/O2ftv3P3ebyF9Hz7fHf48vl+T8="},{"name":"get_high_and_low","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"num","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"num":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"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","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"preimage","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"preimage":[{"start":4,"end":6}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[6,7,8,9]},"bytecode":"","debug_symbols":"7d3dbizJlR3gd+lrwcj42RE79CqGL9q2DAgQNIORYMAQ9O7OwTR5jjDUoYaqrvyiqq7UIpidK6JOr13BU1/yLz/94V/+189//v2//PFPP/32Lz8d/632n3773//y05/+9ec//vsX/vTnn//tzz/99vjNT7/74/8+//evv/np//z+D7/76bdx/uN/+rbRyi/fOHq8f2s5PvreMucv31uPb//aVv76P37z7zHCiDGMGNOIkUaMRcRohxGjGDGqEaMZMYwWbUaLNqNFm9GizWjRZrRoN1q0Gy3ajRbtRot2o0W70aLdaNFutGg3WrQbLRpGi4bRomG0aBgtGkaLhtGiYbRoGC0aRouG0aLDaNFhtOgwWnQYLTqMFh1Giw6jRYfRosNo0WG06DRadBotOo0WnUaLTqNFp9Gi02jRabToNFp0Gi2aRoum0aJptGgaLZpGi6bRomm0aBotmkaLptGiy2jRZbToMlp0GS26jBZdRosuo0WX0aLLaNFltOh5DZLD6NFyGEVaDqNJy2FUaTmMLi2HUablMNq0HEadlgPp04L0aUH6tCB9WpA+LUifFqRPC9KnBenTgvRpQfq0In1akT6tSJ9WpE8R1FQQ1VQQ1lQQ11QQ2FQQ2VQQ2lQQ21QQ3FQQ3VQQ3lQQ31QQ4FQQ4VQQ4lQQ41QQ5FQQ5VQQ5lQQ51QQ6FQQ6VQQ6lQQ61QQ7FQQ7VQQ7lQQ71QQ8FQQ8VQQ8lQQ81QQ9FQQ9VQQ9lQQ91QQ+FQQ+VQQ+lQQ+1QQ/FQQ/VQQ/lQQ/1QQAFUQAVUQAlUQA1UQBFUQBVUQBlUQB1UQCFUQCVUQClUQC1UQDFUQDVUQDlUQD1UQEFUQEVUQElUQE1UQFFUQFVUQFlUQF1UQGFUQGVUQGlUQG1UQHFUQHVUQHlUQH1URH1URH1URH1URH1UPo08r4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qMq4qOq8kuflN/6pPzaJ+X3Pim/+AnxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxURXxUQ3xUQ3xUQ3xUQ3xUe0w+rQhPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqohPqojPqojPqojPqojPqofRp92xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEd1xEcF4qMC8VGB+KhAfFQcRp8G4qMC8VGB+KhAfFQgPioQHxWIjwrERwXiowLxUYH4qEB8VCA+KhAfFYiPCsRHBeKjAvFRgfioQHxUID4qEB8ViI8KxEcF4qMC8VGB+KhAfFQgPioQHxWIjwrERwXiowLxUYH4qEB8VCA+KhAfFYiPCsRHBeKjAvFRgfioQHxUID4qEB8ViI8KxEcF4qMC8VGB+KhAfFQgPioQHxWIjwrERwXiowLxUYH4qEB8VCA+KhAfFYiPCsRHBeKjAvFRgfioQHxUID4q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MVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVhdMVihGKxQDFYoBisUgxUH0qyhGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGKxSDFYrBCsVghWKwQjFYoRisUAxWKAYrFIMVisEKxWCFYrBCMVihGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGKxSDFYrBCsVghWKwQjFYoRisUAxWKAYrFIMVisEKxWCFYrBCMVihGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGKxSDFYrBCsVghWKwQjFYoRisUAxWKAYrFIMVisEKxWCFYrBCMVihGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGKxSDFYrBCsVghWKwQjFYoRisUAxWKAYrFIMVisEKxWCFYrCGYrCGYrCGYrCGYrDGgTTrUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWUAzWVAzWVAzWVAzWVAzWPJBmnYrBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBmorBSsVgpWKwUjFYqRisPJBmTcVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDtRSDtRSDtRSDtRSDtQ6kWZdisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisBZisM6vGc16fs1o1vNrRrOeXzOa9fya0azn14xmPb9mNOv5NaNZz68ZzXp+TWlWxGCdQZRmRQzWGURpVsRgnUGUZkUM1hlEaVbEYJ1BlGZFDNYZRGlWxGCdQZRmRQzWGURpVsRgnUGUZkUM1hlEaVbEYJ1BlGZFDNYZRGlWxGCdQZRmRQzWGURpVsRgnUGUZkUM1hlEaVbEYJ1BlGZFDNYZRGlWxGCdQZRmRQzWGURpVsRgnUGUZkUM1hlEaVbEYJ1BlGZFDNYZRGlWxGCdQZRmRQzWGURpVsRgnUGUZkUM1hlEaVbE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W+3k64xzo52crzPOrXbydca51U4+1BnnwscRzIc64ly5kf21kbfZyIc64Fy5kQ91vrlyIx/qeHPlRj7U6ebKjXyow82FG5kPdba5ciMf6mhz5Ua+TjY32sjXyeZGG9lfG3mbjXydbG60ka+TzY028nWyuc1GrvtP7ez1fSNn/ngj1/tyV//249fV3uO3veP3vePH3vHH3vHn3vFz7/hr5/hxwa/bvmn8snf8raduHFtP3Ti2nrpxbD1149h66sax9dSNY+upG8feU7fsPXXL3lO37D11y95T94LfsnjT+HtP3bL31C17T92y99Qte0/duvfUrXtP3br31K17T90LftnUTePvPXXr3lO37j11695Tt+49ddveU7ftPXXb3lO37T11L/hFKDeNv/fUbXtP3bb31G17T92299Tte0/dvvfU7XtP3b731L3g9zXcNP7eU7fvPXX73lO37z11+95TN/aeurH31I29p27sPXUveBL1TePvPXVj76kbe0/d2Hvqxt5Td+w9dcfeU3fsPXXH3lP3gueS3jT+3lN37D11x95Td+w9dcfeU3fuPXXn3lN37j11595T94Jn5d00/t5Td+49defeU3fuPXXn3lM39566uffUzb2nbu49dS94jtNN4+89dXPvqZt7T93ce+rm3lN37T11195Td+9nU8Xez6aKvZ9NFXs/myr2fjZV7P1sqtj72VSx97Opxt7Pphp7P5tq7P1sqrH3s6nGsfXUHXs/m2rs/Wyqsfezqcbez6YaVzybKt8fM3wcx4/j/yOPAx5XPKDq5msoD7CG+gBraA+whv4Aa4gHWMN4gDXMB1hDPsAaHmBO1weY0/UB5nR9gDldH2BOX/GYq5uv4QHmdH2AOV0fYE7XB5jTN3GRbbyf8NvI/uM1RCm/fG/U47tI5T1S9yKFF2l4kaYXKe8eqfe3SNE/jLTuH+nbr7OKjyLdxPjdOFLxIlUvUvMidS/S/du7vQ3eaOPDSMOLNL1I6UVaXKR5eJGKF6l6kZoXqXuRvPaeXntPr72n197Ta+/02ju99k6vvdNr7/TaO732Tq+902vv9No7vfZeXnsvr72X197La+/ltffy2nt57b289l5eey+uvefBtff8e5+sr3O8R6rrbyK9Xdm/fOXf+a+8Hev9yn7Mz7Yhv9uG9v02vN1m3Oc28ya3+S+8qP/IX7TOv/e566tjLTLW3/uI9NWxihmrmrGaGaubscKMNcxYZssXs+WL2fLVbPlqtnw1W76aLV/Nlq93763PPiM1a3KR2t3/C/z0YNaqF6l5kboXKbxIv/J7qrfbzPvc5jb9Ub+7Tfx4g89++OV7Z/+uZd+V8GyLi9QPL1LxIlUvUvMidS9S/LqR3m4z7nObeZ/b5H1us+5ymzjuc5tyn9vU+9ym3ec2/T63uU8LxH1aIO7TAnGfFoj7tMC4SQvk8X6b7OUG5+5RzFjVjNXMWN2MFWasm7RkzuM91lo/jpX5RllX+eRbV30LsWb5mzeUX13tfKrV5lOtdj3TaufxVKstT7Xa+lSrbU+12v5Uq42nWu1TvZeaT/Veat79vdTKt+8tRztu8FZ/ru2XkMf+Syj7L6Huv4S2/xL6/kuI/Zcw9l/C3H8J+0/n3H86r/2n89p/Oq/9p/O6yXT+dgZoa33y0YU4vj0eat5iBX37FcT2Kxjbr2Buv4LcfgVr8xXkcWy/grL9Cur2K9h9Juex+0zOY/eZnMfuMzmP3WdyHrvP5LyJR+9He/ssTT8yfxzr2wMFZls3WMFN6Pq1Kyjbr6Buv4K2/Qr69iuI7Vcwtl/B3H4Fuf0Ktp/JdfuZXLefyXX7mVy3n8k3eSjCpSuI+2vuTx5WkDG8SNxTJjK4p0xkLC7SuPsTcT77fUU57v8sjk9+oUuO6kVqXqTuRQov0vAi3b+9P3liSY70Ii0u0jy8SNyTlHJyT1LKyT1JKWf3InFPUso5vEhee0+vvafX3um1d3rtnV57p9fe6bV3eu2dXnun197ptXd67b289l5eey+vvZfX3str7+W19/Lae3ntvbz2Xlx7r4Nr73Vw7b0Orr3Xx59b7eP9LxWO+n7Z+9NC18efFf30qvmlq/JLV62vXPXxZ/8+vap86aoP/zBEtrer1odXtS9d1b90VXzpqvGlq+aXrsovXfXhn41Yb4+wGMf44KqPP4Py6VXlS1fVL13VvnRV/9JV8aWrPvyzMeL9qvHhVfNLV+WXrlpfuaodX7qqfOmq+qWrPvyzMebbfykjP/ov5eNfB/DpVfGlq8aXrppfuiq/dNX6r111/p//+/O//f7n//mH3/3pvOD8v3/+f//6H//41/8P"},{"name":"get_secret_num","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"player":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"","debug_symbols":"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2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk7d2KkbO3Vjp27s1I2durFTN3bqxk492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IOderBTD3bqwU492KkHO/Vgpx7s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/U9l9+M9d+Dmf7xmTPzz2DT4NDg0uDB4HP0/Zmg0aDTYNBg0iBtTtHmFG1O0eYUbU7T5jRtTtPm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BvTdgL4b0HcD+m5A3w3ouwF9N6DvBvTdgL4b0HcD+m5A3w3ouwF9N6DvBvTdgL4b0HcD+m5A3w3ouwF9N6DvBvTdgL4b0HcD+m5A3w3ouwF9N6DvBvTdgL4b0HcD+m5A3w3ouwF9N6DvBvTdgL4b0HcD+m5A3w3ouwF9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcT+m5C303ouwl9N6HvJvTdhL6b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6DvFvTdgr5b0HcL+m5B3y3ouwV9t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0Hcb+m5D323ouw19t6HvNvTdhr7b0HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6DvDvTdgb470HcH+u5A3x3ouwN9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcX+u5C313ouwt9d6HvLvTdhb670HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ouwd996DvHvTdg7570HcP+u5B3z3ou8d8Nz+Y7z5yBnMOcwFzCXMFcw1zA3MLc7AvBvtisC8G+2KwLwb7YrAvBvtisC8G+2KwLw774rAvDvvisC8O++KwLw774rAvDvvisC8B+xKwLwH7ErAvAfsSsC8B+xKwLwH7ErAvCfuS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"},{"name":"join_game","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"player","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"game_id":[{"start":36,"end":37}],"inputs":[{"start":0,"end":36}],"player":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"max_non_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_commitments","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"authwit::aztec::protocol_types::contract_class::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348]},"bytecode":"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","debug_symbols":"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"}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"use dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nstruct Game {\n    players: [Field;2],\n    is_number_set: [bool;2],\n    started: bool, // true if both players are added and secret numers are set.\n    finished: bool,\n    round: Field,\n    is_first: bool\n}\n\nglobal GAME_SERIALIZED_LEN: Field = 8;\n\nimpl Deserialize<GAME_SERIALIZED_LEN> for Game {\n    fn deserialize(fields: [Field; GAME_SERIALIZED_LEN]) -> Self {\n\n        let _players = [fields[0], fields[1]];\n        let _is_number_set = [fields[2] as bool, fields[3] as bool];\n\n        Game { \n          players: _players,\n          is_number_set: _is_number_set,\n          started: fields[4] as bool, \n          finished: fields[5] as bool, \n          round: fields[6], \n          is_first: fields[7] as bool\n        }\n    }\n}\n\nimpl Serialize<GAME_SERIALIZED_LEN> for Game {\n    fn serialize(self) -> [Field; GAME_SERIALIZED_LEN] {\n        [\n        self.players[0],\n        self.players[1],\n        self.is_number_set[0] as Field,\n        self.is_number_set[1] as Field,\n        self.started as Field, \n        self.finished as Field, \n        self.round, \n        self.is_first as Field\n    ]\n    }\n}","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/game.nr"},"44":{"source":"// use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nglobal PLAYER_SERIALIZED_LEN: Field = 2;\n\nstruct Player {\n    player_id: Field,\n    is_player: bool\n}\n\nimpl Deserialize<PLAYER_SERIALIZED_LEN> for Player {\n    fn deserialize(fields: [Field; PLAYER_SERIALIZED_LEN]) -> Self {\n        Player { player_id: fields[0], is_player: fields[1] as bool}\n    }\n}\n\nimpl Serialize<PLAYER_SERIALIZED_LEN> for Player {\n    fn serialize(self) -> [Field; PLAYER_SERIALIZED_LEN] {\n         [self.player_id, self.is_player as Field ]\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/player.nr"},"45":{"source":"use dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nglobal RESULT_SERIALIZED_LEN: Field = 5;\n\nstruct Result {\n    call_num: Field,\n    eat: Field,\n    bite: Field,\n    item: Field,\n    item_result: Field\n}\n\nimpl Result {\n    pub fn new(call_num: Field, eat: Field, bite: Field, item: Field, item_result: Field) -> Self {\n        Result { call_num, eat, bite, item, item_result }\n    } \n}\n\nimpl Deserialize<RESULT_SERIALIZED_LEN> for Result {\n    fn deserialize(fields: [Field; RESULT_SERIALIZED_LEN]) -> Self {\n    Result { \n        call_num: fields[0], \n        eat: fields[1], \n        bite: fields[2],\n        item: fields[3],\n        item_result: fields[4] \n    }\n    }\n}\n\nimpl Serialize<RESULT_SERIALIZED_LEN> for Result {\n    fn serialize(self) -> [Field; RESULT_SERIALIZED_LEN] {\n    [self.call_num, self.eat, self.bite, self.item, self.item_result]\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/result.nr"},"46":{"source":"use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    protocol_types::address::AztecAddress,\n    oracle::{\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal SECRET_NUM_NOTE_LEN: Field = 2;\n\nstruct SecretNumberNote {\n    secret_num: Field,\n    owner: AztecAddress, \n    header: NoteHeader,\n}\n\nimpl SecretNumberNote {\n    pub fn new(secret_num: Field, owner: AztecAddress) -> Self {\n        SecretNumberNote {\n            secret_num,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n}\n\n\nimpl NoteInterface<SECRET_NUM_NOTE_LEN> for SecretNumberNote {\n    fn serialize_content(self) -> [Field; SECRET_NUM_NOTE_LEN] {\n        let res: [Field; SECRET_NUM_NOTE_LEN] = [self.secret_num, self.owner.to_field()];\n        res\n    }\n\n    fn deserialize_content(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> Self {\n        SecretNumberNote { secret_num: serialized_note[0], owner:AztecAddress::from_field(serialized_note[1]), header: NoteHeader::empty() }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: SecretNumberNote) -> NoteHeader {\n        note.header\n    }\n\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        0\n    }\n}","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/secret_num_note.nr"},"48":{"source":"use dep::aztec::{\n    state_vars::{\n            singleton::Singleton,\n    },\n};\nuse crate::types::{\n    secret_num_note::SecretNumberNote,\n};\n\nuse crate::num_lib;\n\nglobal ITEM_HIGH_LOW: Field = 1; // see buttom in this file\nglobal ITEM_SLASH: Field = 2; // 2 ~ 9\nglobal ITEM_TARGET: Field = 3; // 0 or 1, 2, 3\nglobal ITEM_CHANGE: Field = 4; // 1, 2, 3\nglobal ITEM_SHUFFLE: Field = 5; // nothing\n\nglobal LOW: Field = 1;\nglobal HIGH: Field = 2;\nglobal CRACK: u32 = 5;\n\nfn get_high_and_low(_note: Singleton<SecretNumberNote>) -> Field {\n    let note = _note.get_note(true);\n    let secret_num: Field = note.secret_num;\n\n    let mut num = secret_num as u32;\n    let mut modulus: u32 = 100;\n    let mut result: Field = 0;\n\n    for i in 0..3 {\n        if ((i == 0) & (num < 100)) {\n            result += (LOW * modulus as Field);\n        } else {\n           let subtractor = num - (num % modulus);\n           let crack = CRACK * modulus;\n\n           if ( subtractor < crack ) {\n            // low\n            result += (LOW * modulus as Field);\n           } else {\n            // high\n            result += (HIGH * modulus as Field);\n           }\n\n            num = num - subtractor;\n\n        }\n\n        modulus = modulus / 10;\n    }\n\n    result\n}\n\nfn is_valid_new_shuffled_num(_current_secret_num:Field, _new_secret_num:Field) -> Field {\n\n       let current_nums: [u32;3] = num_lib::arrarify_num(_current_secret_num);\n       let new_nums: [u32;3] = num_lib::arrarify_num(_new_secret_num);\n\n        let mut result: Field = 0;\n\n        for i in 0..3 {\n            let mut found: bool = false;\n\n            for j in 0..3 {\n\n                if (current_nums[i] == new_nums[j]) {\n                    found = true;\n                }\n\n            }\n            \n            if (!found) {\n               result = 1;\n            }\n        }\n\n        result\n}\n\n\npub fn get_slash(_note: Singleton<SecretNumberNote>) -> Field {\n    let note = _note.get_note(true);\n    let nums: [u32;3] = num_lib::arrarify_num(note.secret_num);\n\n    let mut min = nums[0];\n    let mut max = nums[0];\n    \n    if (nums[1] > max) {\n        max = nums[1];\n    } else if (nums[1] < min) { \n        min = nums[1];\n    }\n\n    if (nums[2] > max) {\n        max = nums[2];\n    } else if (nums[2] < min) { \n        min = nums[2];\n    }\n\n    // let mut result: Field\n    let result = max - min;\n    result as Field\n}\n\n    // for testing purpose\n    pub fn _get_high_and_low(_num:Field) -> Field {\n\n    let mut num = _num as u32;\n    let mut modulus: u32 = 100;\n    let mut result: Field = 0;\n\n    for i in 0..3 {\n        if ((i == 0) & (num < 100)) {\n            result += (LOW * modulus as Field);\n        } else {\n           let subtractor = num - (num % modulus);\n           let crack = CRACK * modulus;\n\n           if ( subtractor < crack ) {\n            // low\n            result += (LOW * modulus as Field);\n           } else {\n            // high\n            result += (HIGH * modulus as Field);\n           }\n\n            num = num - subtractor;\n\n        }\n\n        modulus = modulus / 10;\n    }\n\n    result\n    }\n\npub fn _is_valid_new_shuffled_num(_current_secret_num:Field, _new_secret_num:Field) -> Field {\n\n       let current_nums: [u32;3] = num_lib::arrarify_num(_current_secret_num);\n       let new_nums: [u32;3] = num_lib::arrarify_num(_new_secret_num);\n\n        let mut result: Field = 0;\n\n        for i in 0..3 {\n            let mut found: bool = false;\n\n            for j in 0..3 {\n\n                if (current_nums[i] == new_nums[j]) {\n                    found = true;\n                }\n\n            }\n            \n            if (!found) {\n               result = 1;\n            }\n        }\n\n        result\n}\n\npub fn _get_slash(_nums:Field) -> Field {\n    let nums: [u32;3] = num_lib::arrarify_num(_nums);\n\n    let mut min = nums[0];\n    let mut max = nums[0];\n    \n    if (nums[1] > max) {\n        max = nums[1];\n    } else if (nums[1] < min) { \n        min = nums[1];\n    }\n\n    if (nums[2] > max) {\n        max = nums[2];\n    } else if (nums[2] < min) { \n        min = nums[2];\n    }\n\n    // let mut result: Field\n    let result = max - min;\n    result as Field\n}\n   \n   \n// global LOW_lOW_HIGH: Field = 112; \n// global LOW_HIGH_HIGH: Field = 122; \n// global LOW_HIGH_lOW: Field = 121; \n// global HIGH_HIGH_LOW: Field = 221; \n// global HIGH_LOW_LOW: Field = 211; \n// global HIGH_lOW_HIGH: Field = 212; \n\n","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/item_lib.nr"},"49":{"source":"    fn is_valid_nums(_num: Field) {\n        assert(_num as u32 >= 12, \"number should be bigger than 11\");\n        assert(_num as u32 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u32;\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n    }\n\n    fn check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u32;\n        let mut secret_num = _secret_num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut call_nums: [u32;3] = [0;3];\n        let mut secret_nums: [u32;3] = [0;3];\n\n\n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u32;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u32;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n    }\n\n    pub fn _is_valid_nums(_num: Field) -> [u32;3] {\n        assert(_num as u32 >= 12, \"number should be bigger than 11\");\n        assert(_num as u32 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u32;\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n\n        nums\n    }\n\n    pub fn _check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u32;\n        let mut secret_num = _secret_num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut call_nums: [u32;3] = [0;3];\n        let mut secret_nums: [u32;3] = [0;3];\n\n        \n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u32;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u32;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n        \n    }\n\n       fn arrarify_num(_num: Field) -> [u32;3] {\n\n        let mut num = _num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n               nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        nums\n    }\n","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/num_lib.nr"},"50":{"source":"mod types;\nmod item_lib;\nmod num_lib;\n\ncontract Numer0n {\n    use dep::std;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map, public_state::PublicState, singleton::Singleton, immutable_singleton::ImmutableSingleton,\n        },\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },  \n        protocol_types::{\n            abis::function_selector::FunctionSelector,\n            address::AztecAddress,\n        },\n    };\n\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit, \n            assert_current_call_valid_authwit_public\n        },\n    };\n\n    use dep::field_note::field_note::{FieldNote, FIELD_NOTE_LEN};\n\n    use crate::num_lib;\n    use crate::item_lib;\n\n    use crate::types::{\n        secret_num_note::{SecretNumberNote, SECRET_NUM_NOTE_LEN},\n        player::Player,\n        result::Result,\n        game::Game,\n    };\n\n    // storage\n    struct Storage {\n        players: Map<Field, PublicState<Player>>,\n        secret_num: Map<Field, Singleton<SecretNumberNote>>, \n        results_one: Map<Field, PublicState<Result>>, \n        results_two: Map<Field, PublicState<Result>>,\n        game_id: ImmutableSingleton<FieldNote>,\n        game: PublicState<Game>,\n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            players: Map::new(\n                context,\n                1,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            secret_num: Map::new(\n                context,\n                2,\n                |context, slot| {\n                    Singleton::new(\n                        context, \n                        slot\n                    )\n               },\n            ),     \n            results_one: Map::new(\n                context,\n                3,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            results_two: Map::new(\n                context,\n                4,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            game_id: ImmutableSingleton::new(\n                context,\n                5\n            ),\n            game: PublicState::new(\n                context,\n                6\n            ),\n        }\n      }\n    }\n\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let mut game_id_note = FieldNote::new(game_id);\n        storage.game_id.initialize(&mut game_id_note, false);\n\n        let selector = FunctionSelector::from_signature(\"_add_player(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [player, 1]);\n    }\n\n    #[aztec(private)]\n    fn join_game(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let game_id_note = storage.game_id.get_note();\n        assert(game_id == game_id_note.value, \"invalid game_id\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_player(Field,Field)\"),\n            [player, 2]\n        );\n    }\n\n    #[aztec(private)]\n    fn add_num(player: Field, secret_num: Field) {\n        assert(context.msg_sender().to_field() == player, \"invalid player\");\n        // check caller validitiy\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(secret_num);\n\n        let mut secret_num_note = SecretNumberNote::new(secret_num, AztecAddress::from_field(player));\n        storage.secret_num.at(player).initialize(\n            &mut secret_num_note,\n            true\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_num(Field)\"),\n            [player]\n        );\n    }\n\n    #[aztec(private)]\n    fn call_num(target: AztecAddress, call_num: Field) {\n        // replaced if-else with assert as it leads to an errror at get_note()\n        assert(target != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        let secret_num_note: SecretNumberNote = storage.secret_num.at(target.to_field()).get_note(true);\n        let secret_num: Field = secret_num_note.secret_num;\n\n        num_lib::is_valid_nums(call_num);\n        let result = num_lib::check_result(call_num, secret_num);\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_result(Field,Field,Field,Field)\"),\n            [context.msg_sender().to_field(), call_num, result[0], result[1]]\n        );\n    }\n\n    #[aztec(private)]\n    fn use_attack_item(target: AztecAddress, item_type: Field) {\n        assert(target != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        let mut result: Field = 0;\n        if (item_type == item_lib::ITEM_HIGH_LOW) {\n            result = item_lib::get_high_and_low(storage.secret_num.at(target.to_field()));\n        } else if (item_type == item_lib::ITEM_SLASH) {\n            result = item_lib::get_slash(storage.secret_num.at(target.to_field()));\n            // } else if (item_type == item_lib::ITEM_TARGET) {\n        } else {\n            assert(false, \"inavlid item type\");\n        }\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n            [context.msg_sender().to_field(), item_type, result]\n        );\n    }\n\n    #[aztec(private)]\n    fn use_defense_item(player: Field, item_type: Field, new_secret_num: Field) {\n        assert(context.msg_sender().to_field() == player, \"invalid player\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(new_secret_num);\n\n        let secret_num_note = storage.secret_num.at(player).get_note(true);\n        let secret_num = secret_num_note.secret_num;\n\n        let result:Field = 0;\n        if (item_type == item_lib::ITEM_SHUFFLE) {\n            let ret = item_lib::is_valid_new_shuffled_num(secret_num, new_secret_num);\n            assert(ret == 0, \"invalid num for shuffule\");\n            // } else if (item_type == item_lib::ITEM_CHANGE) {\n        } else {\n            assert(false, \"inavlid item type\");\n        }\n\n        let mut new_secret_num_note = SecretNumberNote::new(new_secret_num, AztecAddress::from_field(player));\n        storage.secret_num.at(player).replace(&mut new_secret_num_note, true);\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n            [context.msg_sender().to_field(), item_type, result]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _record_item_result(_caller: Field, _item_type: Field, _item_result: Field) {\n        assert(storage.game.read().started, \"game hasn't been started yet\");\n        assert(!storage.game.read().finished, \"game has already been finished\");\n\n        let player_id = storage.players.at(_caller).read().player_id;\n        let mut game = storage.game.read();\n        let current_round = game.round;\n\n        if (player_id == 1) {\n            assert(game.is_first, \"invalid turn for player 1\");\n            let mut result_one = storage.results_one.at(current_round).read();\n            assert(result_one.call_num == 0, \"item should be used before call\");\n            assert(result_one.item == 0, \"an item has already been used\");\n            result_one.item = _item_type;\n            result_one.item_result = _item_result;\n            storage.results_one.at(current_round).write(result_one);\n        } else if (player_id == 2) {\n            assert(!game.is_first, \"invalid turn for player 2\");\n            let mut result_two = storage.results_two.at(current_round).read();\n            assert(result_two.call_num == 0, \"item should be used before call\");\n            assert(result_two.item == 0, \"an item has already been used\");\n            result_two.item = _item_type;\n            result_two.item_result = _item_result;\n            storage.results_two.at(current_round).write(result_two);\n        } else {\n            assert(false, \"invalid player\");\n        }\n    }\n\n    #[aztec(public)]\n    internal fn _record_result(_caller: Field, _call_num: Field, _eat: Field, _bite: Field) {\n        assert(storage.game.read().started, \"game hasn't been started yet\");\n        assert(!storage.game.read().finished, \"game has already been finished\");\n        let player_id = storage.players.at(_caller).read().player_id; // 2 or 1\n        let mut result = Result::new(_call_num, _eat, _bite, 0, 0);\n\n        let mut game = storage.game.read(); // 8 or 2\n        let current_round = game.round;\n\n        if (player_id == 1) {\n            assert(game.is_first, \"invalid turn for player 1\");\n            let result_one = storage.results_one.at(current_round).read(); // 5 or 3 or 1\n            result.item = result_one.item;\n            result.item_result = result_one.item_result;\n\n            storage.results_one.at(current_round).write(result);\n\n            game.is_first = false;\n            storage.game.write(game);\n        } else if (player_id == 2) {\n            assert(!game.is_first, \"invalid turn for player 2\");\n            let result_two = storage.results_two.at(current_round).read(); // 5 or 2\n            result.item = result_two.item;\n            result.item_result = result_two.item_result;\n\n            storage.results_two.at(current_round).write(result);\n\n            // check if either of the players win\n            let one_eat = storage.results_one.at(current_round).read().eat;\n            if ((_eat == 3) | (one_eat == 3)) {\n                game.finished = true;\n            } else {\n                game.is_first = true;\n                game.round = current_round + 1;\n            }\n            storage.game.write(game);\n        } else {\n            assert(false, \"invalid player\");\n        }\n    }\n\n    #[aztec(public)]\n    internal fn _assert_is_player(_player: Field) {\n        assert(storage.players.at(_player).read().is_player, \"not player\");\n    }\n\n    #[aztec(public)] \n    internal fn _add_player(_player: Field, _player_id: Field) {\n        assert(!storage.game.read().started, \"game has already been started\");\n        assert(_player != 0, \"invalid player address\");\n\n        let mut player = storage.players.at(_player).read();\n        assert(!player.is_player, \"player already exists\");\n\n        player.player_id = _player_id;\n        player.is_player = true;\n\n        storage.players.at(_player).write(player);\n\n        // add player addrs into game\n        let mut game = storage.game.read();\n        game.players[_player_id - 1] = _player;\n        storage.game.write(game);\n    }\n\n    #[aztec(public)] \n    internal fn _add_num(_player: Field) {\n        assert(!storage.game.read().started, \"game has already started\");\n\n        let player = storage.players.at(_player).read();\n        let mut game = storage.game.read();\n\n        if (player.player_id == 1) {\n            assert(!game.is_number_set[0], \"num 1 already has been set\");\n            game.is_number_set[0] = true;\n        } else {\n            assert(!game.is_number_set[1], \"num 2 already has been set\");\n            game.is_number_set[1] = true;\n        }\n\n        if ((game.is_number_set[0]) & (game.is_number_set[1])) {\n            game.round = 1;\n            game.is_first = true;\n            game.started = true;\n        }\n\n        storage.game.write(game);\n    }\n\n    unconstrained fn get_player(player: Field) -> pub Player {\n        storage.players.at(player).read()\n    }\n\n    unconstrained fn get_winner() -> pub Field {\n        let current_round = storage.game.read().round;\n        let latest_result_one = storage.results_one.at(current_round).read();\n        let latest_result_two = storage.results_two.at(current_round).read();\n\n        if (!storage.game.read().finished) {\n            0\n        } else if ((latest_result_one.eat == 3) & (latest_result_two.eat != 3)) {\n            1\n        } else if ((latest_result_one.eat != 3) & (latest_result_two.eat == 3)) {\n            2\n        } else {\n            3 // draw\n        }\n    }\n\n    // for testing purpose\n    // q: how to only allow note an owner to view her own secret num\n    unconstrained fn get_secret_num(player: Field) -> pub Field {\n        let note = storage.secret_num.at(player).view_note();\n        note.secret_num\n    }\n\n    unconstrained fn get_result(player: Field, round: Field) -> pub Result {\n        let player = storage.players.at(player).read();\n        let mut result = Result::new(0, 0, 0, 0, 0);\n\n        if (player.player_id == 1) {\n            result = storage.results_one.at(round).read();\n        } else {\n            result = storage.results_two.at(round).read();\n        }\n\n        result\n    }\n\n    unconstrained fn get_round() -> pub Field {\n        storage.game.read().round\n    }\n\n    unconstrained fn get_is_first() -> pub bool {\n        storage.game.read().is_first\n    }\n\n    unconstrained fn get_is_started() -> pub bool {\n        storage.game.read().started\n    }\n\n    unconstrained fn get_is_finished() -> pub bool {\n        storage.game.read().finished\n    }\n\n    // for testing purpose\n    unconstrained fn get_high_and_low(num: Field) -> pub Field {\n        item_lib::_get_high_and_low(num)\n    }\n\n    // for testing purpose\n    unconstrained fn is_valid_new_shuffled_num(num: Field, new_num: Field) -> pub Field {\n        item_lib::_is_valid_new_shuffled_num(num, new_num)\n    }\n\n    // for testing purpose\n    unconstrained fn get_slash(num: Field) -> pub Field {\n        item_lib::_get_slash(num)\n    }\n\n    unconstrained fn get_game() -> pub Game {\n        storage.game.read()\n    }\n\n    unconstrained fn check_result(call_num: Field, secret_num: Field) -> pub [Field; 2] {\n        num_lib::_check_result(call_num, secret_num)\n    }\n\n    unconstrained fn is_valid_nums(_num: Field) -> pub [u32; 3] {\n        num_lib::_is_valid_nums(_num)\n    }\n\n    // https://docs.aztec.network/misc/migration_notes#0240\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        note_type_id: Field,\n        preimage: [Field; SECRET_NUM_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (note_type_id == 1) {\n            note_utils::compute_note_hash_and_nullifier(FieldNote::deserialize_content, note_header, preimage)\n        } else {\n            // should derive storage slot for mapped values correctly\n            // https://github.com/AztecProtocol/aztec-packages/blob/2db2e2a3091e2552f8e8055d1bc07bd5016455ff/yarn-project/aztec-nr/aztec/src/state_vars/map.nr#L32C1-L32C1\n            note_utils::compute_note_hash_and_nullifier(SecretNumberNote::deserialize_content, note_header, preimage)\n        }\n    }\n}\n","path":"/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/main.nr"},"52":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__SIGNATURE_PAYLOAD}, hash::{hash_args, pedersen_hash}\n};\nuse dep::aztec::context::{PrivateContext, PublicContext, Context};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    message_hash: Field\n) {\n    let is_valid_selector = FunctionSelector::from_field(IS_VALID_SELECTOR);\n    let result = context.call_private_function(on_behalf_of, is_valid_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let is_valid_public_selector = FunctionSelector::from_field(IS_VALID_PUBLIC_SELECTOR);\n    let result = context.call_public_function(on_behalf_of, is_valid_public_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(\n    caller: AztecAddress,\n    target: AztecAddress,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash(\n        [caller.to_field(), target.to_field(), selector.to_field(), args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n}\n// docs:end:compute_authwit_message_hash\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"59":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/log.nr"},"63":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"64":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"65":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_COMMITMENT,\n    GENERATOR_INDEX__SILOED_COMMITMENT\n},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"66":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::Empty;\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/note_header.nr"},"73":{"source":"use crate::{\n    context::inputs::PublicContextInputs, messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            self.this_portal_address(),\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"75":{"source":"use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    max_non_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            max_non_revertible_side_effect_counter: 0,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            max_non_revertible_side_effect_counter: self.max_non_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_max_non_revertible_side_effect_counter(&mut self) {\n        assert(\n            self.max_non_revertible_side_effect_counter == 0, \"Already captured the non-revertible side effect counter\"\n        );\n        self.max_non_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) {\n        // docs:end:context_message_portal\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            self.this_portal_address(),\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(\n            item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n        );\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(\n            item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n        );\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"80":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"81":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    utils::arr_copy_slice,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"82":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"83":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"84":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"86":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"88":{"source":"use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"93":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"100":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm;\n\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context.nr"},"111":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState { context, storage_slot }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/public_state.nr"},"112":{"source":"use dep::std::option::Option;\n\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Singleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Singleton<T> {}\n\nimpl<Note> Singleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, Singleton>` type (for example), because the storage slot often also identifies an actor. e.g. \n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy. \n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/singleton.nr"},"114":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"117":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for ImmutableSingleton<T> {}\n\nimpl<Note> ImmutableSingleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, ImmutableSingleton>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"},"120":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/hasher.nr"},"126":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress, traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"127":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"128":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"131":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    contrakt::deployment_data::ContractDeploymentData, header::Header, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    max_non_revertible_side_effect_counter: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.max_non_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            max_non_revertible_side_effect_counter: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"133":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"134":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"135":{"source":"use crate::{\n    abis::{call_context::CallContext, side_effect::{SideEffect, SideEffectLinkedToNoteHash}},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"138":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"141":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"144":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"146":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"153":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/header.nr"},"157":{"source":"use crate::{\n    constants::{GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONSTRUCTOR},\n    hash::pedersen_hash, contract_class::ContractClassId, utils, grumpkin_point::GrumpkinPoint\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/address.nr"},"170":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each),\n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 2;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 187;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/constants.nr"},"174":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"180":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"181":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/utils.nr"},"182":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT,\n    NOTE_HASH_TREE_HEIGHT, NUM_FIELDS_PER_SHA256, GENERATOR_INDEX__SILOED_COMMITMENT,\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR,\n    GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__COMMITMENT_NONCE, GENERATOR_INDEX__UNIQUE_COMMITMENT,\n    GENERATOR_INDEX__FUNCTION_ARGS\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/hash.nr"},"187":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"191":{"source":"use crate::{\n    address::EthAddress, contract_class::ContractClassId,\n    constants::{CONTRACT_DEPLOYMENT_DATA_LENGTH, GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA},\n    grumpkin_point::GrumpkinPoint, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"},"193":{"source":"use dep::aztec::{\n    note::{note_header::NoteHeader, note_interface::NoteInterface}, hash::pedersen_hash,\n    context::PrivateContext\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl NoteInterface<FIELD_NOTE_LEN> for FieldNote {\n    fn serialize_content(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    fn deserialize_content(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(\n            false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\"\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'FieldNote')))\"\n        7010510110810078111116101\n    }\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote { value, header: NoteHeader::empty() }\n    }\n}\n\n","path":"/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/field-note/src/field_note.nr"}}}