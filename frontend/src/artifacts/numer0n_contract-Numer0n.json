{
    "noir_version": "0.23.0+5f5843e35052b9d3599b8ab4f7633db0a225e82f",
    "name": "Numer0n",
    "functions": [
        {
            "name": "_assert_is_player",
            "function_type": "Open",
            "is_internal": true,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "public_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "block_number",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "timestamp",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "coinbase",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fee_recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_player": [
                        {
                            "start": 34,
                            "end": 35
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 34
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_update_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "new_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_reads",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "current_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "prover_address",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                    "fields": [
                                        {
                                            "name": "inner",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "get_is_first",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0
                ]
            },
            "bytecode": "H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKCHYsr8AbFLUgLqvUbRK8PGIBR/ua5bZs2idVdh3Hdj4nJiJS9I+E9lA0RS2yABvvvkZ0cwweTZ3bICkFMdt9mehz8NNiuwGbgjrd+k+sOo15uqJDjgrgjuPlqv0eMOgJ8OH7zWFdg017ey2vD7CeBfbkgXxOx5641uWBvchTBmdpRDfH4Y8nzMXw7/ItoI78DPXgVWb4zy4k90z0Jl7u54L28yHimZb2TCX0jqF+ly8Fn3uR1yKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvqWN694OR4yL8wO5QTDop36/lXBrsd4MY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RIadSZk1AYKqCj7U7krciXcWy/+XPV9V88bDc8vPPbsF11a/oFr6xWZKoIAAA=",
            "debug_symbols": "zZjBasMwEET/RWdTtKuNVvKvlB7U1gWDcUJsCsX43+skjnNwIMQkzty0YoZ5B2kE6ky1/Uptua0bk3fGvm1M/t6ZZpfqw9y0ad+anHzQkJmi/j6uo/aZ+SmrwuQb6rO5nDie1eTtJB72r6id8igWcpM2aP+RDTwejEfBeAIYTwTjIYsGRGhAjAbk0IAEDQitpQmtpgmtpwmtqAmtqRmtqfnZTX1K4VVS3CopskrKY9pP7ZQS+cZBUS+jWPVyUERGII8GpGhAAQ0oggE5iwZEaED8SqBAcyCHBiRoQFevPXsdPc7K7NV18X6P2AUeWuDhBR53n2cYftO+TJ9VcfiSGcb2b3da9v8="
        },
        {
            "name": "check_result",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "call_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "secret_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "call_num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ],
                    "secret_num": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    2,
                    3
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "constructor",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "game_id",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "game_id": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "player": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333
                ]
            },
            "bytecode": "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",
            "debug_symbols": "7Z3bThw5EIbfpa8RcpUP5eJVVrmY3SUSEiJRQJEixLunG8YHaMeldCYNFL5KRrK76/vtsT9gpn0/XX/573B39eXmdrq4nwCmi3/up9uvh5vl5e3d4dvddGHOpsub/+d/H86mz1fXl9OFh4ezVTPwfGwIEXJTwFZbxGiPjdG6cmGItnVlsMGna4NDftb+09kE+E7rtnvV7YBS3Y7oj+t2rboxckg3YRPr6pc+fkOfsKEPbegTm32YU8LWeOiPBgZIkWHwriQGsdXa2DTKCA6E1vJ48PuuH80J6g8uVURGqj+CS++HCORzawqP5cDbKgf/vBwqo0skjVd0qfYYMbcNvnXheWzLRKgah9Z1Y6Jk4H5TxgTHdbnsNk0vqyRAjuldB/MbsN9WTsXtnAqYEHNBzHUuSzn+FctBwJflhL3LQczDhSH2Zw0Rp8YU0b5cMOgd197cim1ZIC0iCmJkHWMqx3pD9S3+utMhv3MAa3YHOK2dWjgBgLdUAKop/TRLLZ7iFuh6t7CnuAXlnxFsCNwfhlnkbA7W2cpajhW5/SsizPPIURDmUcC0oM/2VWYF+XYlkAvhqvWyB683XtMyF3CPW4X1I5dmLmHk0syFRi7NXOLIpZkLj1xauTgzcmnmAiOXZi44cmnmYkcuzVycplwc5lxc9XumJZeFVZXDCqyqvFRgVeWaAqsqfxRYVTlhn9Wr8jyBVZW7CayqfExgVeVYAqtTxVr+SuQir1h1eVOfVZc39Vl1eVOfVZc39Vl1eVOXNejypj6rLm/qs+rypj6rLm/qszpNrB5yIb7+UMKRVZU3CayqvElgVeVNAqsqbxJYVXlTn5VUeZPAqsqbBFZV3iSwqvImgdXtzxq9q0wuno7VGpM+zGmNC6W19b/790vyI5dmLmHk0syFRi7NXOLIpZkLj1xauUQzcmnmAiOXZi44cmnmYkcuzVzcyKWZiy7fpZhzqb4sueSysOpy2D6rLi/ts+pyzT6rLn/ssrIuJ+yz6vK8Pqsud+uz6vKxPqvTxAr5aRoWvFmxqvImgVWVNwmsqrxJYFXlTQKrKm/qs4JRJU4SrCpzkmBVqZMEq8qdIGZ3QsNrWPeRYHXZkwCrS58EWF3+JMDqEigBVpdB9WFBl0EJsLoMSoBVZVDoTS6b1gYFqgxKgnUfCVaVQUmwqgxKglVlUBKsKoOSYFUZlACLqgxKglVlUBLsRzIo3N+gfDl2ATzbl8+4Bdzfczz7XFIwxq9K2t9GgsnPP4Yw/wizKml/ZwhYZuk8B3FVEr29kvbff4M1+YH8wbr1wO2/SwaqpneEl49XB7v/XhaihVJSDKuS9t9xApsyl/j5d5UeS8JXKInzl8PJsFuVtP/qTVCe80PAq9X7FR4ITujyI8oJfeg3j/mkAcZ6P+T2+lIWYX7+JbNGa/loJz/C+XU44Y2HwzatD+xZCMfPa/+xscf6MCQbtoVDbzwc4nIMTSVQSzqflnNlztu/cgbOH/UGxrKaLKf6HPvBxn7N5dqHtBPWB1pFfDoj4ryZcjmbhG3ZFdK5EudxQx/+BdOxD0LVxz2d/HDe9uLujeZOfkunsKUTben0m+HNL74fvl0d/r2+XA4nnF/e/fj69N+Hnw=="
        },
        {
            "name": "add_num",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "secret_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "player": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ],
                    "secret_num": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    362,
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    404,
                    405,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    412,
                    413,
                    414,
                    415,
                    416,
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    454,
                    455,
                    456,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464
                ]
            },
            "bytecode": "",
            "debug_symbols": "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"
        },
        {
            "name": "is_valid_new_shuffled_num",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "new_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "new_num": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ],
                    "num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    2
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "get_player",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "player": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "types::player::Player",
                        "fields": [
                            {
                                "name": "player_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "is_player",
                                "type": {
                                    "kind": "boolean"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    1,
                    2
                ]
            },
            "bytecode": "H4sIAAAAAAAA/81XTW/bMAylP/LpzGnSdsAOG/gLCjnbbTtk23mX7bKrh6TDgDQGbAdr/3zRKiGbV8EtCkQuQqAVRVHk45MiySERBbSTCHQUtc2lNYdJ5jGWCRtwWttv0fswzr7yfjIfuzZI/DivSiIYCHx68qfjQbzH+jAn3q+DlZMGP1tPx3c9xswSyOvyifypdABP7B9P1lKdxsbtSqxb8rune8BP5PD0Bsa7wF2vBe4CyKuxtY8YX4o3PAK8be6Hvv+4s/Q+xgB47Tv8Yl1D0T3uR0OS30oM+YaQdyR64DGvjZVArQHgGAEe9fkg7Zh2e44a+En8r0/23Nmm+RBPcAR4Emq+axKHM7x/cOwH2FLR0W8setQQOwWb8jJumIs8pVDLXHRzmGx5wlwMfc03AhzjI8HTe0U8uG8Z+umR5D4RfU5+z/GJ/5pmtqapxOpKbMWv+WLw+SKtrrParehvSeePgJcp8DPxz8/2PXXaEj9nDj+K/xT4UZ/vDj9qR34mwM/U8cM6fN9biAXXXfOFoJ+Bn8V9Ln08J9868/FcPgebnrfqP5A61e7xXTDD9y+T3+8H/Q5ADlEYdHwDt/Cuy4a0309VXZT53+XPZb4IAJrCDR24AT2GHjqtq0cNNpL0WmYMNr0KOmALHVpwW6j/gBo+z+fSmsNke3ZHQIArSFL4hO97afUM/LXjnatVUbPh9f3/fLUq/i8XF4xjFV9tqpqrOi9rviyLK84uMO5nad9J+7Us8xv+t14sr7nY1Fxc8p9is15UOOnbSyfRHcLJR80DEQAA",
            "debug_symbols": "1drRasJAEAXQf9lnKTuzszs7+ZXSh7S1IIiKhkIR/70R49YSqVVsevOWhTs75yFcFdy6+fKlbmbLxcZVW+cf1FWPW7dZ1Yv9edPU68ZVFEXjxE0Xr/vn6Gk3cW+z+dRVsX3sxU2OYbNcokTxTJYopHI1CdtXPofd06QlZTyS4ZHIA5oI0MSApgBoEkBTBDQlQBNgixNgjRNgjzNgjzNgjzNgjzNgj/M9epy8hrIm+Euq5O2YVvI/X50sdVmlcHIxd/w4bn4aN1/Hzc/j5tuo+eFXn2T5Ap+4gFrcty39dFDuwnIiytqBCA3EaKCABhI0UEQDJTSQooEyGsjAQILW1ILW1ILW1ILW1ILW1ILW1ILW1ILW1ILW1ILW1BGtqeNfN/VhCw+yJQyyRQbZcp/2U1+2GF96UcrPQfGxZCV2oIQGUjRQRgMZGCh5NBChgXhwkFA+glj7oIAGEjRQRAMlNJCigTIayP4TFPo9pB4NRGigsy81J+1mgpfel23NN8zY9TPZ3zBDN8zwdTPt4b1ez+rn+XT/d7X22HysDo+7Tw=="
        },
        {
            "name": "_add_num",
            "function_type": "Open",
            "is_internal": true,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "public_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "block_number",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "timestamp",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "coinbase",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fee_recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_player": [
                        {
                            "start": 34,
                            "end": 35
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 34
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_update_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "new_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_reads",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "current_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "prover_address",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                    "fields": [
                                        {
                                            "name": "inner",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "get_round",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0
                ]
            },
            "bytecode": "H4sIAAAAAAAA/81UzU7DMAx20p+1dAiuHECWuKNMQtOO5RV4g6IWxGWVuk2Cl0cs4Khfs4jLwrRPiuw4Tux8cUxEpOgXCY1QNMWDyAJsvB+16OYYPJpFbg9JKYjZfmSiV+CnxXYNNgV5uvWvWHkas7ykQ44K4I7jxVr4b8CgJ8CH71fBugab9vZaXu9hPQvsyQPxnI5v4p4uD+xFnjK4Sy26OQ4/PGEshrmLN4c88hPkg6XMMM/OJPZM9Dpe7GVBY3+IeKeVvVMJb8eQv4uXgs+dyCuRzm6BtW8xB16cXwU61rj2/Eqa/v2IfWZV0FinHPFc/KsOf/WZ//4rF8KtxWbbD81b99w1rYLUUkgB01U0Td2ta7ChngRsRNNWlYLNlUioBLDN+SVV0iGlUf93QmGogI62W5E3Ip+Gofnk93XbfXC/23L/yi/9bt1u6Bt0dEF4FggAAA==",
            "debug_symbols": "zZfBCsIwEET/Zc9FsknMJv0V8RC1QqFUsUWQ0n+3RduLBWnRMrdsmGHeYTOQhorLMdb5pawobUhttpTuGqquseznqo63mlJ24iWhrDz1Z69cm9A5LzJKt9wmn3LWYVCzU6O4u59QG9FvsWUzar20+6TjcWA8AsbjwXgCGA8rNCBGA9JoQAYNyKIBobU0o9U0o/U0oxU1ozW1Rmtq/e+mfqXoVVLMKil2lZTftJ+oMSXoL4siZlgUsTxqrX0DOTQgQQPyaEABDMgoNCBGA5p89toNOEbZjwo3boFHFnj8Ak+Y77Fqnqcb7vGWx0OR9f/7bqwf19exfQI="
        },
        {
            "name": "use_change",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "new_secret_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "new_secret_num": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ],
                    "player": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    403,
                    404,
                    405,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    412,
                    413,
                    414,
                    415,
                    416,
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    454,
                    455,
                    456,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502,
                    503,
                    504,
                    505,
                    506,
                    507,
                    508,
                    509,
                    510,
                    511,
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    533,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    603,
                    604,
                    605,
                    606,
                    607,
                    608,
                    609
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "use_shuffle",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "new_secret_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "new_secret_num": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ],
                    "player": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    454,
                    455,
                    456,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501,
                    502,
                    503,
                    504,
                    505,
                    506,
                    507,
                    508,
                    509,
                    510,
                    511,
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    533,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    603,
                    604,
                    605,
                    606,
                    607,
                    608,
                    609,
                    610,
                    611,
                    612,
                    613,
                    614,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621,
                    622,
                    623,
                    624,
                    625,
                    626,
                    627,
                    628,
                    629,
                    630,
                    631,
                    632,
                    633,
                    634
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "get_result",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "round",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "player": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ],
                    "round": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "types::result::Result",
                        "fields": [
                            {
                                "name": "call_num",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "eat",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "bite",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "item",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "item_result",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "join_game",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "game_id",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "game_id": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "player": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348
                ]
            },
            "bytecode": "",
            "debug_symbols": "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"
        },
        {
            "name": "get_secret_num",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "player": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    1
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "is_valid_new_changed_num",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "new_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "new_num": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ],
                    "num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    2
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "get_winner",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0
                ]
            },
            "bytecode": "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",
            "debug_symbols": "1d3drlXneYbhc2E7qub78/28OZWqG26bSpGiNEqiSlXkc++wajBSwI4JxhdbNlPzYzxzATcs1riYf3vzh//+j2/++vv//uNf3vz2b29e/7Le/PZf//bmL3/65o/fffsvf/3mz39989vXb9787o//+fz329+8+a/f/+F3b3674tvf/N3TdsX3T9y93j01Xh96bpzz/XPz9cN3W/Htv/3mWbGJFYdYcYkVQ6yIlzEjjBlpzChjRhszjIKGkdAwGhpGRMOoaBoVTaOiaVQ0jYqmUdE0KppGRdOoaBoVTaOiZVS0jIqWUdEyKlpGRcuoaBkVLaOiZVS0jIq2UdE2KtpGRduoaBsVbaOibVS0jYq2UdE2KrqMii6josuo6DIquoyKLqOiy6joMiq6jIouo6LbqOg2KrqNim6jotuo6Ea+Pm9UdBsV3UZFt1HRY1T0GBU9RkWPUdFjVPQYFT3IbU5GRY9R0WNU9BoVvUZFr1HRa1T0GhW9RkWvUdGL3C1qVPQaFR2jomNUdIyKjlHRMSo6RkXHqOgYFR3kpnvlrnvktvsXct/9C7nx/oXcef8yUhov5N77F3Lz/Qu5+/6F3H7/QnrKMCakpwpkUiSTQpkUy6RgJkUzKZwJ8UyBgKZARFMgpCkQ0xQIagpENQXCmgJxTYHApkBkUyC0KRDbFAhuCkQ3BcKbAvFNgQCnQIRTIMQpEOMUCHIKRDkFwpwCcU6BQKdApFMg1CkQ6xQIdgpEOwXCnQLxToGAp0DEUyDkKRDzFAh6CkQ9BcKeAnFPgcCnQORTIPQpEPsUCH4KRD8Fwp8C8U+BAKhABFQgBCoQAxUIggpEQQXCoAJxUIFAqEAkVCAUKhALFQiGCkRDBcKhAvFQgYCoQERUICQqEBMVCIoKREUFwqICcVGBwKhAZFQgNCoQGxUIjgpERwXCowLxUYn4qER8VCI+KhEflS+jp4n4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEel8n5Pyhs+Me/4hPRUec8n5U2flHd9Ut72SXnfJ+WNnxAflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCE+qhAfVYiPKsRH1cvoaSE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEJ8VCE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEJ8VCE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEJ8VCE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEZ8VCM+qhEf1YiP6pfR00Z8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUQvxUQvxUQvxUQvxUetl9HQhPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmohPmojPmojPmojPmojPmq/jJ5uxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEdtxEcdxEcdxEcdxEcdxEedl9HTg/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/iog/ioi/ioi/ioi/ioi/io+zJ6ehEfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREfdREf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1YrBasVgtWKwWjFYrRisVgxWKwarFYPVisFqxWAtxWAtxWAtxWAtxWCtF1LWpRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRispRisrRisrRisrRisrRis/ULKuhWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDtRWDdRSDdRSDdRSDdRSDdV5IWY9isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5isI5i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"
        },
        {
            "name": "get_is_finished",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0
                ]
            },
            "bytecode": "H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKgHYsr8AbFLUgLqvUbRK8PGIBR/ua5bZs2idVdh3Hdj4nJiJS9I+E9lA0RS2yABvvvkZ0cwweTZ3bICkFMdt9mehz8NNiuwGbgjrd+k+sOo15vqJDjgrgjuPlqv0eMOgJ8OH7zWFdg017ey2vD7CeBfbkgXxOx5641uWBvchTBmdpRDfH4Y8nzMXw7/ItoI78DPXgVWb4zy4k90z0Jl7up4L28yHimZb2TCX0jqF+ly8Fn3uR1yKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvqWN694OR4yL8wO5QTDop36/lXBrsd4MY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RIadSZk1AYKqCj7U7krciXcWy/+XPV9V88bDc8vPPbsF11a/oFCNKONaoIAAA=",
            "debug_symbols": "zZjRaoNAEEX/ZZ6l7Mysu66/UvqwbS0IYkKUQhD/PSYxJpBAiCTmvu3IucwB9Qp2VK1+Yluu6obyjsxHSvlnR8061vu5aeOmpZy98Sahov49nLPQJ/RXVgXlKffJNc4STjQ7M8HD9Ru0ehlhyzqxme+/ksHHgfl4MJ8MzCeA+bBBE2I0IUETUjQhiyaE1tKMVtOM1tOMVtSM1tSC1tTy6qY+bpFFtugiW+wiW57Tfmeag9x5UFxIR9gbO7HWjkIOTcijCWVoQgFMSA2aEKMJyTuFWK6FFE3IogndfO3F+TGjF7f59NXV8HjGmhkZnpGRGRl9LDMM/3FTxu+q2P+SGcZ2uz4e+x0="
        },
        {
            "name": "get_target",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "target_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ],
                    "target_num": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    2
                ]
            },
            "bytecode": "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",
            "debug_symbols": "zd3dqmRHmt/he9FxY9Yb8X5E9K0YH8h2GxqanmG6MZim791rsFQamO3RwNSkniOpksyKf0m7fjvJXM/Ov/3wp3/4Hz/+9Y//8Oe//PD7v/3w/Jf54ff/9W8//OUff/zzP//6L3/98Z/++sPvn9/98Ic//8/3n3//3Q//649/+sMPv6/4++/+1d16x0937Kxvd43nq/vGzE/3Xc8vv+2Ov/+3370rDrHiEiviMWaEMWMZM7YxI40ZZcxoY4bR0DAiGkZFl1HRZVR0GRVdRkWXUdFlVHQZFV1GRZdR0WVUdBsV3UZFt1HRbVR0GxXdRkW3UdFtVHQbFd1GRdOoaBoVTaOiaVQ0jYqmUdE0KppGRdOoaBoVLaOiZVS0jIqWUdEyKlpGRcuoaBkVLaOiZVS0jYq2UdE2KtpGRduoaBsVbaOibVS0jYq2UdExKjpGRceo6BgVHaOiY1R0jIqOUdExKjpGRY9R0WNU9BgVPUZFj1HRY1T0GBU9yNWiRkWPUdFrVPQaFb1GRa9R0WtU9BoVvUZFr1HRi1x0r1x1j1x2/yDX3T/IhfcPcuX9Y6Q0HuTa+we5+P5Brr5/kMvvH6SnDGNCeqpAJkUyKZRJsUwKZlI0k8KZEM8UCGgKRDQFQpoCMU2BoKZAVFMgrCkQ1xQIbApENgVCmwKxTYHgpkB0UyC8KRDfFAhwCkQ4BUKcAjFOgSCnQJRTIMwpEOcUCHQKRDoFQp0CsU6BYKdAtFMg3CkQ7xQIeApEPAVCngIxT4Ggp0DUUyDsKRD3FAh8CkQ+BUKfArFPgeCnQPRTIPwpEP8UCIAKREAFQqACMVCBIKhAFFQgDCoQBxUIhApEQgVCoQKxUIFgqEA0VCAcKhAPFQiICkREBUKiAjFRgaCoQFRUICwqEBcVCIwKREYFQqMCsVGB4KhAdFQgPCoQH7UQH7UQH7UQH7UQH7Ueo6cL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VEL8VFL+bwn5QOfmE98QnqqfOaT8qFPyqc+KR/7pHzuk/LBT4iPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiPWoiP2oiP2oiP2oiP2oiP2o/R0434qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qI34qER8VCI+KhEflYiPysfoaSI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qER8VCI+KhEflYiPSsRHJeKjEvFRifioRHxUIj4qER+ViI9KxEcl4qMS8VGJ+KhEfFQiPioRH5WIj0rERyXioxLxUYn4qEJ8VCE+qhAfVYiPqsfoaSE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEJ8VCE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrERxXiowrxUYX4qEJ8VCE+qhAfVYiPKsRHFeKjCvFRhfioQnxUIT6qEB9ViI8qxEcV4qMK8VGF+KhCfFQhPqoQH1WIjyrE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VTFYoRisUAxWKAYrFIMVisEKxWCFYrBCMVihGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGaykGaykGaykGaykGaz1IWZdisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisJZisLZisLZisLZisLZisPaDlHUrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBmsrBisVg5WKwUrFYKVisPJBypqKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioG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"
        },
        {
            "name": "use_attack_item",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "target",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "item_type",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_target_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_target_num": [
                        {
                            "start": 38,
                            "end": 39
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "item_type": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ],
                    "target": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    752,
                    753,
                    754,
                    755,
                    756,
                    757,
                    758,
                    759,
                    760,
                    761,
                    762,
                    763,
                    764,
                    765,
                    766,
                    767,
                    768,
                    769,
                    770,
                    771,
                    772,
                    773,
                    774,
                    775,
                    776,
                    777,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    805,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    818,
                    819,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835,
                    836,
                    837,
                    838,
                    839,
                    840,
                    841,
                    842,
                    843,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    854,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    861,
                    862,
                    863,
                    864,
                    865,
                    866,
                    867,
                    868,
                    869,
                    870,
                    871,
                    872,
                    873,
                    874,
                    875,
                    876,
                    877,
                    878,
                    879,
                    880,
                    881,
                    882,
                    883,
                    884,
                    885,
                    886,
                    887,
                    888,
                    889,
                    890,
                    891,
                    892,
                    893,
                    894,
                    895,
                    896,
                    897,
                    898,
                    899,
                    900,
                    901,
                    902,
                    903,
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    911,
                    912,
                    913,
                    914,
                    915,
                    916,
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    933,
                    934,
                    935,
                    936,
                    937,
                    938,
                    939,
                    940,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947,
                    948,
                    949,
                    950,
                    951,
                    952,
                    953,
                    954,
                    955,
                    956,
                    957,
                    958
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "_record_result",
            "function_type": "Open",
            "is_internal": true,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "public_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "block_number",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "timestamp",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "coinbase",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fee_recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_caller",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_call_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_eat",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_bite",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_bite": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ],
                    "_call_num": [
                        {
                            "start": 35,
                            "end": 36
                        }
                    ],
                    "_caller": [
                        {
                            "start": 34,
                            "end": 35
                        }
                    ],
                    "_eat": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 34
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_update_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "new_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_reads",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "current_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "prover_address",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                    "fields": [
                                        {
                                            "name": "inner",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "get_game",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "types::game::Game",
                        "fields": [
                            {
                                "name": "players",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "is_number_set",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "boolean"
                                    }
                                }
                            },
                            {
                                "name": "started",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "finished",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "round",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "is_first",
                                "type": {
                                    "kind": "boolean"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ]
            },
            "bytecode": "H4sIAAAAAAAA/+1ZS08UQRDueezscxRUFJBHA8vTy4CIHDQZoye9Gb1qMKByYZMFEvEneffvGam1vuy3zYSsS48SYyXL1FRXV331Ve9sT1M1xgTml0SmL4leZSwke+DYQpoX67XixKief76rXqNY9vyTq55dRbaz3YQBOCL525S/4T9/JnGbvuNm2ZbETf3HzaSHN6hPlvI0iaubqgf+cm9ybqwn5IE9Jn3c9OUm6ViDwN3Sj+vHesOZk9J4q6Bu67nulLBYukc++e4khKOEtbr1f60OLb+9VudNX3jd4dH0r63VO6pLH2ItMiFbRW1VsiVxHztsVbXV1TYmfxw/ueI7/8NfrTtcZ0C5opJ4NQ6vkIj4cP2aNB6SLXTmCs/faLxSMCcpyAe9Qjas2aRgLvNUoVpy1bOrSY8nzmXpHvlahCP5A3h4e2HNxf3O386N71juL3dvX1PzX9Ou1FSn3lnCj3wx+TzVK549sIvw2hdpES91ilnzz89mKb/Ryk/T4Qf4G8QPfF44/MDO/NSIn7rjx3Xkxu+eoFUSP6nDT4PqAz/weeXwkxbww/Objh/X4XF/kbm/s9x35AtJT8mPf/tzf5geStwxjWWN355hL4+eAT/yxeTzVq/w4feAyBkTftz3Ba7Dd88YC+8RkS8kfZz8BNNtvc/9YdqWuNiLWeO3ZxMaCz0DfuSLyee9GewL7CLoGeZLz245flyH754xloByI19I+gT5CaZ7ep/7w/RI4k5qLGv89mxKY6FnwI98Mfkc6hU9g10EPcN86dldx4/r8N0zxhJQbuQLSZ8iP8F0X+9zf5h2JO6MxrLGb89mNRZ6BvzIF5PPsV7RM9hF0DPMl55NO35cR2681fFY4s6VxM+8ww/wzxE/8Pnq8DNfwM8M8TPr+HEdvtc0Y+G+I19I+jz5CaZF453braYZfA9FPhYeXySOFvzj2SypzkxiLBXUhFwpjfN71VIJNQaUF7FxzxiHxVu/Bngld9t/7t765Nwil63PdslclFRnb30uUx2LTj0pjfP533IJNQaUF7FxzxiHxTt2DfA2zWDfYMP4AtlWnJrEtqr6EtnWVOdz0HXVJ8m2ofo02R6oPke2UPU22aKCOnD+s0I2PLNWyYZzsTWy4ZxknWw4G9ggG54pwFk3g+eiHs9gd2uE1XqMy1xBLnt2lH2O2DD99/vjk05379PB64O9/YCgxQSB4QZmEDrGQ7KxHhXYjBlcFjHZsCz4CDh0aOHlCP+6uUip1+91ZIqlRjr+Jx1pUfg/WtVcJFLkiV7xzvCs2907s4dH+wdfbOf0xHY+2g+d06P9Y570fJRJL0eZ9GaUSe9GmfR5lEndUSadDTvJ/AT3Pp+klSAAAA==",
            "debug_symbols": "zdvBitswEMbxd9E5FI80o5HyKqUHt00hELLLJhRKyLs36a7MggVLQ2v/b7aZ0fwO5iOGySUcnr6N5/3T8RS2lzB8SjlsP1/C6Xk83h+czuPLOWzFq9om7I7f/1xnvW7Cj/1hF7Ym1828XGJt1ZKHqfj2vFOdPL4Vq6Sptvj1y+YOchqo0EAVBtKBBhIaKNJAiQZSGshoIFpSKy2plZbUSktqoyW10ZLa/ndSv05Ji0zRRabYIlP+Tfr5ME2p8YMXRc3bi5LzVKv6BnIaqNBAFQbKAw0kNFCkgdLyoFwayH0OUhrIaKBMAzkNVGigCgP58klt0opN6hwkNFCkgRINpDSQ0UCZBvI1QbGTQ4UGqjBQWSGpp09FS2UOEhoo0kCJBlIayGigTAP5miCdfyiWQgNVGKgun9TZ2tH53cETSGigSAMlGkhpIKOBMg3ka4I8zkGFBqowkAwrRHVtR/ugHZHgRBEnSjiR4kSGE2WcyNcUSS+PCk5UaSJZPrM9tU0GV+mIBCeKOFHCiRQnMpwo40TLZ7ZnbSJPHVHBiSpNFAecSHCiiBMlnEjXFJVOHkXDiTJN1F8yiLntI6V3P87beqj0FwE+aoqPNKVHmvSRJvu7ptvNz/FlP3497O7/Irrdnn89v15efwM="
        },
        {
            "name": "_record_item_result",
            "function_type": "Open",
            "is_internal": true,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "public_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "block_number",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "timestamp",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "coinbase",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fee_recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_caller",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_item_type",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_item_result",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_caller": [
                        {
                            "start": 34,
                            "end": 35
                        }
                    ],
                    "_item_result": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ],
                    "_item_type": [
                        {
                            "start": 35,
                            "end": 36
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 34
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_update_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "new_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_reads",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "current_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "prover_address",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                    "fields": [
                                        {
                                            "name": "inner",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "is_valid_nums",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                        }
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    1,
                    2,
                    3
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "_add_player",
            "function_type": "Open",
            "is_internal": true,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "public_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "block_number",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "timestamp",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "coinbase",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "fee_recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_player",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "_player_id",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "_player": [
                        {
                            "start": 34,
                            "end": 35
                        }
                    ],
                    "_player_id": [
                        {
                            "start": 35,
                            "end": 36
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 34
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_update_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "new_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_storage_reads",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::storage_read::StorageRead",
                                        "fields": [
                                            {
                                                "name": "storage_slot",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "current_value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "prover_address",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                    "fields": [
                                        {
                                            "name": "inner",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "get_is_started",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [],
                "param_witnesses": {},
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    0
                ]
            },
            "bytecode": "H4sIAAAAAAAA/81UzU7DMAx20p+13RBcOYB84pxKE9qxvAJvUNSCuKxSt0nw8ogFHO1rltuyaZ9U2XUc2/mcmIhI0T8SOkDRFLXIAmy8/xrRzSlYmjq3QVIKYrb/MtHn4KfFdgc2BXW69Z9YdRrzfEPHHBXAHcfLVfs9YNAT4MP3m8O6Bpv29lpen2A9C+zJA/mcjj1xrcsDe5GnDM7SiG5Owx9PmIvh3+VbQB35BerBq8zwn11J7pnoTbzcy4IO8yHimVb2TCX0jqF+ly8Fn0eRtyKd3QLvvsUCeCkhpour4p3DKK8W5fXEQoNegp99T5Xni2+6gj04jyLOvpWN694OR4yL8wO5QTDo536/lXBrsdkOY/vRv/Ztp6C0FErAchVNS8e2UkBPAjai6fhMweauLY5e7dGCI9r5l3RMadSZk1AYKqCj7UHkvciXcWy/+XPd9V887LY8vPPbsFt3G/oFe27a8KoIAAA=",
            "debug_symbols": "zZjNaoQwFIXf5a6l5P6YGF+ldJG2FgRxhlEKRXz3Oh1rFw6UkdY5u1w5x/MtkhPIQM3hJfX1oe2oHMg95FQ+DtQdU3ueuz6deirZx2AZVe3r1zrqmNFb3VRU5jxmazlL/Fazd4t4+n5FrUFmsfHPj4swPmUTjwfjCWA8BRhPBONhhwbEaECCBqRoQIYGhNbSjFbTjNbTjFbUjNbUgtbU8t9NfUmRXVJ0lxTbJeVv2i+4JSXKLxvF5/ks9t4WrdkM5NGAAhpQgQYUwYDUoQExGpDcEyjIGkjRgAwN6OqxFx9mjzpb3boab/eY2+DhDR7Z4NHbPNPwnk51em6q85PMNPYfx8ty/AQ="
        },
        {
            "name": "get_slash",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    1
                ]
            },
            "bytecode": "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",
            "debug_symbols": ""
        },
        {
            "name": "compute_note_hash_and_nullifier",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "contract_address",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "nonce",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "storage_slot",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "note_type_id",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "preimage",
                        "type": {
                            "kind": "array",
                            "length": 2,
                            "type": {
                                "kind": "field"
                            }
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "contract_address": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ],
                    "nonce": [
                        {
                            "start": 1,
                            "end": 2
                        }
                    ],
                    "note_type_id": [
                        {
                            "start": 3,
                            "end": 4
                        }
                    ],
                    "preimage": [
                        {
                            "start": 4,
                            "end": 6
                        }
                    ],
                    "storage_slot": [
                        {
                            "start": 2,
                            "end": 3
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "array",
                        "length": 4,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    6,
                    7,
                    8,
                    9
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        },
        {
            "name": "get_high_and_low",
            "function_type": "Unconstrained",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "num": [
                        {
                            "start": 0,
                            "end": 1
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    1
                ]
            },
            "bytecode": "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",
            "debug_symbols": "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jfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfiojfioRnxUIz6qER/ViI/ql9HTRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRjfioRnxUIz6qER/ViI9qxEc14qMa8VGN+KhGfFQjPqoRH9WIj2rERzXioxrxUY34qEZ8VCM+qhEf1YiPasRHNeKjGvFRB/FRB/FRB/FRB/FR52X09CA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iA+6iI+6iI+6iI+6iI+6r6Mnl7ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ER13ERw3iowbxUYP4qEF81LyMng7iowbxUYP4qEF81CA+ahAfNYiPGsRHDeKjBvFRg/ioQXzUID5qEB81iI8axEcN4qMG8VGD+KhBfNQgPmoQHzWIjxrERw3iowbxUYP4qEF81CA+ahAfNYiPGsRHDeKjBvFRg/ioQXzUID5qEB81iI8axEcN4qMG8VGD+KhBfNQgPmoQHzWIjxrERw3iowbxUYP4qEF81CA+ahAfNYiPGsRHDeKjBvFRg/ioQXzUID5qEB81iI8axEcN4qMG8VGD+KhBfNQgPmoQHzWIjxrERw3iowbxUYP4qEF81CA+ahAfNYiPGsRHDeKjBvFRg/ioQXzUID5qEB81iI8axEcN4qMG8VGD+KhBfNQgPmoQHzWIj4oXAqSeIUZRnyFGUp8hRlOfIUZUnyFGVZ8hRlafIUZXnyFGWJ8hSlkRKvV8jFJWBEs9H6OUFeFSz8coZUXA1PMxSlkRMvV8jFJWBE09Q5SyImzqGaKUFYFTzxClrAideoYoZUXw1DNEKSvCp54hSlkRQPUMUcqKEKpniFJWBFE9Q5SyIozqGaKUFYFUzxClrAileoYoZUUw1TNEKSvCqZ4hSlkRUPUMUcqKkKpniFJWBFU9Q5SyIqzqGaKUFYFVzxClrAiteoYoZUVw1TNEKSvCq54hSlkRYPUMUcqKEKtniFJWBFk9Q5SyIszqGaKUFYFWzxClrAi1eoYoZUWw1TNEKSvCrZ4hf1dZd38dcl5/55C/D1x95pBQhixlSCpDShmylSGtDDnKkKsMUco6SllHKesoZR2lrKOUdZSyjlLWUco6SlkHKWu8kLLGCylrvJCyxgsp6/P/W5UhSFnjhZQ1XkhZ44WUNV5KWUMpayhlDaWsoZQ1lLKGUtZQyhpKWUMpayhlXUpZl1LWpZR1KWVdSlmXUtallHUpZV1KWZdS1lTKmkpZUylrKmVNpayplDWVsqZS1lTKmkpZSylrKWUtpayllLWUspZS1lLKWkpZSylrKWXdSlm3UtatlHUrZd1KWbdS1q2UdStl3UpZt1LWVsraSllbKWsrZW2lrK2UtZWytlLWVsraSlmPUtajlPUoZT1KWY9S1qOU9ShlPUpZj1JWxWCFYrBCMVihGKxQDFYoBisUgxWKwQrFYIVisEIxWKEYrFAMVigGKxSDFYrBCsVghWKwQjFYoRisUAzWUgzWUgzWUgzWUgzWeiFlXYrBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBWorBSsVgpWKwUjFYqRisfCFlTcVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDlYrBSsVgpWKwUjFYqRisVAxWKgYrFYOVisFKxWClYrBSMVipGKxUDFYqBisVg5WKwUrFYKVisFIxWKkYrFQMVioGKxWDVYrBKsVglWKwSjFY9ULKWorBKsVglWKwSjFYpRisUgxWKQarFINVisEqxWCVYrBKMVilGKxSDFYpBqsUg1WKwSrFYJVisEoxWKUYrFIMVikGqxSDVYrBKsVglWKwSjFYpRisUgxWKQarFINVisEqxWCVYrBKMVilGKxSDFYpBqsUg1WKwSrFYJVisEoxWKUYrFIMVikGqxSDVYrBKsVglWKwSjFYpRisUgxWKQarFINVisEqxWCVYrBKMVilGKxSDFYpBqsUg1WKwSrFYJVisEoxWKUYrFIMVikGqxSDVYrBKsVglWKwSjFYpRisUgxWKQarFINV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"
        },
        {
            "name": "call_num",
            "function_type": "Secret",
            "is_internal": false,
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "storage_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_delegate_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "is_contract_deployment",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::header::Header",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "body_hash",
                                                "type": {
                                                    "kind": "array",
                                                    "length": 2,
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "contract_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "contract_deployment_data",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "initialization_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "contract_class_id",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address_salt",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "portal_contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "private_global_variables",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "target",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "call_num",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "param_witnesses": {
                    "call_num": [
                        {
                            "start": 37,
                            "end": 38
                        }
                    ],
                    "inputs": [
                        {
                            "start": 0,
                            "end": 36
                        }
                    ],
                    "target": [
                        {
                            "start": 36,
                            "end": 37
                        }
                    ]
                },
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "storage_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_delegate_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "is_contract_deployment",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "start_side_effect_counter",
                                            "type": {
                                                "kind": "integer",
                                                "sign": "unsigned",
                                                "width": 32
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "return_values",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "max_non_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 32,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_key_validation_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest",
                                        "fields": [
                                            {
                                                "name": "public_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                    "fields": [
                                                        {
                                                            "name": "x",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "y",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "secret_key",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey",
                                                    "fields": [
                                                        {
                                                            "name": "high",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "low",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_commitments",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffect",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "new_nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "public_call_stack_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "new_l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "encrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "unencrypted_logs_hash",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            },
                            {
                                "name": "encrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "unencrypted_log_preimages_length",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::header::Header",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "body_hash",
                                            "type": {
                                                "kind": "array",
                                                "length": 2,
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "contract_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "contract_deployment_data",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::contrakt::deployment_data::ContractDeploymentData",
                                    "fields": [
                                        {
                                            "name": "public_key",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint",
                                                "fields": [
                                                    {
                                                        "name": "x",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "y",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "initialization_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "contract_class_id",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::contract_class::ContractClassId",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address_salt",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "portal_contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::EthAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "chain_id",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "version",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                },
                "return_witnesses": [
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    603,
                    604,
                    605,
                    606,
                    607,
                    608,
                    609,
                    610,
                    611,
                    612,
                    613,
                    614,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621,
                    622,
                    623,
                    624,
                    625,
                    626,
                    627,
                    628,
                    629,
                    630,
                    631,
                    632,
                    633,
                    634,
                    635,
                    636,
                    637,
                    638,
                    639,
                    640,
                    641,
                    642,
                    643,
                    644,
                    645,
                    646,
                    647,
                    648,
                    649,
                    650,
                    651,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657,
                    658,
                    659,
                    660,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    667,
                    668,
                    669,
                    670,
                    671,
                    672,
                    673,
                    674,
                    675,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    682,
                    683,
                    684,
                    685,
                    686,
                    687,
                    688,
                    689,
                    690,
                    691,
                    692,
                    693,
                    694,
                    695,
                    696,
                    697,
                    698,
                    699,
                    700,
                    701,
                    702,
                    703,
                    704,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746
                ]
            },
            "bytecode": "",
            "debug_symbols": ""
        }
    ],
    "events": [],
    "file_map": {
        "3": {
            "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}",
            "path": "std/collections/bounded_vec.nr"
        },
        "31": {
            "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
            "path": "std/option.nr"
        },
        "44": {
            "source": "use dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nstruct Game {\n    players: [Field;2],\n    is_number_set: [bool;2],\n    started: bool, // true if both players are added and secret numers are set.\n    finished: bool,\n    round: Field,\n    is_first: bool\n}\n\nglobal GAME_SERIALIZED_LEN: Field = 8;\n\nimpl Deserialize<GAME_SERIALIZED_LEN> for Game {\n    fn deserialize(fields: [Field; GAME_SERIALIZED_LEN]) -> Self {\n\n        let _players = [fields[0], fields[1]];\n        let _is_number_set = [fields[2] as bool, fields[3] as bool];\n\n        Game { \n          players: _players,\n          is_number_set: _is_number_set,\n          started: fields[4] as bool, \n          finished: fields[5] as bool, \n          round: fields[6], \n          is_first: fields[7] as bool\n        }\n    }\n}\n\nimpl Serialize<GAME_SERIALIZED_LEN> for Game {\n    fn serialize(self) -> [Field; GAME_SERIALIZED_LEN] {\n        [\n        self.players[0],\n        self.players[1],\n        self.is_number_set[0] as Field,\n        self.is_number_set[1] as Field,\n        self.started as Field, \n        self.finished as Field, \n        self.round, \n        self.is_first as Field\n    ]\n    }\n}",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/game.nr"
        },
        "45": {
            "source": "// use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nglobal PLAYER_SERIALIZED_LEN: Field = 2;\n\nstruct Player {\n    player_id: Field,\n    is_player: bool\n}\n\nimpl Deserialize<PLAYER_SERIALIZED_LEN> for Player {\n    fn deserialize(fields: [Field; PLAYER_SERIALIZED_LEN]) -> Self {\n        Player { player_id: fields[0], is_player: fields[1] as bool}\n    }\n}\n\nimpl Serialize<PLAYER_SERIALIZED_LEN> for Player {\n    fn serialize(self) -> [Field; PLAYER_SERIALIZED_LEN] {\n         [self.player_id, self.is_player as Field ]\n    }\n}\n",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/player.nr"
        },
        "46": {
            "source": "use dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nglobal RESULT_SERIALIZED_LEN: Field = 5;\n\nstruct Result {\n    call_num: Field,\n    eat: Field,\n    bite: Field,\n    item: Field,\n    item_result: Field\n}\n\nimpl Result {\n    pub fn new(call_num: Field, eat: Field, bite: Field, item: Field, item_result: Field) -> Self {\n        Result { call_num, eat, bite, item, item_result }\n    } \n}\n\nimpl Deserialize<RESULT_SERIALIZED_LEN> for Result {\n    fn deserialize(fields: [Field; RESULT_SERIALIZED_LEN]) -> Self {\n    Result { \n        call_num: fields[0], \n        eat: fields[1], \n        bite: fields[2],\n        item: fields[3],\n        item_result: fields[4] \n    }\n    }\n}\n\nimpl Serialize<RESULT_SERIALIZED_LEN> for Result {\n    fn serialize(self) -> [Field; RESULT_SERIALIZED_LEN] {\n    [self.call_num, self.eat, self.bite, self.item, self.item_result]\n    }\n}\n",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/result.nr"
        },
        "47": {
            "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_consumption,\n    },\n    protocol_types::address::AztecAddress,\n    oracle::{\n        nullifier_key::get_nullifier_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal SECRET_NUM_NOTE_LEN: Field = 2;\n\nstruct SecretNumberNote {\n    secret_num: Field,\n    owner: AztecAddress, \n    header: NoteHeader,\n}\n\nimpl SecretNumberNote {\n    pub fn new(secret_num: Field, owner: AztecAddress) -> Self {\n        SecretNumberNote {\n            secret_num,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n}\n\nimpl NoteInterface<SECRET_NUM_NOTE_LEN> for SecretNumberNote {\n    fn serialize_content(self) -> [Field; SECRET_NUM_NOTE_LEN] {\n        [self.secret_num, self.owner.to_field()]\n    }\n\n    fn deserialize_content(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> Self {\n        SecretNumberNote { secret_num: serialized_note[0], owner:AztecAddress::from_field(serialized_note[1]), header: NoteHeader::empty() }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: SecretNumberNote) -> NoteHeader {\n        note.header\n    }\n\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // 0\n        8310199114101116781171099810111478111116101\n    }\n}",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/secret_num_note.nr"
        },
        "49": {
            "source": "use dep::aztec::{\n    state_vars::{\n            singleton::Singleton,\n    },\n};\nuse crate::types::{\n    secret_num_note::SecretNumberNote,\n};\n\nuse crate::num_lib;\n\nglobal ITEM_HIGH_LOW: Field = 1; // see buttom in this file\nglobal ITEM_SLASH: Field = 2; // 2 ~ 9\nglobal ITEM_TARGET: Field = 3; // 0 or 1, 2, 3\nglobal ITEM_CHANGE: Field = 4; // 1, 2, 3\nglobal ITEM_SHUFFLE: Field = 5; // nothing\n\nglobal LOW: Field = 1;\nglobal HIGH: Field = 2;\nglobal CRACK: u32 = 5;\n\n// high&low result\n// global LOW_lOW_HIGH: Field = 112; \n// global LOW_HIGH_HIGH: Field = 122; \n// global LOW_HIGH_lOW: Field = 121; \n// global HIGH_HIGH_LOW: Field = 221; \n// global HIGH_LOW_LOW: Field = 211; \n// global HIGH_lOW_HIGH: Field = 212; \n\nfn get_high_and_low(_note: Singleton<SecretNumberNote>) -> Field {\n    let note = _note.get_note(true);\n    _get_high_and_low(note.secret_num)\n}\n\npub fn _get_high_and_low(_num:Field) -> Field {\n    let mut num = _num as u32;\n    let mut modulus: u32 = 100;\n    let mut result: Field = 0;\n\n    for i in 0..3 {\n        if ((i == 0) & (num < 100)) {\n            result += (LOW * modulus as Field);\n        } else {\n           let subtractor = num - (num % modulus);\n           let crack = CRACK * modulus;\n\n           if ( subtractor < crack ) {\n            // low\n            result += (LOW * modulus as Field);\n           } else {\n            // high\n            result += (HIGH * modulus as Field);\n           }\n\n            num = num - subtractor;\n\n        }\n\n        modulus = modulus / 10;\n    }\n\n    result\n}\n\n\n\nfn get_slash(_note: Singleton<SecretNumberNote>) -> Field {\n    let note = _note.get_note(true);\n    _get_slash(note.secret_num)\n}\n\npub fn _get_slash(_nums:Field) -> Field {\n    let nums: [u32;3] = num_lib::arrarify_num(_nums);\n\n    let mut min = nums[0];\n    let mut max = nums[0];\n    \n    if (nums[1] > max) {\n        max = nums[1];\n    } else if (nums[1] < min) { \n        min = nums[1];\n    }\n\n    if (nums[2] > max) {\n        max = nums[2];\n    } else if (nums[2] < min) { \n        min = nums[2];\n    }\n\n    // let mut result: Field\n    let result = max - min;\n    result as Field\n}\n\nfn get_target(_note: Singleton<SecretNumberNote>, _target_num: Field) -> Field {\n    let note = _note.get_note(true);\n    _get_target(note.secret_num, _target_num)\n}\n\n// digit \n// 1 -> 1's place\n// 2 -> 10's place\n// 3 -> 100's place\n\n// result\n// 31 -> target num 3 and digit is 1\n// 3 -> taget num 0 and digit is 100\n// 90 -> target 9 and not found\n\npub fn _get_target(_nums: Field, _target_num: Field) -> Field {\n    let nums: [u32;3] = num_lib::arrarify_num(_nums);\n    let mut digit: u32 = 0;\n    for i in 0..3 {\n        if (nums[i] == _target_num as u32) {\n            digit = 3-i;\n        }\n    }\n\n    let result = digit + ( 10 * _target_num as u32);\n    result as Field\n}\n\n   \nfn is_valid_changed_num(_current_secret_num:Field, _new_secret_num:Field) -> bool {\n    _is_valid_changed_num(_current_secret_num, _new_secret_num)\n}\n\n// fn is_valid_changed_num(_note: Singleton<SecretNumberNote>, _new_secret_num:Field) -> bool {\n//     let note = _note.get_note(false);\n//     _is_valid_changed_num(note.secret_num, _new_secret_num)\n// }\n\npub fn _is_valid_changed_num(_current_secret_num:Field, _new_secret_num:Field) -> bool {\n       let current_nums: [u32;3] = num_lib::arrarify_num(_current_secret_num);\n       let new_nums: [u32;3] = num_lib::arrarify_num(_new_secret_num);\n\n        let mut diff_count: Field = 0;\n\n        for i in 0..3 {\n            if (current_nums[i] != new_nums[i]) {\n                diff_count += 1;\n            }\n\n        }\n            \n        diff_count == 1\n}\n\nfn is_valid_new_shuffled_num(_current_secret_num:Field, _new_secret_num:Field) -> bool {\n    _is_valid_new_shuffled_num(_current_secret_num, _new_secret_num)\n}\n\n// fn is_valid_new_shuffled_num(_note: Singleton<SecretNumberNote>, _new_secret_num:Field) -> bool {\n//     let note = _note.get_note(false);\n//     _is_valid_new_shuffled_num(note.secret_num, _new_secret_num)\n// }\n\npub fn _is_valid_new_shuffled_num(_current_secret_num:Field, _new_secret_num:Field) -> bool {\n       let current_nums: [u32;3] = num_lib::arrarify_num(_current_secret_num);\n       let new_nums: [u32;3] = num_lib::arrarify_num(_new_secret_num);\n\n        let mut result: Field = 0;\n\n        for i in 0..3 {\n            let mut found: bool = false;\n\n            for j in 0..3 {\n\n                if (current_nums[i] == new_nums[j]) {\n                    found = true;\n                }\n\n            }\n            \n            if (!found) {\n               result = 1;\n            }\n        }\n\n        // let ret = result == 0;\n        // ret\n\n        result == 0\n}\n\n",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/item_lib.nr"
        },
        "50": {
            "source": "    fn is_valid_nums(_num: Field) {\n        assert(_num as u32 >= 12, \"number should be bigger than 11\");\n        assert(_num as u32 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u32;\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n    }\n\n    fn check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u32;\n        let mut secret_num = _secret_num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut call_nums: [u32;3] = [0;3];\n        let mut secret_nums: [u32;3] = [0;3];\n\n\n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u32;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u32;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n    }\n\n    pub fn _is_valid_nums(_num: Field) -> [u32;3] {\n        assert(_num as u32 >= 12, \"number should be bigger than 11\");\n        assert(_num as u32 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u32;\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n\n        nums\n    }\n\n    pub fn _check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u32;\n        let mut secret_num = _secret_num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut call_nums: [u32;3] = [0;3];\n        let mut secret_nums: [u32;3] = [0;3];\n\n        \n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u32;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u32;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n        \n    }\n\n       fn arrarify_num(_num: Field) -> [u32;3] {\n\n        let mut num = _num as u32;\n\n        let mut modulus: u32 = 100;\n        let mut nums: [u32;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n               nums[i] = 0 as u32;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        nums\n    }\n",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/num_lib.nr"
        },
        "51": {
            "source": "mod types;\nmod item_lib;\nmod num_lib;\n\n// aztec-nargo compile\n// aztec-cli codegen ./target/ -o src/artifacts --ts\n\ncontract Numer0n {\n    use dep::std;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map, public_state::PublicState, singleton::Singleton, immutable_singleton::ImmutableSingleton,\n        },\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },  \n        protocol_types::{\n            abis::function_selector::FunctionSelector,\n            address::AztecAddress,\n        },\n    };\n\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit, \n            assert_current_call_valid_authwit_public\n        },\n    };\n\n    use dep::field_note::field_note::{FieldNote, FIELD_NOTE_LEN};\n\n    use crate::num_lib;\n    use crate::item_lib;\n\n    use crate::types::{\n        secret_num_note::{SecretNumberNote, SECRET_NUM_NOTE_LEN},\n        player::Player,\n        result::Result,\n        game::Game,\n    };\n\n    // storage\n    struct Storage {\n        players: Map<Field, PublicState<Player>>,\n        secret_num: Map<Field, Singleton<SecretNumberNote>>, \n        results_one: Map<Field, PublicState<Result>>, \n        results_two: Map<Field, PublicState<Result>>,\n        game_id: ImmutableSingleton<FieldNote>,\n        game: PublicState<Game>,\n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            players: Map::new(\n                context,\n                1,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            secret_num: Map::new(\n                context,\n                2,\n                |context, slot| {\n                    Singleton::new(\n                        context, \n                        slot\n                    )\n               },\n            ),     \n            results_one: Map::new(\n                context,\n                3,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            results_two: Map::new(\n                context,\n                4,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot\n                    )\n                },\n            ),\n            game_id: ImmutableSingleton::new(\n                context,\n                5\n            ),\n            game: PublicState::new(\n                context,\n                6\n            ),\n        }\n      }\n    }\n\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let mut game_id_note = FieldNote::new(game_id);\n        storage.game_id.initialize(&mut game_id_note, false);\n\n        let selector = FunctionSelector::from_signature(\"_add_player(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [player, 1]);\n    }\n\n    #[aztec(private)]\n    fn join_game(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let game_id_note = storage.game_id.get_note();\n        assert(game_id == game_id_note.value, \"invalid game_id\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_player(Field,Field)\"),\n            [player, 2]\n        );\n    }\n\n    #[aztec(private)]\n    fn add_num(player: Field, secret_num: Field) {\n        assert(context.msg_sender().to_field() == player, \"invalid player\");\n        // check caller validitiy\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(secret_num);\n\n        let mut secret_num_note = SecretNumberNote::new(secret_num, AztecAddress::from_field(player));\n        storage.secret_num.at(player).initialize(\n            &mut secret_num_note,\n            true\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_add_num(Field)\"),\n            [player]\n        );\n    }\n\n    #[aztec(private)]\n    fn call_num(target: AztecAddress, call_num: Field) {\n        // replaced if-else with assert as it leads to an errror at get_note()\n        assert(target != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        let secret_num_note: SecretNumberNote = storage.secret_num.at(target.to_field()).get_note(true);\n        let secret_num: Field = secret_num_note.secret_num;\n\n        num_lib::is_valid_nums(call_num);\n        let result = num_lib::check_result(call_num, secret_num);\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_result(Field,Field,Field,Field)\"),\n            [context.msg_sender().to_field(), call_num, result[0], result[1]]\n        );\n    }\n\n    #[aztec(private)]\n    fn use_attack_item(target: AztecAddress, item_type: Field, _target_num: Field) {\n        assert(target != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        let mut result: Field = 0;\n        if (item_type == item_lib::ITEM_HIGH_LOW) {\n            result = item_lib::get_high_and_low(storage.secret_num.at(target.to_field()));\n        } else if (item_type == item_lib::ITEM_SLASH) {\n            result = item_lib::get_slash(storage.secret_num.at(target.to_field()));\n        } else if (item_type == item_lib::ITEM_TARGET) {\n            assert(_target_num as u32 < 10, \"invalid target_num\");\n            result = item_lib::get_target(storage.secret_num.at(target.to_field()), _target_num);\n        } else {\n            assert(false, \"inavlid item type\");\n        }\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n            [context.msg_sender().to_field(), item_type, result]\n        );\n    }\n\n    // the following functinon `use_defense_item` is commented out and unused atm.\n    // instead, there are two separate funcs for use_defense_item: change and shuffle\n    // this is because if-else chain messes things up, causing \n\n    // #[aztec(private)]\n    // fn use_defense_item(player: Field, item_type: Field, new_secret_num: Field) {\n    //     assert(context.msg_sender().to_field() == player, \"invalid player\");\n\n    //     context.call_public_function(\n    //         context.this_address(),\n    //         FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n    //         [player]\n    //     );\n\n    //     num_lib::is_valid_nums(new_secret_num);\n\n    //     // let secret_num_note = storage.secret_num.at(player).get_note(true);\n    //     let secret_num_note = storage.secret_num.at(player).get_note(false);\n    //     let secret_num = secret_num_note.secret_num;\n\n    //     let mut ret: bool = false;\n    //     if (item_type == item_lib::ITEM_CHANGE) {\n    //        let ret = item_lib::is_valid_changed_num(secret_num, new_secret_num);\n    //        assert(ret, \"invalid num for change\");\n    //     } else if (item_type == item_lib::ITEM_SHUFFLE) {\n    //        let ret = item_lib::is_valid_new_shuffled_num(secret_num, new_secret_num);\n    //        assert(ret, \"invalid num for shuffule\");\n    //     } else {\n    //        assert(false, \"inavlid item type\");\n    //     }\n\n    //     let mut new_secret_num_note = SecretNumberNote::new(new_secret_num, AztecAddress::from_field(player));\n    //     storage.secret_num.at(player).replace(&mut new_secret_num_note, true);\n\n    //     // records results\n    //     context.call_public_function(\n    //         context.this_address(),\n    //         FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n    //         [context.msg_sender().to_field(), item_type, 0]\n    //     );\n    // }\n\n    #[aztec(private)]\n    fn use_change(player: Field, new_secret_num: Field) {\n        assert(context.msg_sender().to_field() == player, \"invalid player\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(new_secret_num);\n\n        let secret_num_note = storage.secret_num.at(player).get_note(false);\n        let secret_num = secret_num_note.secret_num;\n        let ret = item_lib::is_valid_changed_num(secret_num, new_secret_num);\n        assert(ret, \"invalid num for change\");\n\n        let mut new_secret_num_note = SecretNumberNote::new(new_secret_num, AztecAddress::from_field(player));\n        storage.secret_num.at(player).replace(&mut new_secret_num_note, true);\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n            [context.msg_sender().to_field(), item_lib::ITEM_CHANGE, 0]\n        );\n    }\n\n    #[aztec(private)]\n    fn use_shuffle(player: Field, new_secret_num: Field) {\n        assert(context.msg_sender().to_field() == player, \"invalid player\");\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(new_secret_num);\n        \n        let secret_num_note = storage.secret_num.at(player).get_note(false);\n        let secret_num = secret_num_note.secret_num;\n        let ret = item_lib::is_valid_new_shuffled_num(secret_num, new_secret_num);\n        assert(ret, \"invalid num for shuffle\");\n\n        let mut new_secret_num_note = SecretNumberNote::new(new_secret_num, AztecAddress::from_field(player));\n        storage.secret_num.at(player).replace(&mut new_secret_num_note, true);\n\n        // records results\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_item_result(Field,Field,Field)\"),\n            [context.msg_sender().to_field(), item_lib::ITEM_SHUFFLE, 0]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _record_item_result(_caller: Field, _item_type: Field, _item_result: Field) {\n        assert(storage.game.read().started, \"game hasn't been started yet\");\n        assert(!storage.game.read().finished, \"game has already been finished\");\n\n        let player_id = storage.players.at(_caller).read().player_id;\n        let mut game = storage.game.read();\n        let current_round = game.round;\n\n        if (player_id == 1) {\n            assert(game.is_first, \"invalid turn for player 1\");\n            let mut result_one = storage.results_one.at(current_round).read();\n            assert(result_one.call_num == 0, \"item should be used before call\");\n            assert(result_one.item == 0, \"an item has already been used\");\n            result_one.item = _item_type;\n            result_one.item_result = _item_result;\n            storage.results_one.at(current_round).write(result_one);\n        } else if (player_id == 2) {\n            assert(!game.is_first, \"invalid turn for player 2\");\n            let mut result_two = storage.results_two.at(current_round).read();\n            assert(result_two.call_num == 0, \"item should be used before call\");\n            assert(result_two.item == 0, \"an item has already been used\");\n            result_two.item = _item_type;\n            result_two.item_result = _item_result;\n            storage.results_two.at(current_round).write(result_two);\n        } else {\n            assert(false, \"invalid player\");\n        }\n    }\n\n    #[aztec(public)]\n    internal fn _record_result(_caller: Field, _call_num: Field, _eat: Field, _bite: Field) {\n        assert(storage.game.read().started, \"game hasn't been started yet\");\n        assert(!storage.game.read().finished, \"game has already been finished\");\n        let player_id = storage.players.at(_caller).read().player_id; // 2 or 1\n        let mut result = Result::new(_call_num, _eat, _bite, 0, 0);\n\n        let mut game = storage.game.read(); // 8 or 2\n        let current_round = game.round;\n\n        if (player_id == 1) {\n            assert(game.is_first, \"invalid turn for player 1\");\n            let result_one = storage.results_one.at(current_round).read(); // 5 or 3 or 1\n            result.item = result_one.item;\n            result.item_result = result_one.item_result;\n\n            storage.results_one.at(current_round).write(result);\n\n            game.is_first = false;\n            storage.game.write(game);\n        } else if (player_id == 2) {\n            assert(!game.is_first, \"invalid turn for player 2\");\n            let result_two = storage.results_two.at(current_round).read(); // 5 or 2\n            result.item = result_two.item;\n            result.item_result = result_two.item_result;\n\n            storage.results_two.at(current_round).write(result);\n\n            // check if either of the players win\n            let one_eat = storage.results_one.at(current_round).read().eat;\n            if ((_eat == 3) | (one_eat == 3)) {\n                game.finished = true;\n            } else {\n                game.is_first = true;\n                game.round = current_round + 1;\n            }\n            storage.game.write(game);\n        } else {\n            assert(false, \"invalid player\");\n        }\n    }\n\n    #[aztec(public)]\n    internal fn _assert_is_player(_player: Field) {\n        assert(storage.players.at(_player).read().is_player, \"not player\");\n    }\n\n    #[aztec(public)] \n    internal fn _add_player(_player: Field, _player_id: Field) {\n        assert(!storage.game.read().started, \"game has already been started\");\n        assert(_player != 0, \"invalid player address\");\n\n        let mut player = storage.players.at(_player).read();\n        assert(!player.is_player, \"player already exists\");\n\n        player.player_id = _player_id;\n        player.is_player = true;\n\n        storage.players.at(_player).write(player);\n\n        // add player addrs into game\n        let mut game = storage.game.read();\n        game.players[_player_id - 1] = _player;\n        storage.game.write(game);\n    }\n\n    #[aztec(public)] \n    internal fn _add_num(_player: Field) {\n        assert(!storage.game.read().started, \"game has already started\");\n\n        let player = storage.players.at(_player).read();\n        let mut game = storage.game.read();\n\n        if (player.player_id == 1) {\n            assert(!game.is_number_set[0], \"num 1 already has been set\");\n            game.is_number_set[0] = true;\n        } else {\n            assert(!game.is_number_set[1], \"num 2 already has been set\");\n            game.is_number_set[1] = true;\n        }\n\n        if ((game.is_number_set[0]) & (game.is_number_set[1])) {\n            game.round = 1;\n            game.is_first = true;\n            game.started = true;\n        }\n\n        storage.game.write(game);\n    }\n\n    unconstrained fn get_player(player: Field) -> pub Player {\n        storage.players.at(player).read()\n    }\n\n    unconstrained fn get_winner() -> pub Field {\n        let current_round = storage.game.read().round;\n        let latest_result_one = storage.results_one.at(current_round).read();\n        let latest_result_two = storage.results_two.at(current_round).read();\n\n        if (!storage.game.read().finished) {\n            0\n        } else if ((latest_result_one.eat == 3) & (latest_result_two.eat != 3)) {\n            1\n        } else if ((latest_result_one.eat != 3) & (latest_result_two.eat == 3)) {\n            2\n        } else {\n            3 // draw\n        }\n    }\n\n    // for testing purpose\n    // q: how to only allow note an owner to view her own secret num\n    unconstrained fn get_secret_num(player: Field) -> pub Field {\n        let note = storage.secret_num.at(player).view_note();\n        note.secret_num\n    }\n\n    unconstrained fn get_result(player: Field, round: Field) -> pub Result {\n        let player = storage.players.at(player).read();\n        let mut result = Result::new(0, 0, 0, 0, 0);\n\n        if (player.player_id == 1) {\n            result = storage.results_one.at(round).read();\n        } else {\n            result = storage.results_two.at(round).read();\n        }\n\n        result\n    }\n\n    unconstrained fn get_round() -> pub Field {\n        storage.game.read().round\n    }\n\n    unconstrained fn get_is_first() -> pub bool {\n        storage.game.read().is_first\n    }\n\n    unconstrained fn get_is_started() -> pub bool {\n        storage.game.read().started\n    }\n\n    unconstrained fn get_is_finished() -> pub bool {\n        storage.game.read().finished\n    }\n\n    // for testing purpose\n    unconstrained fn get_high_and_low(num: Field) -> pub Field {\n        item_lib::_get_high_and_low(num)\n    }\n\n    // for testing purpose\n    unconstrained fn get_slash(num: Field) -> pub Field {\n        item_lib::_get_slash(num)\n    }\n\n    // for testing purpose\n    unconstrained fn get_target(num: Field, target_num:Field) -> pub Field {\n        item_lib::_get_target(num, target_num)\n    }\n    \n    // for testing purpose\n    unconstrained fn is_valid_new_changed_num(num: Field, new_num: Field) -> pub bool {\n        item_lib::_is_valid_changed_num(num, new_num)\n    }\n\n    // for testing purpose\n    unconstrained fn is_valid_new_shuffled_num(num: Field, new_num: Field) -> pub bool {\n        item_lib::_is_valid_new_shuffled_num(num, new_num)\n    }\n    unconstrained fn get_game() -> pub Game {\n        storage.game.read()\n    }\n\n    unconstrained fn check_result(call_num: Field, secret_num: Field) -> pub [Field; 2] {\n        num_lib::_check_result(call_num, secret_num)\n    }\n\n    unconstrained fn is_valid_nums(_num: Field) -> pub [u32; 3] {\n        num_lib::_is_valid_nums(_num)\n    }\n\n    // https://docs.aztec.network/misc/migration_notes#0240\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: AztecAddress,\n        nonce: Field,\n        storage_slot: Field,\n        note_type_id: Field,\n        preimage: [Field; SECRET_NUM_NOTE_LEN]\n    ) -> pub [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (note_type_id == SecretNumberNote::get_note_type_id()) {\n            // should derive storage slot for mapped values correctly\n            // https://github.com/AztecProtocol/aztec-packages/blob/2db2e2a3091e2552f8e8055d1bc07bd5016455ff/yarn-project/aztec-nr/aztec/src/state_vars/map.nr#L32C1-L32C1\n            note_utils::compute_note_hash_and_nullifier(SecretNumberNote::deserialize_content, note_header, preimage)\n        } else {\n            note_utils::compute_note_hash_and_nullifier(FieldNote::deserialize_content, note_header, preimage)\n        }\n    }\n}\n",
            "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/main.nr"
        },
        "53": {
            "source": "use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{GENERATOR_INDEX__SIGNATURE_PAYLOAD}, hash::{hash_args, pedersen_hash}\n};\nuse dep::aztec::context::{PrivateContext, PublicContext, Context};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    message_hash: Field\n) {\n    let is_valid_selector = FunctionSelector::from_field(IS_VALID_SELECTOR);\n    let result = context.call_private_function(on_behalf_of, is_valid_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let is_valid_public_selector = FunctionSelector::from_field(IS_VALID_PUBLIC_SELECTOR);\n    let result = context.call_public_function(on_behalf_of, is_valid_public_selector, [message_hash])[0];\n    context.push_new_nullifier(message_hash, 0);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash(\n        [\n        context.msg_sender().to_field(), context.this_address().to_field(), context.selector().to_field(), context.args_hash\n    ],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    );\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(\n    caller: AztecAddress,\n    target: AztecAddress,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash(\n        [caller.to_field(), target.to_field(), selector.to_field(), args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n}\n// docs:end:compute_authwit_message_hash\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/authwit/src/auth.nr"
        },
        "60": {
            "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/log.nr"
        },
        "64": {
            "source": "use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"
        },
        "65": {
            "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"
        },
        "66": {
            "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_COMMITMENT,\n    GENERATOR_INDEX__SILOED_COMMITMENT\n},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"
        },
        "67": {
            "source": "use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::Empty;\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/note/note_header.nr"
        },
        "74": {
            "source": "use crate::{\n    context::inputs::PublicContextInputs, messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            self.this_portal_address(),\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0)\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"
        },
        "76": {
            "source": "use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    max_non_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<SideEffect, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            max_non_revertible_side_effect_counter: 0,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_commitments: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            max_non_revertible_side_effect_counter: self.max_non_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_max_non_revertible_side_effect_counter(&mut self) {\n        assert(\n            self.max_non_revertible_side_effect_counter == 0, \"Already captured the non-revertible side effect counter\"\n        );\n        self.max_non_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_commitments.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) {\n        // docs:end:context_message_portal\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            self.this_portal_address(),\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(\n            item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n        );\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(\n            item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n        );\n        assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"
        },
        "81": {
            "source": "use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"
        },
        "82": {
            "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    utils::arr_copy_slice,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"
        },
        "83": {
            "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter\n    )\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
        },
        "84": {
            "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"
        },
        "85": {
            "source": "use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"
        },
        "87": {
            "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"
        },
        "89": {
            "source": "use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"
        },
        "94": {
            "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"
        },
        "101": {
            "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm;\n\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none() }\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/context.nr"
        },
        "112": {
            "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState { context, storage_slot }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/public_state.nr"
        },
        "113": {
            "source": "use dep::std::option::Option;\n\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Singleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Singleton<T> {}\n\nimpl<Note> Singleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, Singleton>` type (for example), because the storage slot often also identifies an actor. e.g. \n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy. \n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/singleton.nr"
        },
        "115": {
            "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"
        },
        "118": {
            "source": "use dep::std::option::Option;\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for ImmutableSingleton<T> {}\n\nimpl<Note> ImmutableSingleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, ImmutableSingleton>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"
        },
        "121": {
            "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/aztec/src/hasher.nr"
        },
        "127": {
            "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress, traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN = 5;\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_SERIALIZED_LEN]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"
        },
        "128": {
            "source": "use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"
        },
        "129": {
            "source": "use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x2442dd521c59987a4291be0fd11198e5a4d87c8bc36cf3b65c5229f61fc37b30);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"
        },
        "132": {
            "source": "use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    contrakt::deployment_data::ContractDeploymentData, header::Header, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    max_non_revertible_side_effect_counter: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_commitments == other.new_commitments) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.max_non_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            max_non_revertible_side_effect_counter: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1304e6c42e3c53fc7c918cbf1ea70333b4f214726c0784cf9878cd641967dab1);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"
        },
        "134": {
            "source": "use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"
        },
        "135": {
            "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"
        },
        "136": {
            "source": "use crate::{\n    abis::{call_context::CallContext, side_effect::{SideEffect, SideEffectLinkedToNoteHash}},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [SideEffect; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_COMMITMENTS_PER_CALL{\n            fields.extend_from_array(self.new_commitments[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.new_l2_to_l1_msgs);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_commitments: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_COMMITMENTS_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_array([0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let _hashed = pcpi.hash();\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"
        },
        "139": {
            "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"
        },
        "142": {
            "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"
        },
        "145": {
            "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"
        },
        "147": {
            "source": "use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"
        },
        "154": {
            "source": "use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    body_hash: [Field; NUM_FIELDS_PER_SHA256],\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        (self.body_hash == other.body_hash) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.body_hash);\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let body_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n        offset = offset + NUM_FIELDS_PER_SHA256;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            body_hash,\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            body_hash: [0; NUM_FIELDS_PER_SHA256],\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/header.nr"
        },
        "158": {
            "source": "use crate::{\n    constants::{GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONSTRUCTOR},\n    hash::pedersen_hash, contract_class::ContractClassId, utils, grumpkin_point::GrumpkinPoint\n};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, ToField, Serialize, Deserialize};\nuse crate::type_serialization::{ETH_ADDRESS_SERIALIZED_LEN, AZTEC_ADDRESS_SERIALIZED_LEN};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_SERIALIZED_LEN> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_SERIALIZED_LEN] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_SERIALIZED_LEN> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_SERIALIZED_LEN]) -> Self {\n        Self {\n            inner: fields[0]\n        }\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, portal_contract_address: EthAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\npub fn compute_initialization_hash(selector: Field, args_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        selector,\n        args_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/address.nr"
        },
        "171": {
            "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n\nglobal MAX_NEW_COMMITMENTS_PER_TX_META: Field = 8;\nglobal MAX_NEW_NULLIFIERS_PER_TX_META: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX_META: Field = 2;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 4;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 36;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each),\n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal HEADER_LENGTH: Field = 20; // 2 for last_archive, 2 for body hash, 10 for state reference, 6 for global vars\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 207;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 212;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 2;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 187;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 1024;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/constants.nr"
        },
        "175": {
            "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"
        },
        "181": {
            "source": "use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"
        },
        "182": {
            "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/utils.nr"
        },
        "183": {
            "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::{ContractClassFunctionLeafPreimage, FunctionLeafPreimage};\nuse crate::contract_class::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT,\n    NOTE_HASH_TREE_HEIGHT, NUM_FIELDS_PER_SHA256, GENERATOR_INDEX__SILOED_COMMITMENT,\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR,\n    GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__COMMITMENT_NONCE, GENERATOR_INDEX__UNIQUE_COMMITMENT,\n    GENERATOR_INDEX__FUNCTION_ARGS\n};\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_commitment(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_COMMITMENT\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    content: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, portal_contract_address.to_field(), chain_id, content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_commitment_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__COMMITMENT_NONCE\n    )\n}\n\npub fn compute_unique_siloed_commitment(nonce: Field, siloed_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_commitment\n    ],\n        GENERATOR_INDEX__UNIQUE_COMMITMENT\n    )\n}\n\npub fn compute_unique_siloed_commitments<N>(\n    first_nullifier: Field,\n    siloed_commitments: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_commitments = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_commitment = siloed_commitments[i];\n        if siloed_commitment.value != 0 {\n            let nonce = compute_commitment_nonce(first_nullifier, i);\n            unique_siloed_commitments[i] = SideEffect {\n                value: compute_unique_siloed_commitment(nonce, siloed_commitment.value),\n                counter: siloed_commitment.counter\n                };\n        }\n    }\n    unique_siloed_commitments\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/hash.nr"
        },
        "188": {
            "source": "use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/state_reference.nr"
        },
        "192": {
            "source": "use crate::{\n    address::EthAddress, contract_class::ContractClassId,\n    constants::{CONTRACT_DEPLOYMENT_DATA_LENGTH, GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA},\n    grumpkin_point::GrumpkinPoint, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/noir-protocol-circuits/src/crates/types/src/contrakt/deployment_data.nr"
        },
        "194": {
            "source": "use dep::aztec::{\n    note::{note_header::NoteHeader, note_interface::NoteInterface}, hash::pedersen_hash,\n    context::PrivateContext\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl NoteInterface<FIELD_NOTE_LEN> for FieldNote {\n    fn serialize_content(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    fn deserialize_content(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        assert(\n            false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\"\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'FieldNote')))\"\n        7010510110810078111116101\n    }\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote { value, header: NoteHeader::empty() }\n    }\n}\n\n",
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.24.0/noir-projects/aztec-nr/field-note/src/field_note.nr"
        }
    }
}