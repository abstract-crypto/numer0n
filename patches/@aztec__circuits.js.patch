diff --git a/dest/structs/client_ivc_proof.js b/dest/structs/client_ivc_proof.js
index 7afaf23bf23438e33a4a962a8b767b5ea627ebcd..6b463a7010e5f3b81159f8f45d8efba10cac3728 100644
--- a/dest/structs/client_ivc_proof.js
+++ b/dest/structs/client_ivc_proof.js
@@ -1,7 +1,7 @@
 import { bufferSchemaFor } from '@aztec/foundation/schemas';
 import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
-import { promises as fs } from 'fs';
-import path from 'path';
+// import { promises as fs } from 'fs';
+// import path from 'path';
 /**
  * TODO(https://github.com/AztecProtocol/aztec-packages/issues/7370) refactory this to
  * eventually we read all these VKs from the data tree instead of passing them
@@ -28,6 +28,8 @@ export class ClientIvcProof {
      * @returns the encapsulated client ivc proof
      */
     static async readFromOutputDirectory(directory) {
+        const { promises: fs } = await import('fs');
+        const path = await import('path');
         const [clientIvcVkBuffer, clientIvcProofBuffer] = await Promise.all(['client_ivc_vk', 'client_ivc_proof'].map(fileName => fs.readFile(path.join(directory, fileName))));
         return new ClientIvcProof(clientIvcProofBuffer, clientIvcVkBuffer);
     }
@@ -45,6 +47,8 @@ export class ClientIvcProof {
      * @param directory the directory of results
      */
     async writeToOutputDirectory(directory) {
+        const { promises: fs } = await import('fs');
+        const path = await import("path");
         const { clientIvcProofBuffer, clientIvcVkBuffer } = this;
         const fileData = [
             ['client_ivc_proof', clientIvcProofBuffer],