/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
	AztecAddress,
	AztecAddressLike,
	CompleteAddress,
	Contract,
	ContractArtifact,
	ContractBase,
	ContractFunctionInteraction,
	ContractMethod,
	DeployMethod,
	EthAddress,
	EthAddressLike,
	FieldLike,
	Fr,
	Point,
	PublicKey,
	Wallet,
} from "@aztec/aztec.js";
import Numer0nContractArtifactJson from "./target/Numer0n.json" assert { type: "json" };
export const Numer0nContractArtifact =
	Numer0nContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Numer0n;
 */
export class Numer0nContract extends ContractBase {
	private constructor(
		completeAddress: CompleteAddress,
		wallet: Wallet,
		portalContract = EthAddress.ZERO
	) {
		super(completeAddress, Numer0nContractArtifact, wallet, portalContract);
	}

	/**
	 * Creates a contract instance.
	 * @param address - The deployed contract's address.
	 * @param wallet - The wallet to use when interacting with the contract.
	 * @returns A promise that resolves to a new Contract instance.
	 */
	public static async at(address: AztecAddress, wallet: Wallet) {
		return Contract.at(
			address,
			Numer0nContract.artifact,
			wallet
		) as Promise<Numer0nContract>;
	}

	/**
	 * Creates a tx to deploy a new instance of this contract.
	 */
	public static deploy(
		wallet: Wallet,
		player_one: FieldLike,
		player_two: FieldLike
	) {
		return new DeployMethod<Numer0nContract>(
			Point.ZERO,
			wallet,
			Numer0nContractArtifact,
			Array.from(arguments).slice(1)
		);
	}

	/**
	 * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
	 */
	public static deployWithPublicKey(
		publicKey: PublicKey,
		wallet: Wallet,
		player_one: FieldLike,
		player_two: FieldLike
	) {
		return new DeployMethod<Numer0nContract>(
			publicKey,
			wallet,
			Numer0nContractArtifact,
			Array.from(arguments).slice(2)
		);
	}

	/**
	 * Returns this contract's artifact.
	 */
	public static get artifact(): ContractArtifact {
		return Numer0nContractArtifact;
	}

	/** Type-safe wrappers for the public methods exposed by the contract. */
	public methods!: {
		/** _check_result(call_num_hunds: field, call_num_tens: field, call_num_ones: field, secret_num_hunds: field, secret_num_tens: field, secret_num_ones: field) */
		_check_result: ((
			call_num_hunds: FieldLike,
			call_num_tens: FieldLike,
			call_num_ones: FieldLike,
			secret_num_hunds: FieldLike,
			secret_num_tens: FieldLike,
			secret_num_ones: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** _initialize(player_one: field, player_two: field) */
		_initialize: ((
			player_one: FieldLike,
			player_two: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** _is_valid_nums(hunds: field, tens: field, ones: field) */
		_is_valid_nums: ((
			hunds: FieldLike,
			tens: FieldLike,
			ones: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** _record_result(player_num: field, eat: field, bite: field) */
		_record_result: ((
			player_num: FieldLike,
			eat: FieldLike,
			bite: FieldLike
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** add_num(player: field, nums: array) */
		add_num: ((
			player: FieldLike,
			nums: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** call_num(player: field, call_nums: array) */
		call_num: ((
			player: FieldLike,
			call_nums: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;

		/** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
		compute_note_hash_and_nullifier: ((
			contract_address: FieldLike,
			nonce: FieldLike,
			storage_slot: FieldLike,
			serialized_note: FieldLike[]
		) => ContractFunctionInteraction) &
			Pick<ContractMethod, "selector">;
	};
}
