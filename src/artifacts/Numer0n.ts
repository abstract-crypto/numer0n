
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import Numer0nContractArtifactJson from '../../contract/target/Numer0n.json' assert { type: 'json' };
export const Numer0nContractArtifact = Numer0nContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Numer0n;
 */
export class Numer0nContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, Numer0nContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, Numer0nContract.artifact, wallet) as Promise<Numer0nContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, player_one: FieldLike, player_two: FieldLike) {
    return new DeployMethod<Numer0nContract>(Point.ZERO, wallet, Numer0nContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, player_one: FieldLike, player_two: FieldLike) {
    return new DeployMethod<Numer0nContract>(publicKey, wallet, Numer0nContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return Numer0nContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _assert_invalid_caller(_player: field) */
    _assert_invalid_caller: ((_player: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _assert_is_player(_player: field) */
    _assert_is_player: ((_player: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _initialize(player_one: field, player_two: field) */
    _initialize: ((player_one: FieldLike, player_two: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _record_result(_player: field, call_num: field, eat: field, bite: field) */
    _record_result: ((_player: FieldLike, call_num: FieldLike, eat: FieldLike, bite: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** add_num(player: field, secret_num: field) */
    add_num: ((player: FieldLike, secret_num: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** call_num(player: struct, call_num: field) */
    call_num: ((player: AztecAddressLike, call_num: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** check_result(call_num: field, secret_num: field) */
    check_result: ((call_num: FieldLike, secret_num: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_epoch() */
    get_epoch: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_is_first() */
    get_is_first: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_player(player: field) */
    get_player: ((player: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_player_secret_num(player: field) */
    get_player_secret_num: ((player: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_result(player: field, epoch: field) */
    get_result: ((player: FieldLike, epoch: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_nums(_num: field) */
    is_valid_nums: ((_num: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
