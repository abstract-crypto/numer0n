{
  "name": "Numer0n",
  "functions": [
    {
      "name": "_add_num",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_add_player",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_player_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_assert_is_player",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_record_item_result",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_caller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_item_type",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_item_result",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_record_result",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "_caller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_eat",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "_bite",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_num",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "call_num",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "target",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "check_result",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "call_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_game",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::game::Game",
          "fields": [
            {
              "name": "players",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "is_number_set",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "boolean"
                }
              }
            },
            {
              "name": "started",
              "type": {
                "kind": "boolean"
              }
            },
            {
              "name": "finished",
              "type": {
                "kind": "boolean"
              }
            },
            {
              "name": "round",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "is_first",
              "type": {
                "kind": "boolean"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8WY3U7bQBCF13YS2zEkEEiABBr+6WWgLe1lnqFvgFTUi15Uaqs+f7vuHuXrskJITJSRIo+PtXPOGTtOZivnXOb+ReFW0QtHfy2PcmJ+TSfk3WhtGY7V38/v6JqPZTguXhk9eLCq6b30Q60amnNg4uwAyyOftVv1tQTWQW+EdZH7GIQ6ua23+8atIoPewpbnNnP/xxJ5keijS/SM/c6jtb5f39zT/nFNL8HH9cI66EO8lj3qRl4Wr4u2R+RZ4lxc/UjDOrWoD6qb+m5vire05V34GhV44+9pH/wVdNTG/sUV66iho0IuHY2tjjtfYyuhowG3+LegY9tWxyKLdGTg3QbvwJb3na8xTPgfwL/4h9CxY6uj9T+M/It3B7y7trzvfY1Rwv8u/It/BB17tjpa/6PIv3j3wLtvy/vB1xgn/O/Dv/jH0DGx1dH6H0f+xTsB74Et772vcZjwfwD/4j+EjiNbHR99jWlCxxF0iH8KHTNbHe19mEb3Qbwz8J7Y8t7VqE9uxhL5CbQc22q59TXf2NZsf3fn0C+v4mlwnb//c2NvGThVV+fU91Kt1Ya1et5TW972WSSvj+eexdM19sDXPLOt2T6L59Avr+JpcJ3/ec6NvWXgVF2dU99LtQ43rLUGNgOm68fALiI/HrsM+RzYVchHwK5DPgZ2E/IJsLchnwLTnHgGrEj40CxyAUzvpUtgms2ugGmWuAam98QNMP3Xl87SrWUm/9SDTqua7JHiuXfEOmdY31vNKz9/ff/x8PXx8+PDlwyy4q2XHNKYcwzTbeRWj9ZzG0HrudVTRHyle9oe01mSUcF47lb7dV60ZmrOwH8AW+s18BAUAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_high_and_low",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_finished",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUOw7CMAx10nwakLgDO0MZQIw9AzeoRMWIBNxfEIjVh9utrvAS16n9nl+cGCIy9LWKBjPC3xU/QLwtazPTAuBp1fTvGr7USsDZlnVTerG6uMf1hIYBtFXC2eP5YF0CrES/58ixSmiRwOe9rN0W9v1ETpjAw3yOORp0kLmokRe9NPPsoxHitPDNWCvBYUkurAPXdYLLP3GjLu4h16gBl+cigu6MXwOPpMujMYKHofG7kMCvIWbFf5EWucunQMPsadXEe4e9o7XgLzn7WVN+Fx/P27279ue+uxig5YT8Fqihj08Nj5KDGOfjEXN+hFgl8CKN5VHrX9Y1Ys32Aj/AmvmIBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_first",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUOw7CMAx10nwakLgDO0NZgLFn4AaVqBiRgPsLArH6cLvVFV7iOrXf84sTQ0SGvlbRYEb4u+IHiLdlbWZaADytmv5dw5daCTjbsm5KL1YX97Ce0DCAtko4ezwfrEuAlej3HDlWCS0S+LyXtdvCvp/ICRN4mM8xR4MOMhc18qKXZp59NEKcFr4ZayU4LMmFdeC6TnD5J27UxT3mGjXg8lxE0J3xa+CRdHk0RvAwNH4XEvg1xKz4L9Iid/kUaJg9rZp477B3tBb8JWc/a8rv4uN5u3fX/tx3FwO0nJDfAjX08anhUXIQ43w8Ys6PEKsEXqSxPGr9y7pGrNle19TBsIgHAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_is_started",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUOw7CMAx10nwakLgDO0OREGLsGbhBJSpGJOD+gkCsPtxudYWXuE7t9/zixBCRoa9VNJgR/q74AeJtWZuZFgBPq6Z/1/ClVgLOtqyb0ovVxT2uJzQMoK0Szh7PB+sSYCX6PUeOVUKLBD7vZe22sO8ncsIEHuZzzNGgg8xFjbzopZlnH40Qp4VvxloJDktyYR24rhNc/okbdXEPuUYNuDwXEXRn/Bp4JF0ejRE8DI3fhQR+DTEr/ou0yF0+BRpmT6sm3jvsHa0Ff8nZz5ryu/h43u7dtT/33cUALSfkt0ANfXxqeJQcxDgfj5jzI8QqgRdpLI9a/7KuEWu2F0tKN92IBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_player",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::player::Player",
          "fields": [
            {
              "name": "player_id",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "is_player",
              "type": {
                "kind": "boolean"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XTW+CQBCGd0VA/P5sr9s/YMBzD3vr3f4CEm0vWhKh6d+v4Ez6duXQxKE4ie64wLzPzMiyeEoprS7mgY/Gc5bG+DZLtFysuAOcHchjS34E82wB+FaII5CvU4zsPPrnTw9yc3OP1O9+ljamnH1Zvk0EGmzu/8eC70P9u7IsSaB++ioUs+ppKMypoH/YI2YfwPEQjvWEObS6vg/4N/L9lbXTMmtT/Y9kY26GxMy1jIDfzWcgnE8Zo0+xuqA1AM1RA70bUixNH9bog+64AV3W8UmXOVjLg3OeaBxBPdx+NFEbNAs+ayGLbpkFny0K5kZOrfC5hT14geNT8vG5NSPfq4k9hbkJ+bOaa7FGUyeX+DaraoQ6Fn6zVh8YZnfA0vsnFu4Jx504LG3qzmV1q3V0Abr8H51D3Vl/ARxL4fzLGKsajiVwsP4KOB5kOWLtcGjQZa0IfLyXHx0+XDvwWl4T+PyQcvFkc9k0sI+o9sm838UaoVnwAxiF9+xJuR7wMyUvslP6vt/u050GLEZ1Xz1cH5dp3qp2YY6XHh/m+PoQ5jgObnuvXkOtUP6YqKpJFN+B8RxD4zONr5famfyQFSY2H+fv9HDIvva7tcFjuTl+5oXJi/RUmLdTdjTJ+hulBkXjdA8AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_result",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "round",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::result::Result",
          "fields": [
            {
              "name": "call_num",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "eat",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "bite",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "item",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "item_result",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_round",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUOw7CMAx10nwISFyBnaksFWPPwA0qUTEiAfcXBGL1YaIuTYSXuE7ynvNsVxGRoo81NJkS/j75DuJ9WtuF5oCvFKZ9YdiEFSBnndZteosuy9ttMho60LYQzwHrg7gEXIG+68ixRmgRwOe9qN0O9m3mjsvw4X2OGZp0kHdRIyve0i6zt0bI08M3c61FDjVzYR0Y14hc/snry/J2EWMFvNwXHnRnfj4XwMf+0eKcpyozdXQ09UApTOx/trnZrdmDUT/+P90f19twGU/jcFaQlhFSa0gNfRx5LqmB2FwZPcQawefpV55i75e4SqzRnjU1z4UQBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_secret_num",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_winner",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_nums",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "_num",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 16
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dCZxd0x0H8HfzZkbvXEvsO2Pf600m9tKhFKUoRSlqskhCkonMRKy17/u+75SKUpSiFKXWikplQVQqESX7vkiic857P/nNcTzOx//Uy2f+9/OZz9xz7rnn/z3n3HfvO/feZKpyuVySKy55WucFeY2l34XvttQncnUVEjLmS+udSutVbT81SxXz0lI+LzW03ijkqZHvrwLb8bu67afUNNu2nLN92VL7qoXHLi31Ky/uMdNI69XU1zWylkJGlhr6/YMIbV4q9+3bjPgZ7ce+2gi+NMBXS77U41s6gi8L8C1NvszjWzaCb5kA37JkWU7WYo9pWJajOMtHaHPn3LdvM+JntB/7VozgWyHAtyL5VvD4Vo7gWynAtzL5ViIXfq8awbdKgG9V8q3i8a0ewbdagG918q3m8a0ZwbdGgG9N8q3h8a0dwbdWgG9t8q3l8a0bwbdOgG9d8q3j8a0XwVcX4FuPfHUe3wYRfOsH+DYg3/oe30YRfBsG+DYi34Ye3yYRfBsH+DYh38Ye32YRfJsG+DYj36Ye3xYRfJsH+LYg3+Ye31ayvi7Gt2WAbyuyFGQtXY3lhwGWAlm2lrXUmzrrZeu03C7kR1sRJ6PtPOZdhNuWUEzUizT71NqxrcaypeNMqdyWFeBD3tYRLaljMUu585LPx2PZVdZnz+ENAb6uZNlO1NJg77FtE2DZjizbilqK5/DtZeu05/AdyI+2Ik5G23nMdxBuW0IxUS/S7FOrWtWqVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVa3yVmNpcJwplWuoAB/yto1oSR2LWcq9J+Lz8VjuJOuz79TsGODbiSy7iFq62HdqfhRg2YUsO4taiu/U/Fi2zoLrR1sRJ6PtPOaNwm1LKCbqdduqVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtS5LVWHZ0nCmV27ECfMjbOaIldSxmKXef3efjsdxN1mefSewa4NuNLHvIWuz/1fCTAMseZNld1mKfSfxUtk77TGJP8qOtiJPRdh7zPYXbllBM1Is0+9Tasa3GsqvjTKncrhXgQ97uES2pYzFLufOSz8djubesz57D9wrw7U2WfUUt9fa58s8CLPuSZR9RS/Ec/nPZOu05fD/yo62Ik9F2HvP9hNuWUEzUizT71KpWtapVrWpVq1rV2rGtxrKX40yp3F4V4EPePhEtqWMxS7l5is/HY3mArM/O6fYP8B1AloNELcU53S8CLAeR5UBRS3FO90vZOu2c7mDyo62Ik9F2HvODhduWUEzUizT71KpWtapVrWpVq1rV2rGtxrK/40yp3P4V4EPegREtqWMxS7l5is/HY3morM/O6Q4J8B1KlsMjWH4VYDmcLIfJWuyc7teyddo53RHkR1sRJ6PtPOZHCLctoZioF2n2LSlWYznEcaZU7pAK8CHvsIiW1LGYpdznx+fjsTxK1mc/30cG+I4iS1MEy28CLE1kOVrWYs813WTrtOea7uRHWxEno+085t2F25ZQTNSLNPuWFKuxHOk4Uyp3ZAX4kHd0REvqWMxS7vPj8/FY9ozg6xHg60m+Hh5frwi+YwJ8vch3jMfXJ4Kvd4CvD/l6e3zHRfAdG+A7jnzHenz9Ivj6Bvj6ka+vx9ccwdc/wNdMvv4e3/ERfAMCfMeTb4DH1xLBNzDA10K+gR7foAi+1gDfIPK1enyDI/hOCPANJt8JHt9JEXwnBvhOIt+JHt8pEXwnB/hOId/JHt9pEXynBvhOI9+pHt/pEXy/DfCdTj7sx38v/MwIvjMCfGeS7wyP7+wIvrMCfGeT7yyP79wIvnMCfOeS7xxy4ff5EXznBfjOJ995Ht+FEXwXBPguJN8FHt/FEXwXBfguJt9FHt+lEXyXBPguJd8lHt/lEXyXBfguJ99lHt+VEXxXBPiuJN8VHt/VEXxXBfiuJt9VHt+1EXzXBPiuJd81Ht/1EXzXBfiuJ991Ht+NEXw3BPhuJN8NHt/NEXw3BfhuJt9NHt+tEXy3BPhuJd8tHt/tEXy3BfhuJ99tHt+dEXx3BPjuJN8dHt/dEXx3BfjuJt9dHt+9sj57f/+eAN+9ZLlf1mL/DfnvAiz3k+U+WYt91vB72Trts4YHyI+2Ik5G23nMHxBuW0IxUS/S7FNrx7Yayz2OM6Vy91SAD3n3RbSkjsUs5c5LPh+P5YOyPnsOHxLge5AsD4taiv83+R8CLA+T5SFRS/Ec/kfZOu05/BHyo62Ik9F2HvNHhNuWUEzUizT71KpWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqdUmxGssQx5lSuSEV4EPeQxEtqWMxS7n77D4fj+Vjsj77TOLRAN9jZHlC1FJ8JvGnAMsTZHlc1FJ8JvFn2ToLpo4nyY+2Ik5G23nMnxRuW0IxUS/S7FOrWtWqVrWqVa1qVata1apWtapVrWpVq1rVqtYlxWosjzrOlMo9WgE+5D0e0ZI6FrOUu8/u8/FYPi3rs88kngrwPU2WZ0Utxb/L8JcAy7NkeUbUUnwm8VfZOu0ziefIj7YiTkbbecyfE25bQjFRL9LsU6ta1apWtapVrWpVa8e2GstTjjOlck9VgA95z0S0pI7FLOXmKT4fj+ULsj47p3s+wPcCWV4StRTndH8LsLxElhdFLcU53d9l67RzupfJj7YiTkbbecxfFm5bQjFRL9LsU6ta1apWtapVrWpVa8e2GsvzjjOlcs9XgA95L0a0pI7FLOXmKT4fj+Wrsj47p3slwPcqWd4QtRTndK8FWN4gy+uiluKc7h+yddo53ZvkR1sRJ6PtPOZvCrctoZioF2n2qVWtalWrWtWqVrWqtWNbjeUVx5lSuVcqwIe81yNaUsdilnLzFJ+Px/ItWZ+d0w0N8L1FlmGyFvt3Bv4ZYBlGlrdlLXZO9y/ZOu2c7h3yo62Ik9F2HvN3hNuWUEzUizT71NqxrcYy1HGmVG5oBfiQ93ZES+pYzFLuvOTz8ViOkPXZc/jwAN8Isrwra7Hn8JEBlnfJMkrWYs/h78nWac/h75MfbUWcjLbzmL8v3LaEYqJepNmn1o5tNZbhjjOlcsMrwIe8UREtqWMxS7nzks/HY/mBrM+ew0cH+D4gy5gIln8HWMaQ5UNZiz2H/0e2TnsO/4j8aCviZLSdx/wj4bYlFBP1Is2+JcVqLKMdZ0rlRleAD3kfRrSkjsUs5T4/Ph+P5bgIvrEBvnHkG+vxjY/g+zjAN558H3t8/43g+yTXfinnQ/yM9mPfZ84+he+2WN+nAb7PyPepxzcxgm9CgG8i+SZ4fJMj+CYF+CaTb5LHNzWCb0qAbyr5pnh802V9BWOZRvE7t/10Kq1Pp7gzZON2T5z6O5NjBuXPko1rrz0zaRwSisGe2RHiIk51KS4ciJWnMlWlQV+m5Jkj6Wno0Y096H/EmEb58yTjlvphrtP/iDGL8uc5fTXX01cokzl9NV/YnFKsHBl5aaR1xM9oP+7TBRF8nwf4FpBloahl264ZWRZSnC9E4xTnPYty377NX5ClUyJqaUg9wctZEN9YElmLnYPlZessmDqrhOs0dVQnX+0w2DPaXkX9VS3cXwnFRL1Is0+t8lZjWeQ4UyqHbd+nD3kJ9ZX058u2Odd+nKrafuprFscUvmY0mDB8fm4kA2LlqcyNNYtd25TWa2k7xoqvRTx+0tfkJNf+mtdIacSqpbZ8Hs9iz2X8/WChx4H48yhvnqfv5nj6LsZ30Tm59n2H9Gzy4TvXnIgWU8cssszzOBCfvx/yd+nO1L9sFZ6zeOcOMxxbLeXxuE5z8mLMNd25XCOlp5IP8xwuO5XW4ecx8NUz1dPOyZ52TorQzsm59u1EehL5MH+eHM/SxdQxMffVfmQH4qNcQus4fqd5rNL3mkzcCWRIKAbbkNcp136eOoHahHtPPPafOHkx7jcmufb38xopPZ58uI/HZcfTOvw8Tr56xnvaOc7TzrER2jku176dSI8lH+6hctmxnjbztcitJ6F1HI+fOPVGeLZj2/gRGfi5ANuQh+MRxyc/S5F+lmXijKE+YQdi5anM8XQPopby+bj5wMkzu4yO4EYc1Is0YhkfnvlwWX6mOab0m48bt54Iz36bEqf+zhT3fbK85/Sl6d9RTp7Zf6Ssz/Yv4qBepEeSD+/KcFl+1wZ+vsa69SS0jr4Y5fSFKYN3hPD5GO3xDHf6ht+T4v4Sfk+07Lthw8iH97C47DBah5/P1249Sa79e6adqQz3F94/Q3+N8NSDd+iqnX34s48ylzuffeRzXw918mK9S83vBzdSGrGMD+8FD/X4+N1B7PMW5XXy7Jt3YiyVizJnLfCctTrnn7Oa9uGchbmE+P3ztvucfE8axxriIpYpg883jjX4sW+eyrxLc+w7PXNsnjsu8OQh/ucUH5aqkhH7zf8aIz8H4DJ8z57rme2pB2XctgqPQz2OCX6OsTw5EIufqzzofFbd+bY5nmc6ebHnkqgXacSqJfdMysM6jzP2wTjPdvaLMN9sMHVOEe4XU8dkagvajzh52v4kfV6eLq2b8cP8lo/91zzbc9R/vDTS+lTqP+Fn6wWej+Ee3ERP3P/nPBD5eVp/tWZxf3y2ePXL/oXZHJuTPOV4fbqzT0bbJ0VuM8/TGymNWOY4eZaOqdfo/us0YQ+3l/slT/2C7TMob5FT/uvuuUh/Lsvdc5lCPuShv/j+B65VCe2DawXKzKY2CJ6vvrxW8DG2PDkQK09lRtK1gp/lYh9zjCz6hnvh8508U3yuXLu+HBvEQb1IIxZ/Z5hPFul74RHuETfEeA/E1DGTxhF9gzh52j6Ozgnj6TqCvl1I9czybMdS7jrDx33Md3xwnZnuiRvzfjSuM4iB/Dytz6TrDN+PRv/CzPfYuRyvz3X2yWj7jMht5u8XjZRGLHOcfErH1Cy6zsjOU4rH+QxPv/B1Btv5vZVFTvmv+14c8/0s1Iv0LPIhj7/j+c7FEZ/72XtVCyg+z3m4L2Hg926kx5nnaKg37/QRz9XnkhvPmd3zkyjODQBIp9J6VW7xi47typUy1y2l+w/q163nwLqW3s2D+vao69azrlufXr3aMlp7N/Wvq6/nXWu/ade+zYOx5w7bb8+7Dijtumop3WPQgL59uje19mnuX9e/ubWuqa/ZtwfvcllplzUXR2vhWD1bWkrIAu82pLTbeqV0U2trz34DWutam+taBnVrHdjUvbVucJ/W3nXNJ/QceExbVN55ROjO/wPdNXMYUy0BAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "join_game",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "game_id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "player",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "use_item",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "target",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "item_type",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "",
      "",
      "eJztXcuO3EgO/Jc+G0a+H/6VxR6MnRlggIFnsfbN6H8fud2isktUclVJkV2yTm4DylAolIwkVfn4/vTX3//5/O3Pv798ffr0/ck/ffrX96ev//385cf/vn77/L9vT5/Mh6ffv/w2/fv84emPP//6/emTff6wusoGn9LrldPfpcDVNWCXR2ftfHl0ibi85jxfbFxcrs3P//7wFB6SdRRk7UME1sHEAdYJYx1ynOmEXFLDfWqR0RYl1NcW0ZjQf1pfs5sZ+VryQikd/I6KOHe+N1WHuQdjAT+YUFru0w2sYbiDCb07WIY7xAp3sKES+odYoO+EbMMtISdOqFroEKF6d0sIdWxNQqgZaxJCfVaTEG6hioTGHZqZ0LjtMhPi8FJOQo7DelkJyTs1QUjBqZNbCOV6S0jBqfuEFJy6T0jBqfuEFJy6T0jBqfuEFJy6T0jBqbuEvIJT9wkpOHWfkLhTR2M9FFnGm1tC4k5NERJ3aoqQuFNThMSdmiIk7tQUIXGnpgiJOzVBKIg7NUVI3KkpQvJOHRx8gYoh3H6OCfJOTRCSd2qCkLxTE4TknZogJO/UBCF5pyYIyTt1n1CUd2qCkLxTE4QUnLosQ8c0jtwSUnDqPiEFp+4TUnDqPiEFp+4TUnDqPiEFp+4TUnDqLqGk4NR9QgpO3Sck79QxLENHTPGWkLxTE4TknZogJO/UBCF5pyYIyTs1QUjeqQlC8k7dJ5TlnZogJO/UBCFxp06hwmSUFFc/cWZxp07TAAaEksm3hMSdOiUfFkJ59crEnTqbCgplG1YKiTt1nl4aEHLu9pNeFnfq7HwBQn6VD2Vxp87ewuU5rKZ8ZXGnzsHD72U5mttJcUXcqfOUwy6EInF5CnO+m5q5l/bH1+T1td7N4TIZnF+A98/UFB8uHkIV8TFrpypl7um5GU1wVayty3DojCXmxgYDM2mDbYeq/SKKj7MHiuhsASbO+dTXxZriQfNpaBuSUTw7OKeM8jnNKWWUz8ROKaN8/nhKGeWz3lPKKJ+rn1HG+t4rjAeR8b2XJA8i45lqGEUZryqGRcarimGR8apiWGS8qhgWGa8qhkXGq4phkfFUVYx3sFPFpKKjZPQBfvswwYzs3WDNqcoYRR1PVcco6niqQkZRx1NVMoo6nqqUUdTxVLWMoo6nKmYUdTxVNaOo46nKGUUdr3qGRUeW/dYuHa38rnIn1fGqZ3h0vOoZHh2veoZHx1PVM7kun3FLu0LgDmHeeYESyzxtOEdPCEM8KVpCRANb7kXTcMeeNM5fw5uua6cHeEFHE2s2dDTd5ELHd15kQ0dTEzZ0dMBmQ0eHMTZ01NzZ0FHLY0NHfYMNnTFWyxqdMVYRdMZYXaPje++xoTPGKoI+HKuTmcwO7+safzhaCfzheCXwhyOWwB+OWQJ/OGp9mPF9NGv84bgl8Icjt4+P78bGiD8cvQHCN6Swxh+OXwJ/OH4J/OH4JfCH45fAH45fAn84fgn84fgl8Ifjt4+P79G1Cz8EwI9r/PH47eOPx28ffzx+61wGR7vOCvH9rRjxx+O3jz8ev3388fjt44/Hbx9/PH67+PjOTYz44/Hbxx+vdT1cGu0af7za7eOP17t9/PGKt49/8PiLbzHEiH/w+ItvAMSHj+/nw4h/cP6M77bDiH9w/ozvhcOIPz7+dvMTfKcaRvzx+O3jHzz+4tvC8OHju7ww4h88/uI7jzDiH5w/47tV8I2P+DYOjPjj35z7+MPxm2DBRGqvnPGH45fAH47fPj6+hpoRfzh+Cfzh+E1x9ueU1/GFL0dlxB+OXwJ/OH4J/OH4TR42kcp+jc8Qv1388fiFX6hTXY/v+CIpNnyHLx5ixB+P3z7+ePwu77emNf54/Pbxx+O3jz8cvxlm3OS4ys8dPpmdEX84fgn84fgl8IfjN8NMmpxX+YnDJ8sy4g/HL4E/HL8E/nD8Zvh9La/HL4dPxmPEH4/fPE+wy2X1+7vD53ox4o/Hbx9/PH77+OPxu7zfsso/3fg8KwJ/PH77+Hj8Wj8P2tGm1MUvcaZS2vHL75636DZmZulwwX1hB5eal4X2rhBkXIK35HJ1XWDrl/1F2ym0E7ef1HHLeQjquJs9BHXcKB+COu7BDXVX+h7jgpuTKBeKeXMHJOOFrb6zicS1y8TimBoODpsrPD0bfGltONhXp8NHgod7yliX7yHxzVMijA0Qrs2k7LjbDjemKD6ceCnO16aSV11kY6rk+3jKAszd26d8YU4O43rMS5oTtOoC8X4cDOC+wZ0fkswP9B6yAola7Pr1kNmEIvMKBy8Yj/QsMpvgpZ4hsy1tb8Gp9z2LTCZI5hG67jTeeoo5HKlRmm2YJlHRaJ4lSe0LsmhMLOcsuBDbT0ToEivnl4VEbz547k+CNyb/vgsFkwUF28UGuILwlL45WcQabHESoch4qrRLkRrgmBbTLiKbJHmhM57T3E2n/THylc7GZOjD6FgLp1VYWxzRY1yBXzJcKVRk2OoAu7754Qm7up96bkzi/gV0UUlWN+a0/wJy99Pbjbn4D6oLfDZ2tq2W0asdDCw+N12r/JQFT84cLMiNoe27eIGdYVmzr430Gye4OQsFeXRpZBW021igcCR7DyfWTGo36cs97PEcbQ/7YCzcIZhwewyV21gBse8WJnRvgWcF+26xa8F1iGX5pJNXh4G5jWUTRzKqkLhPf68OAXQbCy00GeGjsiYjfODSZIQPGZqMxt2am9G4A3Mz4nBVXkYcJszLSN6zKUYKnp3cwijXW0Ybi2s0GSl4NsFIwbMJRgqeTTBS8GyCkYJnE4wUPJtgpODZBCMFzyYYiXt2NBaK6mj87UHJbmNBlSYjcc8mGYl7NslI3LNJRuKeTTIS92ySkbhnk4zEPZtkJO7ZJCN5zw4OPlFN4KuvNRuL6DQZyXs2xUjesylG8p5NMZL3bIqRvGdTjOQ9m2Ik79kUI3nPphgpeHZZRpFpSLlltLFwUpORgmcTjBQ8m2Ck4NkEIwXPJhgpeDbBSMGzCUYKnk0wUvBsgpG8Z8ewjCKx2W3jJyO/sVhWk5G8Z1OM5D2bYiTv2RQjec+mGMl7NsVI3rMpRvKeTTGS92yKkbhnp7AsTkpx9auo31ggfSSjaTADRsnkFSNxz07Jh4VRXr21jUXYBzLKBmbU2WzDWiNxz84W1jzY7NztVz+/sdD7SEbOL4di+FV+5DeWhh/JyFu4PIfVrDG/sZj8SEbL2gabo7mdWec3lp8fyWjfGS8wwzW1m+OjR5kk72Cnj+iXCa77p036jVXzv7ws4qPXgScC2boMjM5YYpptMDApN9ihY939xpYGj6miswWYONesKto4n6r4ZRF2HdRRPE84qY7y2c05dZTPyc6po3wmeU4d5fPfc+oon7WfU8f3Xms8io7vvTh5FB3PVM0o6rixd82l414dr3qGR8ernuHR8apneHS86hkeHa96hkfHU9UzU3kGOvpmp6INHT3sRm1Nu1fjPTqeqp5R1PFU9YyijqeqZ/R03Nhl69Jxr46nqmcUdTxVPaOo46nqGUUdT1XPKOp4qnpGUcernuHR8apneHS86hkeHa96hkVH+Z0BT6rjVc/w6HiqeiYDbetKu3TgDmHeeYESyzyROEdPCNN90voRtfYu+5dm+GKV/6MdGroW1lg42+7m7H40snajVczzvd5sjO/83Arv3lQr/N1TrfBSjGqFFx69Vs6Vj2h66ODYFO+bmejzmUDlI5oMka3Q/kG2wrsH3Qx9z/1m3m7czVc4jr6ZbA+nfWz1KroZ2q3oZmi/opuhHYtuhvYsuhlawdHN0B7p4XyO4KnjcAKMaqE923x5xWjvZb0D2tM574AvN9h1B3DX0K42We6A92jOO+Cdn+0OZct/K5ytbJtjJ4KFZrgBk83QOAl+Tsli28y9bjlu7nHgqdUdDjy1usOBp1b3OPCPZnc4cPBbBlBgpY5rljsVaIUHNdUKFSRAShRTk0K412YJl7E/1E6tNhblks32pzkubI1/xN3KPYnOS7P9mc5Ls/2pzkuzvbnO8/M/ExVnjw==",
      "",
      "",
      "",
      "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XMI09qHz2rmEaSzjvE7GeZ2M8zoZ53UyzutknNfJOK+TcV4n47xOxnmdjPM6Ged1Ms7rZJzXyTivk3FeJ+O8TsZ5nYzzOhnndTLO62Sc18k4r5NxXifjvE7GeZ2M8zoZ53UyzutknNfJOK+TcV4n47xOxnmdjPM6Ged1Ms7rZJzXyTivk3FeJ+O8TsZ5nYzzOhnndTLO62Sc12Kc12Kc12Kc12Kc13opjV2M81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM81qM84oXA72uKUplrylKZq8pSmevKUporylKaa8pSmqvKUprrylKbK8pTm0Z8nVNcWrLoK9rilNbhn1dU5zaMvDrmuLUlqFf1xSntgz+uqY4tWX41zXFqS0DwK4pTm0ZAnZNcWrLILBrilNbhoFdU5zaMhDsmuLUlqFg1xSntgwGu6Y4tWU42DXFqS0Dwq4pTm0ZEnZNcWrLoLBrilNbhoVdU5zaMjDsmuLUlqFh1xSntgwOu6Y4tWV42DXFqS0DxK4pTm0ZInZNcWrLILFrilNbholdU5zaMlDsmuLUlqFi1xSntgwWu6Y4tWW42DXFqS0Dxq4pTm0ZMnZNcWrLoLFrilNbho1dU5zaMnDsmuLUlqFj1xSntgweu6Y4tWX42DXFqS0DyK4pTm0ZQnZNcWrLILJrilNbhpFdU5zaMpDsmuLUlqFk1xSmtuFYsnAsWTiWLBxLFi+mtuFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsW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",
      "",
      "eJzV3d2OHcd1huF74bEQ7FprVXWXbiXIgZE4gAHDDmKfGbr3tADxJ1A3Z+RuTz06kgR0Db/NGb4lUfsZ/uPTn//6n3/4+5/++pe/ffrxH59e/9Y//fjv//j0t//5w19+/ue//f0P//v3Tz++fvj0x7/81/HXn3749N9/+vMfP/3YfvrhV09FVc9fnjz+fmxfnp7j5PG2bZ8ffn39wNl/+o8fjh0D2bEhO3Zkx0R2tJcypClDQhmSypBShihVbUpWm9LVpoS1KWUNpayhlDWUsoZS1lDKGkpZQylrKGUNpayhlDWVsqZS1lTKmkpZUylrKmVNpayplDWVsqZS1lLKWkpZSylrKWUtpayllLWUspZS1lLKWkpZu1LWrpS1K2XtSlm7UtaulLUrZe1KWbtS1q6UdShlHUpZh1LWoZR1KGUdSlmHUtahlHUoZR1KWTelrJtS1k0p66aUdVPKuill3ZSybkpZN6Wsm1LWXSnrrpR1V8q6K2XdlbLuSll3pay7UtZdKeuulHUqZZ1KWadS1qmUdSplnUpZp1LWqZR1KmWdSlnbS0lreyltbS8lru2l1LW9lLy2l9LX9lIC215KYdtLSWx7MY2FOBbTWAdkOSLLIVmOyXJQlqOyHJbFuKzGwKzGyKzG0KzG2KzG4KzG6KzG8KzG+KzGAK3GCK3GEK3GGK3GIK3GKK3GMK3GOK3GQK3GSK3GUK3GWK3GYK3GaK3GcK3GeK3GgK3GiK3GkK3GmK3GoK3GqK3GsK3GuK3GwK3GyK3G0K3G2K3G4K3G6K3G8K3G+K3GAK7GCK7GEK7GGK7GIK7GKK7GMK7GOK7GQK7GSK7GUK7GWK7GYK7GaK7GcK7GeK7GgK7GiK7GkK7GmK7GoK7GqK7GsK7GuK7GwK7GyK7G0K7G2K7G4K7G6K7G8K7G+K7GAK/GCK/GEK/GGK/GIK/GKK/GMK/GOK9gnFcwzisY5xWM84qX0thgnFcwzisY5xWM8wrGeQXjvIJxXsE4r2CcVzDOKxjnFYzzCsZ5BeO8gnFewTivYJxXMM4rGOcVjPMKxnkF47yCcV7BOK9gnFcwzisY5xWM8wrGeQXjvIJxXsE4r2CcVzDOKxjnFYzzCsZ5BeO8gnFewTivYJxXMM4rGOcVjPMKxnkF47yCcV7BOK9gnFcwzisY5xWM8wrGeQXjvIJxXsE4r2CcVzDOKxjnFYzzCsZ5BeO8gnFewTivYJxXMM4rGOcVjPMKxnkF47yCcV7BOK9gnFcwzisY5xWM8wrGeQXjvIJxXsE4r2CcVzDOKxjnFYzzCsZ5BeO8gnFewTivYJxXMM4rGOcVjPMKxnkF47yCcV7JOK9knFcyzisZ55UvpbHJOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yScV7JOK9knFcyzisZ55WM80rGeSXjvJJxXsk4r2ScVzLOKxnnlYzzSsZ5JeO8knFeyTivZJxXMs4rGeeVjPNKxnkl47yKcV7FOK9inFcxzqteSmOLcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnkV47yKcV7FOK9inFcxzqsY51WM8yrGeRXjvIpxXsU4r2KcVzHOqxjnVYzzKsZ5FeO8inFexTivYpxXMc6rGOdVjPMqxnl1xnl1xnl1xnl1xnn1l9LYzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivzjivwTivwTivwTivwTiv8VIaOxjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjnNRjntTHOa2Oc18Y4r41xXttLaezGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8NsZ5bYzz2hjntTHOa2Oc18Y4r41xXhvjvDbGeW2M89oY57UxzmtjnNfGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8NsZ5bYzz2hjntTHOa2Oc18Y4r41xXhvjvDbGeW2M89oY57XddF7z9WVJf9W9Jfca++SSe419csm9xj655F5jn1xyr7FPLrnX2CeX3Gvsk0vuNfbBJTed15NLmMbedF5PLmEae9N5PbmEaexN5/XkEqaxN53Xk0uYxt50Xk8uYRp703k9uYRp7E3n9eQSprE3ndeTS5jG3nReTy5hGnvTeT25hGnsTef15BKmsTed15NLmMbedF5PLmEae9N5PbmEaexN5/XkEqaxN53Xk0uYxt50Xk8uYRp703k9uYRp7E3n9eQSpbH7Tef15BKlsftN5/XkEqWx+0tp7H7TeT25RGnsftN5PblEaex+03k9uOSm83pyCdPYm87rySVMY286ryeXMI296byeXMI09qbzenIJ09ibzuvJJUxjbzqvJ5cwjb3pvJ5cwjT2pvN6cgnT2JvO68klTGNvOq8nlzCNvem8nlzCNPam83pyCdPYm87rySVMY286ryeXMI296byeXMI09qbzenIJ09ibzuvJJUxjbzqvJ5cwjb3pvJ5cwjT2pvN6cgnTWMZ57Yzz2hnntTPOa2ec1844r51xXjvjvHbGee2M89oZ57UzzmtnnNfOOK+dcV4747x2xnntjPPaGee1M85rZ5zXzjivnXFeO+O8dsZ57Yzz2hnntTPOa2ec1844r51xXjvjvHbGee2M89oZ57UzzmtnnNfOOK+dcV4747x2xnntjPPaGee1M85rZ5zXzjivnXFeO+O8JuO8JuO8JuO8JuO85ktp7GSc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12Sc12ScV3sx0OuYolT2mKJk9piidPaYooT2mKKU9piipPaYorT2mKLE9pji1JYhX8cUp7YM+jqmOLVl2NcxxaktA7+OKU5tGfp1THFqy+CvY4pTW4Z/HVOc2jIA7Jji1JYhYMcUp7YMAjumOLVlGNgxxaktA8GOKU5tGQp2THFqy2CwY4pTW4aDHVOc2jIg7Jji1JYhYccUp7YMCjumOLVlWNgxxaktA8OOKU5tGRp2THFqy+CwY4pTW4aHHVOc2jJA7Jji1JYhYscUp7YMEjumOLVlmNgxxaktA8WOKU5tGSp2THFqy2CxY4pTW4aLHVOc2jJg7Jji1JYhY8cUp7YMGjumOLVl2NgxxaktA8eOKU5tGTp2THFqy+CxY4pTW4aPHVOc2jKA7Jji1JYhZMcUp7YMIjumOLVlGNkxxaktA8mOKU5tGUp2TGFq2xxL1hxL1hxL1hxL1l5MbZtjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjyZpjycKxZOFYsnAsWTiWLF5MbcOxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkoVjycKxZOFYsnAsWTiWLBxLFo4lC8eShWPJwrFk4ViycCxZOJYsHEsWjiULx5KFY8nCsWThWLJwLFk4liwcSxaOJQvHkqVjydKxZOlYsnQsWb6Y2qZjydKxZOlYsnQsWTqWLB1Llo4lS8eSpWPJ0rFk6ViydCxZOpYsHUuWjiVLx5KlY8nSsWTpWLJ0LFk6liwdS5aOJUvHkqVjydKxZOlYsnQsWTqWLB1Llo4lS8eSpWPJ0rFk6ViydCxZOpYsHUuWjiVLx5KlY8nSsWTpWLJ0LFk6liwdS5aOJUvHkqVjydKxZOlYsnQsWTqWLB1Llo4lS8eSpWPJ0rFk6ViydCxZOpYsHUuWjiVLx5KlY8nSsWTpWLJ0LFk6liwdS5aOJUvHkqVjydKxZOlYsnQsWTqWLB1Llo4lS8eSpWPJ0rFk6ViydCxZOpYsHUuWjiVLx5KlY8nSsWTpWLJ0LFk6liwdS5aOJSvHkpVjycqxZOVYsnoxtS3HkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS1aOJSvHkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS1aOJSvHkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS1aOJSvHkpVjycqxZOVYsnIsWTmWrBxLVo4lK8eSlWPJyrFk5ViycixZOZasHEtWjiUrx5KVY8nKsWTlWLJyLFk5lqwcS9YdS9YdS9YdS9YdS3acd6Ywte2OJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJeuOJevnluznP/Fv/HLu5z/nrn93UosRXx7O/Prs8cP8+uns9cvDOb/5uLF9mXRa3aWTzm3Z2kmnFV476bTGayedVnntpNM6r510Wum1k05rvXbSabXXTvLqfW7Ulk46t2prJ3n1Prdrayd59T63bGsnefU+t21rJ3n1Prduayd59T63b2snefU+t3BrJ3n1Prdxayd59T63cmsnefU+t3NrJ3n1Prd0ayd59T63dWsnefU+t3ZrJ3n1Prd3/8pJ9Wq/PFzx+n+TTj7yK/fPH/lV29en+9cX8OGtf/oFfPjN8PQLuLpH9v51U8R3X8DePz+7//w/Jr7Mr5Nn55f/SdFe8fXnZX4ZdG4EVw66ukOWDbq6QZYNuro/lg26uj2WDbq6O5YNuro5lg26ugmWDboq+7JBWqnPfeHKQVqpz63hykFaqc/d4cpBWqnPDeJvGzS39vUH2d9YFHN8+c+O1vbvv9L8/IH3+vbjfnnPyTlb/N2sf+AOWLj+gQtj3fpzT/m7Wf/AVbRw/QP31sL1D1xyC9e/60acH/nbTOdGdO2kd92KHzvpXVfdx0561/31sZPedSl95KRxbknXTnrX9fGxk951J3zspHeF/mMncfUe5+Z07SSu3uPcoK6dxNV7nJvUpZPOberaSV69z63q2klevc/t6tpJXr3PLevaSV69z23r2klevc+t69pJXr3P7evaSV69zy3s2klevc9t7NpJXr0vrezCSV69L63swklevS+t7MJJXr0vrezCSV69L63swklevS+t7MJJXr0vrezCSV69L63swkkfXu/f8qbjXp+/Z0mvbzb0/mX+h5f+2fkffis8O//iBsmRXxbV6/vfmObJNziNK627btDF7bFu0MXdsWzQldNdN+ji3lg36OLWWDfo4s5YN+jiFlg36KLr6wZppb6SuesGaaW+UrnLBl2Z3HWDtFJfedx1gx4o9W96++Lxb66fsWJWvfFK33j74riCu7+T9Q/cAQvXP3BhLFz/wO2ycP0DV9HC9Q/cW+vWX5Hh38n6d92I23d/kId/g+lKGK+c9K5b8WMnveuq+9hJ77q/PnbSuy6lj530rpvmYye96/r42EnvuhM+dNKVOF45yav3lTpeOcmr95U8XjnJq/eVPl45yav3lRNeOcmr95XoXTnJq/eVvV05yav3lZJdOcmr95WSXTnJq/eVkl05iav3dqVkV07i6r1dKdmVk7h6by+u3tuVkl05iav3dqVkV07i6r1dKdmFk66U7MpJXr2vlOzKSV69r5Tsykleva+U7MpJXr2vlOzKSV69r5Tsv27Sk2853q5E7e9l/offCs/Ov7hBKr6ZX9//dmhPfz1f3CArJ13cICsnXdwgKydd3CArJ13cICsnXdwgCyddSd2Vky5uhZWTLkq/cpJX7yupu3KSV+8rqbtyklfvK6m7cpJX7yupu3KSV+8rqbtyklfvK327cpJX7yslu3KSV+8rKbtyklfvKy27cpJX7ysxu3KSV+8rNbtyklfvKzm7cpJX7ys9u3KSV+8rQbtyklfvK0W7cpJX7yscu3KSV+8rxrpyklfvK3C6cpJX7ysaunKSV+8r77ly0ofX+7f9wcqvLzNe7ZsV/esL+PDWP/0CPvxmePoFfPg98k+/gG+f/uYFfPit8/QL+M131OeDv/km+eXglX2sfX452Fs/OXjVmzcPXvw67/H6erDGycGLX19vH7z4un774NXX075/c3D79cErudW/+ZaHo7WTgxd33dsHLz6Pbx+8+Dy+ffDi8zja+Hrw7Evuyv30vb45mL86uJ+/HS9en78/UFSd3Iz7+Vvm3j52+kvqzWPnbz17+9jpJ/7tY6ef9reP/XM/Jefv03jz2Pl7Kd4+9s/9lJy/J+HtY6e/Dr5z7Kef/g/4K8MW",
      "",
      "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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\n// mod lib;\nmod item_lib;\nmod num_lib;\n\ncontract Numer0n {\n    use dep::std;\n    use dep::std::option::Option;\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map, public_state::PublicState, singleton::Singleton, immutable_singleton::ImmutableSingleton,\n        },\n        oracle::debug_log::{\n            debug_log,\n            debug_log_field,\n            debug_log_format\n        },\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        selector::compute_selector,\n        types::address::AztecAddress,\n        types::type_serialization::{ // serialization methods for using booleans and field\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },   \n    };\n\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit, \n            assert_current_call_valid_authwit_public\n        },\n    };\n\n    use dep::field_note::field_note::{FieldNote, FieldNoteMethods, FIELD_NOTE_LEN};\n\n    use crate::num_lib;\n    use crate::item_lib;\n\n    use crate::types::{\n        secret_num_note::{SecretNumberNote, SecretNumberNoteMethods, SECRET_NUM_NOTE_LEN},\n        player::{PLAYER_SERIALIZED_LEN, Player, PlayerSerializationMethods},\n        result::{RESULT_SERIALIZED_LEN, Result, ResultSerializationMethods},\n        game::{GAME_SERIALIZED_LEN, Game, GameSerializationMethods},\n    };\n\n    global SECRET_NUM_SLOT = 2;\n    global GAME_ID_SLOT = 5;\n\n    // storage\n    struct Storage {\n        players: Map<PublicState<Player, PLAYER_SERIALIZED_LEN>>,\n        secret_num: Map<Singleton<SecretNumberNote, SECRET_NUM_NOTE_LEN>>, \n        results_one: Map<PublicState<Result, RESULT_SERIALIZED_LEN>>, // round => Result: { eat, bite }\n        results_two: Map<PublicState<Result, RESULT_SERIALIZED_LEN>>,\n        game_id: ImmutableSingleton<FieldNote, FIELD_NOTE_LEN>,\n        game: PublicState<Game, GAME_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n      fn init(context: Context) -> Self {\n        Storage {\n            players: Map::new(\n                context,\n                1,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        PlayerSerializationMethods,\n                    )\n                },\n            ),\n            secret_num: Map::new(\n                context,\n                SECRET_NUM_SLOT,\n                |context, slot| {\n                    Singleton::new(\n                        context, \n                        slot, \n                        SecretNumberNoteMethods,\n                    )\n               },\n            ),     \n            results_one: Map::new(\n                context,\n                3,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        ResultSerializationMethods,\n                    )\n                },\n            ),\n            results_two: Map::new(\n                context,\n                4,\n                |context, slot| {\n                    PublicState::new(\n                        context,\n                        slot,\n                        ResultSerializationMethods,\n                    )\n                },\n            ),\n            game_id: ImmutableSingleton::new(\n                context,\n                GAME_ID_SLOT,\n                FieldNoteMethods,\n            ),\n            game: PublicState::new(\n                context,\n                6,\n                GameSerializationMethods,\n            ),\n        }\n      }\n    }\n    \n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(game_id: Field, player: Field) {\n        assert(game_id != 0, \"invalid game_id:zero\");\n        let mut game_id_note = FieldNote::new(game_id);\n        storage.game_id.initialize(&mut game_id_note, Option::none(), false);\n\n        let selector = compute_selector(\"_add_player(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [player, 1]);\n    }\n\n    #[aztec(private)]\n    fn join_game(game_id: Field, player:Field) {\n         assert(game_id != 0, \"invalid game_id:zero\");\n        let game_id_note = storage.game_id.get_note();\n        assert(game_id == game_id_note.value, \"invalid game_id\");\n\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_add_player(Field,Field)\"),\n            [player, 2]\n        ); \n    }\n\n    #[aztec(private)]\n    fn add_num(player: Field, secret_num:Field) {\n        assert(context.msg_sender() == player, \"invalid player\");\n        // check caller validitiy\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_assert_is_player(Field)\"),\n            [player]\n        );\n\n        num_lib::is_valid_nums(secret_num);\n\n        let mut secret_num_note = SecretNumberNote::new(secret_num, player);\n        storage.secret_num.at(player).initialize(\n            &mut secret_num_note, \n            Option::some(secret_num_note.owner),\n            true\n        );\n\n       context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_add_num(Field)\"),\n            [player]\n        ); \n\n    }\n\n    #[aztec(private)]\n    fn call_num(target: AztecAddress, call_num:Field) {\n\n        let target_address: Field = target.address;\n\n        // replaced if-else with assert as it leads to an errror at get_note()\n        assert(target_address != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        // context.call_public_function(\n        //     context.this_address(), \n        //     compute_selector(\"_assert_invalid_caller(Field)\"),\n        //     [context.msg_sender()]\n        // ); \n\n        let secret_num_note: SecretNumberNote = storage.secret_num.at(target_address).get_note(true);\n        let secret_num: Field = secret_num_note.secret_num;\n\n        num_lib::is_valid_nums(call_num);\n        let result = num_lib::check_result(call_num, secret_num);\n\n        // records results\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_record_result(Field,Field,Field,Field)\"), \n            [context.msg_sender(), call_num, result[0], result[1]]\n        ); \n    }\n\n   #[aztec(private)]\n    fn use_item(target: AztecAddress, item_type: Field) {\n        \n        let target_address: Field = target.address;\n        assert(target_address != context.msg_sender(), \"caller shouldn't be target\");\n        assert_current_call_valid_authwit(&mut context, target);\n\n        // context.call_public_function(\n        //     context.this_address(), \n        //     compute_selector(\"_assert_invalid_caller(Field)\"),\n        //     [context.msg_sender()]\n        // ); \n\n        let mut result: Field = 0;\n        if (item_type == item_lib::ITEM_HIGH_LOW) {\n            result = item_lib::get_high_and_low(storage.secret_num.at(target_address));\n        // } else if (item_type == item_lib::ITEM_SLASH) {\n        // } else if (item_type == item_lib::ITEM_TARGET) {\n        // } else if (item_type == item_lib::ITEM_CHANGE) {\n        // } else if (item_type == item_lib::ITEM_SHUFFLE) {\n        } else {\n            assert(false, \"inavlid item type\");\n        }\n\n        // records results\n        context.call_public_function(\n            context.this_address(), \n            compute_selector(\"_record_item_result(Field,Field,Field)\"), \n            [context.msg_sender(), item_type, result]\n        ); \n    }\n\n    #[aztec(public)]\n    internal fn _record_item_result(_caller: Field, _item_type:Field, _item_result:Field) {\n         assert(!storage.game.read().finished, \"game has already been finished\");\n         let player_id = storage.players.at(_caller).read().player_id;\n         let mut game = storage.game.read(); \n         let current_round = game.round;\n\n         if (player_id == 1) {\n            assert(game.is_first, \"invalid turn for player 1\");\n            let mut result_one = storage.results_one.at(current_round).read();\n            assert(result_one.call_num == 0, \"item should be used before call\");\n            assert(result_one.item == 0, \"an item has already been used\");\n            result_one.item = _item_type;\n            result_one.item_result = _item_result;\n            storage.results_one.at(current_round).write(result_one);\n\n         } else if (player_id == 2) {\n            assert(!game.is_first, \"invalid turn for player 2\");\n            let mut result_two = storage.results_two.at(current_round).read();\n            assert(result_two.call_num == 0, \"item should be used before call\");\n            assert(result_two.item == 0, \"an item has already been used\");\n            result_two.item = _item_type;\n            result_two.item_result = _item_result;\n            storage.results_two.at(current_round).write(result_two);\n         } else {\n            assert(false, \"invalid player\");\n         }\n    }\n\n    // public state read count: 18\n    #[aztec(public)]\n    internal fn _record_result(_caller: Field, _call_num:Field, _eat:Field, _bite:Field) {\n      assert(!storage.game.read().finished, \"game has already been finished\");\n      let player_id = storage.players.at(_caller).read().player_id; // 2 or 1\n      let mut result = Result::new(_call_num, _eat, _bite, 0, 0);\n\n      let mut game = storage.game.read(); // 8 or 2\n      let current_round = game.round;\n\n      \n      if (player_id == 1) {\n         assert(game.is_first, \"invalid turn for player 1\");\n        let result_one = storage.results_one.at(current_round).read(); // 5 or 3 or 1\n        result.item = result_one.item;\n        result.item_result = result_one.item_result;\n\n        storage.results_one.at(current_round).write(result);\n\n        game.is_first = false;\n        storage.game.write(game);\n\n      } else if (player_id == 2) {\n        assert(!game.is_first, \"invalid turn for player 2\");\n        let result_two = storage.results_two.at(current_round).read(); // 5 or 2\n        result.item = result_two.item;\n        result.item_result = result_two.item_result;\n\n        storage.results_two.at(current_round).write(result);\n\n        // check if either of the players win\n        let one_eat = storage.results_one.at(current_round).read().eat; \n        if ((_eat == 3) | (one_eat == 3)) {\n           game.finished = true;\n        } else {\n           game.is_first = true;\n           game.round = current_round + 1;\n        }\n        storage.game.write(game);\n      } else {\n        assert(false, \"invalid player\");\n      }\n    }\n\n    // // public state read count: 4\n    // #[aztec(public)]\n    // internal fn _assert_invalid_caller(_caller: Field) {\n    //     assert(storage.game.read().started, \"game hasn't been started yet\");\n\n    //     let player = storage.players.at(_caller).read();\n    //     let is_first = storage.game.read().is_first;\n        \n    //     if ((player.is_player) & (player.player_id == 1)) {\n    //         assert(is_first, \"invalid turn for player 1\");\n    //     } else if ((player.is_player) & (player.player_id == 2)) {\n    //         assert(!is_first, \"invalid turn for player 2\");\n    //     } else {\n    //         assert(false, \"invalid player\");\n    //     }\n    // }\n\n    #[aztec(public)]\n    internal fn _assert_is_player(_player: Field) {\n        assert(storage.players.at(_player).read().is_player, \"not player\");\n    }\n\n    #[aztec(public)] \n    internal fn _add_player(_player:Field, _player_id: Field) {\n        assert(!storage.game.read().started, \"game has already been started\");\n        assert(_player != 0, \"invalid player address\");\n\n        let mut player = storage.players.at(_player).read();\n        assert(!player.is_player, \"player already exists\");\n\n        player.player_id = _player_id;\n        player.is_player = true;\n\n        storage.players.at(_player).write(player);\n\n        // add player addrs into game\n        let mut game = storage.game.read();\n        game.players[_player_id - 1] = _player;\n        storage.game.write(game);\n    }\n\n    #[aztec(public)] \n    internal fn _add_num(_player:Field) {\n        assert(!storage.game.read().started, \"game has already started\");\n\n        let player = storage.players.at(_player).read();\n        let mut game = storage.game.read();\n\n        if (player.player_id == 1) {\n            assert(!game.is_number_set[0], \"num 1 already has been set\");\n            game.is_number_set[0] = true;\n        } else {\n            assert(!game.is_number_set[1], \"num 2 already has been set\");\n            game.is_number_set[1] = true;\n        }\n\n        if ((game.is_number_set[0]) & (game.is_number_set[1])) {\n            game.round = 1;\n            game.is_first = true;\n            game.started = true;\n        }\n\n        storage.game.write(game);\n    }\n\n    unconstrained fn get_player(player: Field) -> Player {\n        storage.players.at(player).read()\n    }\n\n    unconstrained fn get_winner() -> Field {        \n        let current_round = storage.game.read().round;\n        let latest_result_one = storage.results_one.at(current_round).read();\n        let latest_result_two = storage.results_two.at(current_round).read();\n\n        if (!storage.game.read().finished) {\n            0\n        } else if ((latest_result_one.eat == 3) & (latest_result_two.eat != 3)) {\n            1\n        } else if ((latest_result_one.eat != 3) & (latest_result_two.eat == 3)) {\n            2\n        } else {\n            3 // draw\n        }\n\n    }\n\n    // for testing purpose\n    // q: how to only allow note an owner to view her own secret num\n    unconstrained fn get_secret_num(player: Field) -> Field {\n        let note = storage.secret_num.at(player).view_note();\n        note.secret_num\n    }\n\n    unconstrained fn get_result(player: Field, round: Field) -> Result {\n       let player = storage.players.at(player).read();\n       let mut result = Result::new(0, 0, 0, 0, 0);\n\n       if (player.player_id == 1) {\n           result = storage.results_one.at(round).read();\n       } else {\n           result = storage.results_two.at(round).read();\n       }\n\n       result\n    }\n\n    unconstrained fn get_round() -> Field {\n        storage.game.read().round\n    }\n\n    unconstrained fn get_is_first() -> bool {\n        storage.game.read().is_first\n    }\n\n    unconstrained fn get_is_started() -> bool {\n        storage.game.read().started\n    }\n\n    unconstrained fn get_is_finished() -> bool {\n       storage.game.read().finished\n    }\n\n    // for testing purpose\n    unconstrained fn get_high_and_low(num:Field) -> Field {\n        item_lib::_get_high_and_low(num)\n    }\n\n    unconstrained fn get_game() -> Game {\n        storage.game.read()\n    }\n\n    unconstrained fn check_result(\n        call_num: Field, \n        secret_num: Field\n    ) -> [Field;2] {\n        num_lib::_check_result(call_num, secret_num)\n    }\n\n    unconstrained fn is_valid_nums(_num: Field) -> [u16;3] {\n        num_lib::_is_valid_nums(_num)\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (storage_slot == GAME_ID_SLOT) {\n            note_utils::compute_note_hash_and_nullifier(FieldNoteMethods, note_header, serialized_note)\n        } else {\n            // should derive storage slot for mapped values correctly\n            // https://github.com/AztecProtocol/aztec-packages/blob/2db2e2a3091e2552f8e8055d1bc07bd5016455ff/yarn-project/aztec-nr/aztec/src/state_vars/map.nr#L32C1-L32C1\n            note_utils::compute_note_hash_and_nullifier(SecretNumberNoteMethods, note_header, serialized_note)\n        }\n    }\n}\n",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/main.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "95": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "98": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "103": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "104": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "106": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "110": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "112": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "119": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "120": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "123": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "126": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "128": {
        "source": "use crate::types::point::Point;\nuse dep::protocol_types::constants::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(_contract_address: Field, _storage_slot: Field, _encryption_pub_key: Point, _preimage: [Field; N]) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(contract_address: Field, storage_slot: Field, encryption_pub_key: Point, preimage: [Field; N]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(contract_address, storage_slot, encryption_pub_key, preimage), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n",
        "path": "/aztec/oracle/logs.nr"
      },
      "129": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "130": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "133": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/immutable_singleton.nr"
      },
      "134": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "137": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "141": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "147": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "150": {
        "source": "use dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__SIGNATURE_PAYLOAD};\nuse dep::aztec::{\n  context::{PrivateContext, PublicContext, Context},\n  types::address::AztecAddress,\n  abi::hash_args,\n  hash::pedersen_hash,\n};\n\nglobal IS_VALID_SELECTOR = 0xe86ab4ff;\nglobal IS_VALID_PUBLIC_SELECTOR = 0xf3661153;\n\n// @todo #2676 Should use different generator than the payload to limit probability of collisions.\n\n// docs:start:assert_valid_authwit\n// Assert that `on_behalf_of` have authorized `message_hash` with a valid authentication witness\npub fn assert_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_private_function(on_behalf_of.address, IS_VALID_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit\n\n// docs:start:assert_current_call_valid_authwit\n// Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n// docs:start:assert_valid_authwit_public\n// Assert that `on_behalf_of` have authorized `message_hash` in a public context\npub fn assert_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, message_hash: Field) {\n    let result = context.call_public_function(on_behalf_of.address, IS_VALID_PUBLIC_SELECTOR, [message_hash])[0];\n    context.push_new_nullifier(message_hash, EMPTY_NULLIFIED_COMMITMENT);\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n// docs:end:assert_valid_authwit_public\n\n// docs:start:assert_current_call_valid_authwit_public\n// Assert that `on_behalf_of` have authorized the current call in a public context\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    // message_hash = H(caller, contract_this, selector, args_hash)\n    let message_hash = pedersen_hash([context.msg_sender(), context.this_address(), context.selector(), context.args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD);\n    assert_valid_authwit_public(context, on_behalf_of, message_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n// docs:start:compute_authwit_message_hash\n// Compute the message hash to be used by an authentication witness \npub fn compute_authwit_message_hash<N>(caller: AztecAddress, target: AztecAddress, selector: Field, args: [Field; N]) -> Field {\n    let args_hash = hash_args(args);\n    pedersen_hash([caller.address, target.address, selector, args_hash],\n        GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n}\n// docs:end:compute_authwit_message_hash",
        "path": "/authwit/auth.nr"
      },
      "152": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote {\n            value,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    pub fn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> FieldNote {\n    FieldNote::deserialize(serialized_note)\n}\n\nfn serialize(note: FieldNote) -> [Field; FIELD_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: FieldNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: FieldNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: FieldNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut FieldNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: FieldNote) {\n    assert(false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\");\n}\n\nglobal FieldNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/field_note/field_note.nr"
      },
      "154": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\n// global SECRET_NUM_NOTE_LEN: Field = 4;\nglobal SECRET_NUM_NOTE_LEN: Field = 2;\n\nstruct SecretNumberNote {\n    secret_num: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl SecretNumberNote {\n    pub fn new(secret_num: Field, owner: Field) -> Self {\n        SecretNumberNote {\n            secret_num,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; SECRET_NUM_NOTE_LEN] {\n        let res: [Field; SECRET_NUM_NOTE_LEN] = [self.secret_num, self.owner];\n        res\n    }\n\n    pub fn deserialize(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> Self {\n        SecretNumberNote { secret_num: serialized_note[0], owner: serialized_note[1], header: NoteHeader::empty() }\n    }\n    \n    pub fn compute_note_hash(self) -> Field {\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(SecretNumberNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn serialize(note: SecretNumberNote) -> [Field; SECRET_NUM_NOTE_LEN] {\n    note.serialize()\n}\n\nfn deserialize(serialized_note: [Field; SECRET_NUM_NOTE_LEN]) -> SecretNumberNote {\n    SecretNumberNote::deserialize(serialized_note)\n}\n\nfn compute_note_hash(note: SecretNumberNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: SecretNumberNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: SecretNumberNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut SecretNumberNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: SecretNumberNote) {\n    note.broadcast(context, slot);\n}\n\nglobal SecretNumberNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/secret_num_note.nr"
      },
      "155": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal RESULT_SERIALIZED_LEN: Field = 5;\n\n\nstruct Result {\n    call_num: Field,\n    eat: Field,\n    bite: Field,\n    item: Field,\n    item_result: Field\n}\n\nimpl Result {\n    pub fn new(call_num: Field, eat: Field, bite: Field, item: Field, item_result: Field) -> Self {\n        Result { call_num, eat, bite, item, item_result }\n    } \n}\n\nfn deserializeResult(fields: [Field; RESULT_SERIALIZED_LEN]) -> Result {\n    Result { \n        call_num: fields[0], \n        eat: fields[1], \n        bite: fields[2],\n        item: fields[3],\n        item_result: fields[4] \n    }\n}\n\nfn serializeResult(result: Result) -> [Field; RESULT_SERIALIZED_LEN] {\n    [result.call_num, result.eat, result.bite, result.item, result.item_result]\n}\n\nglobal ResultSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeResult,\n    serialize: serializeResult,\n};",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/result.nr"
      },
      "156": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal PLAYER_SERIALIZED_LEN: Field = 2;\n\nstruct Player {\n    player_id: Field,\n    is_player: bool\n}\n\nimpl Player {\n    pub fn new(player_id:Field, is_player: bool) -> Self {\n        Player { player_id, is_player }\n    } \n}\n\nfn deserializePlayer(fields: [Field; PLAYER_SERIALIZED_LEN]) -> Player {\n    Player { player_id: fields[0], is_player: fields[1] as bool}\n}\n\nfn serializePlayer(player: Player) -> [Field; PLAYER_SERIALIZED_LEN] {\n    [player.player_id, player.is_player as Field ]\n}\n\nglobal PlayerSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializePlayer,\n    serialize: serializePlayer,\n};",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/player.nr"
      },
      "157": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal GAME_SERIALIZED_LEN: Field = 8;\n\nstruct Game {\n    players: [Field;2],\n    is_number_set: [bool;2],\n    started: bool, // true if both players are added and secret numers are set.\n    finished: bool,\n    round: Field,\n    is_first: bool\n}\n\nimpl Game {\n    pub fn new(\n        players: [Field;2],\n        is_number_set: [bool;2],\n        started: bool,\n        finished: bool,\n        round: Field,\n        is_first: bool\n    ) -> Self {\n\n        Game { \n            players,\n            is_number_set, \n            started, \n            finished, \n            round, \n            is_first\n        }\n    } \n}\n\nfn deserializeResult(fields: [Field; GAME_SERIALIZED_LEN]) -> Game {\n    let _players = [fields[0], fields[1]];\n    let _is_number_set = [fields[2] as bool, fields[3] as bool];\n    \n    Game { \n        players: _players,\n        is_number_set: _is_number_set,\n        started: fields[4] as bool, \n        finished: fields[5] as bool, \n        round: fields[6], \n        is_first: fields[7] as bool\n         }\n}\n\nfn serializeResult(game: Game) -> [Field; GAME_SERIALIZED_LEN] {\n    [\n        game.players[0],\n        game.players[1],\n        game.is_number_set[0] as Field,\n        game.is_number_set[1] as Field,\n        game.started as Field, \n        game.finished as Field, \n        game.round, \n        game.is_first as Field\n    ]\n}\n\nglobal GameSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeResult,\n    serialize: serializeResult,\n};",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/types/game.nr"
      },
      "158": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::aztec::{\n    state_vars::{\n            singleton::Singleton,\n    },\n};\nuse crate::types::{\n    secret_num_note::{SecretNumberNote, SECRET_NUM_NOTE_LEN},\n};\n\nglobal ITEM_HIGH_LOW: Field = 1; // see buttom in this file\nglobal ITEM_SLASH: Field = 2; // 2 ~ 9\nglobal ITEM_TARGET: Field = 3; // 0 or 1, 2, 3\nglobal ITEM_CHANGE: Field = 4; // 1, 2, 3\nglobal ITEM_SHUFFLE: Field = 5; // nothing\n\nglobal LOW: Field = 1;\nglobal HIGH: Field = 2;\nglobal CRACK: u16 = 5;\n\nfn get_high_and_low(_note: Singleton<SecretNumberNote, SECRET_NUM_NOTE_LEN>) -> Field {\n    let note = _note.get_note(true);\n    let secret_num: Field = note.secret_num;\n\n    let mut num = secret_num as u16;\n    let mut modulus: u16 = 100;\n    let mut result: Field = 0;\n\n    for i in 0..3 {\n        if ((i == 0) & (num < 100)) {\n            result += (LOW * modulus as Field);\n        } else {\n           let subtractor = num - (num % modulus);\n           let crack = CRACK * modulus;\n\n           if ( subtractor < crack ) {\n            // low\n            result += (LOW * modulus as Field);\n           } else {\n            // high\n            result += (HIGH * modulus as Field);\n           }\n\n            num = num - subtractor;\n\n        }\n\n        modulus = modulus / 10;\n    }\n\n    result\n}\n\n\n    // for testing purpose\n    pub fn _get_high_and_low(_num:Field) -> Field {\n\n    let mut num = _num as u16;\n    let mut modulus: u16 = 100;\n    let mut result: Field = 0;\n\n    for i in 0..3 {\n        if ((i == 0) & (num < 100)) {\n            result += (LOW * modulus as Field);\n        } else {\n           let subtractor = num - (num % modulus);\n           let crack = CRACK * modulus;\n\n           if ( subtractor < crack ) {\n            // low\n            result += (LOW * modulus as Field);\n           } else {\n            // high\n            result += (HIGH * modulus as Field);\n           }\n\n            num = num - subtractor;\n\n        }\n\n        modulus = modulus / 10;\n    }\n\n    result\n    }\n\n// global LOW_lOW_HIGH: Field = 112; \n// global LOW_HIGH_HIGH: Field = 122; \n// global LOW_HIGH_lOW: Field = 121; \n// global HIGH_HIGH_LOW: Field = 221; \n// global HIGH_LOW_LOW: Field = 211; \n// global HIGH_lOW_HIGH: Field = 212; \n\n",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/item_lib.nr"
      },
      "159": {
        "source": "    fn is_valid_nums(_num: Field) {\n        assert(_num as u16 >= 12, \"number should be bigger than 11\");\n        assert(_num as u16 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u16;\n        let mut modulus: u16 = 100;\n        let mut nums: [u16;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u16;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n    }\n\n    fn check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u16;\n        let mut secret_num = _secret_num as u16;\n\n        let mut modulus: u16 = 100;\n        let mut call_nums: [u16;3] = [0;3];\n        let mut secret_nums: [u16;3] = [0;3];\n\n\n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u16;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u16;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n    }\n\n    pub fn _is_valid_nums(_num: Field) -> [u16;3] {\n        assert(_num as u16 >= 12, \"number should be bigger than 11\");\n        assert(_num as u16 <= 987, \"number should be lower than 988\");\n\n        let mut num = _num as u16;\n        let mut modulus: u16 = 100;\n        let mut nums: [u16;3] = [0;3];\n\n        for i in 0..3 {\n            if ((i == 0) & (num < 100)) {\n                nums[i] = 0 as u16;\n            } else {\n               let subtractor = num - (num % modulus);\n               nums[i] = subtractor / modulus;\n               num = num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        assert((nums[0] != nums[1]) & (nums[1] != nums[2]) & (nums[2] != nums[0]), \"duplication not allowed\");\n        assert((nums[0] < 10) & (nums[1] < 10) & (nums[2] < 10), \"nums should be less than 10\");\n\n        nums\n    }\n\n    pub fn _check_result(\n        _call_num: Field, \n        _secret_num: Field,\n    ) -> [Field;2] {\n\n        let mut call_num = _call_num as u16;\n        let mut secret_num = _secret_num as u16;\n\n        let mut modulus: u16 = 100;\n        let mut call_nums: [u16;3] = [0;3];\n        let mut secret_nums: [u16;3] = [0;3];\n\n        \n        for i in 0..3 {\n            if ((i == 0) & (call_num < 100)) {\n                call_nums[i] = 0 as u16;\n            } else {\n               let subtractor = call_num - (call_num % modulus);\n               call_nums[i] = subtractor / modulus;\n               call_num = call_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        modulus = 100;\n\n        for i in 0..3 {\n            if ((i == 0) & (secret_num < 100)) {\n                secret_nums[i] = 0 as u16;\n            } else {\n               let subtractor = secret_num - (secret_num % modulus);\n               secret_nums[i] = subtractor / modulus;\n               secret_num = secret_num - subtractor;\n            }\n\n            modulus = modulus / 10;\n        }\n\n        let mut ret: [Field;2] = [0;2];\n\n        for i in 0..3 {\n            \n            for j in 0..3 {\n\n                   if (i == j) & (call_nums[i] == secret_nums[j]) {\n                    ret[0] = (ret[0] + 1) as Field;\n                   } \n\n                   if (i != j) & (call_nums[i] == secret_nums[j]) {\n                    ret[1] = (ret[1] + 1) as Field;\n                   }\n            }\n        }\n\n        ret\n        \n    }\n",
        "path": "/Users/jack-sw/Codes/abstract/aztec-numer0n/aztec-contracts/contracts/numer0n/src/num_lib.nr"
      }
    }
  }
}